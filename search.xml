<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>韩顺平 零基础30天学会Java</title>
      <link href="/2022/06/06/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/"/>
      <url>/2022/06/06/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=9&spm_id_from=pageDriver">韩顺平 零基础30天学会Java</a></p><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><p>了解了该视频课程的大纲和Java的基本知识，Java1995年推出，目前稳定维护的有Java8和Java11版本。</p><p>JVM（Java虚拟机）：JVM包含于JDK中，Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</p><p>JRE（Java运行环境）：JRE=JVM+Java的核心类库。</p><p>JDK（Java开发工具包）：JDK=JRE+Java的开发工具</p><p>在桌面图标里勾选此电脑就可以在桌面显示此电脑了</p><p>dos命令行快捷键：win+r</p><p>在对应文件夹上地址上输入cmd可以直接在该目录下打开命令行</p><p>在控制台，输入tab键，可以实现命令补全</p><p>==本机Java8的JDK安装位置：C:\Program Files\Java\jdk1.8.0_211\bin==</p><p>==代码存放位置：E:\java韩顺平\练习代码==</p><p>==环境变量path的设置==，增加JAVA_HOME环境变量，指向JDK的安装目录，编辑path环境变量，增加%JAVA_HOME%\bin</p><p>如果程序中含有中文的时候，使用命令行编译的时候，需要将sublime中的文件-&gt;Set File Encoding to-&gt;GBK，再保存，才能够正确编译成class文件，而GBK是根据cmd设置的编码方式相关</p><p>运行的时候不是输入Hello.java，而是Hello，因为它实际运行的是Hello这个主类。</p><p>一个源文件中最多只能有一个public类，其他类的个数不限。每一个类都就会生成一个对应的class文件。也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法。</p><p>在学习新技术时我们要思考它有什么好处，能应用到什么方面。学习新技术时先关注知识点的基本语法和基本语句，暂时不需要考虑细节，然后完成一个基础项目，最后开始考虑研究技术的注意事项、使用细节、使用规范、如何优化。</p><p>java对单引号和双引号敏感，输出时是使用双引号的。</p><p>找不到文件，可能是文件名写错了，也可能没有在当前目录下。<br>最不好修改的是编译没有问题，但是业务逻辑错误，还有环境错误。</p><p>==变量有三个基本要素：类型+名称+值==</p><p>程序中的加号，当左右两边一方为字符串，则做拼接运算，运算顺序从左到右。</p><h3 id="java转义字符"><a href="#java转义字符" class="headerlink" title="java转义字符"></a>java转义字符</h3><p>换行与回车的区别，回车后会直接到当前行的首位，而不是换下一行，而且会用当前字符覆盖掉之前的字符</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>\t</td><td>一个制表位，实现对齐功能</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\|一个</td><td></td></tr><tr><td>&quot;</td><td>一个”</td></tr><tr><td>&#39;</td><td>一个’</td></tr><tr><td>\r</td><td>一个回车</td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>多行注释内不允许内嵌多行注释，因为第一开始与第二个的结束符号匹配，导致第一的结束符号报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//单行注释</span><span class="token comment">/*多行注释  多行注释*/</span>  <span class="token comment">//文档注释</span>java文件中<span class="token comment">/*** @author 西芹* @version 1.0*/</span>cmd中：表示将结果存放在存放<span class="token class-name">D</span>盘的temp文件下，关键字根据上面的注释写，最后写文件名<span class="token class-name">E</span><span class="token operator">:</span>\java韩顺平\练习代码<span class="token operator">></span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version <span class="token class-name">Comment02</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Javadoc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题。</li><li>源代码使用utf-8编码。</li><li>行宽度不要超过80字符。</li><li>代码编写有次行风格和行尾风格，推荐行尾风格。</li></ul><h3 id="dos命令"><a href="#dos命令" class="headerlink" title="dos命令"></a>dos命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dir</td><td>查看当前目录有什么</td></tr><tr><td>cd</td><td>切换到其他文件夹，切换到其他盘，需要加上/D。例如E:\java韩顺平\练习代码&gt;cd /D c:</td></tr><tr><td>md</td><td>新建文件夹</td></tr><tr><td>rd</td><td>删除文件夹</td></tr><tr><td>..|到上级目录</td><td></td></tr><tr><td>help</td><td>查看命令的详细信息</td></tr><tr><td>cd |直接切换到根目录</td><td></td></tr><tr><td>tree</td><td>查看指定目录下的所有子级目录</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出DOS</td></tr></tbody></table><h2 id="第二章-变量"><a href="#第二章-变量" class="headerlink" title="第二章 变量"></a>第二章 变量</h2><p>java的整型常量（具体值）==默认为int型==，声明long型常量需后加‘l’或’L‘。例如  <code>long num = 50L</code> 。</p><p>浮点数构成：浮点数=符号位+指数位+尾数位。</p><p>java的浮点型常量（具体值）==默认为double型==，声明为float型常量需后加’f’或’F’。例如<code>float num = 1.1F</code> 。</p><p>浮点型常量有两种表现形式：1、十进制数形式 <code>double num = 5.12</code>;2、科学计数法形式 <code>double num = 2.12e2</code> 。</p><p>==当我们对运算结果是小数的进行相等判断时，要小心，因为可能会有精度误差，应该是以两个数的差值的绝对值在某个精度范围类判断。==如果是直接查询得到的小数或者赋值是可以正常判断的。</p><p>API（应用程序编程接口）是java提供的基本编程接口（java提供的类还有相关的方法）。<a href="https://www.matools.com/">中文在线文档</a></p><p>字符类型可以直接存放一个数字，因为在java中char的本质是一个整数，例如 <code>char c4 = 97</code> ，但是会输出数字对应的Unicode字符。</p><p>字符常量需要使用单引号括起来，例如 <code>char c1 = &#39;a&#39;</code> ,双引号代表字符串。java中还运行使用转义字符’&#39;将字符转变为特殊字符串常量，例如 <code>char c3 = &#39;\n&#39;</code> 。char类型是可以进行运算的，相当于一个整数，因为它都有对应的Unicode码。</p><p>==布尔类型不可以使用0或非0的整数代替false和true，这点和C语言不同。==</p><p>当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。==有多种类型的数据混合运算时，系统首先将所有数据转换成容量最大的数据类型，然后再进行计算。==</p><p>char-&gt;int-&gt;long-&gt;float-&gt;double;byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double。</p><p>==（byte,short）和char不会自动转换，但是它们三者之间是可以进行运算的，在计算时首先转换为int类型，包括自身的运算，例如byte和byte运算结果也是int。==</p><p>boolean类型不参与自动转换。</p><p>强制类型转换使用时用加上强制转换符()，例如 <code>int i = (int)1.9</code> 。可能造成精度丢失，需要格外注意。强制转换符号只对最近的操作数有效，往往会使用小括号提升优先级，例如 <code>int x = (int)(10 * 3.5 + 6 * 1.9)</code>。</p><p>基本数据类型转String，使用加号和双引号即可,例如 <code>String s1 = n1 + &quot;&quot;</code> 。String转基本数据类型，使用基本数据类型的包装类调用方法parseXX方法即可，例如 <code>int num = Integer.parseInt(s5)</code> ，但是一定要确保能够转换成有效的数据。从String中取字符，指定需要获取的第几个元素， <code>char c1 = s.charAt(0)</code> 。</p><p>**java数据类型 **</p><p>基本数据类型：1、数值型：整数类型：byte[1]、short[2]、int[4]、long[8]；浮点类型：float[4]、double[8]。2、字符型char[2]。3、布尔型boolean[1]。</p><p>引用数据类型：类(class)、接口(inferface)、数组([])。</p><p><strong>字符编码表</strong></p><table><thead><tr><th>编码表</th><th>简介</th></tr></thead><tbody><tr><td>ASCII</td><td>一个字节表示一个字符，一共有128个字符，上限为256个字符</td></tr><tr><td>Unicode</td><td>使用两个字节表示字符，汉字和字母统一占用2个字节</td></tr><tr><td>UTF-8</td><td>大小可变的 编码表，字母使用1个字节，汉字使用3个字节，可以使用1-6个字符表示一个符号</td></tr><tr><td>gbk</td><td>字母使用1个字节，汉字使用2个字节</td></tr><tr><td>big5码</td><td>存储繁体中文</td></tr></tbody></table><h2 id="第三章-运算符"><a href="#第三章-运算符" class="headerlink" title="第三章 运算符"></a>第三章 运算符</h2><p>java取余的本质，公式 <code>a % b = a - a / b *b</code> ，当a为小数时，公式转变为 <code>a % b = a - (int) a / b * b</code>。</p><p><code>&amp;和|是逻辑运算符，&amp;&amp;和||是短路运算符</code> 。</p><p><code>x=flase</code> 的返回结果是flase，同理 <code>x=true</code> 的返回结果是true。</p><p>==有小数参与运算，得到结果是近似值。==</p><p><strong>算术运算符</strong></p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>正号；数字相加；字符串相加</td></tr><tr><td>-</td><td>负号；数字相减；</td></tr><tr><td>*</td><td>数字相乘</td></tr><tr><td>/</td><td>数字相除</td></tr><tr><td>%</td><td>取模（取余）</td></tr><tr><td>++</td><td>先运算后取值；先取值后运算</td></tr><tr><td>–</td><td>先运算后取值；先取值再运算</td></tr></tbody></table><p><strong>算术运算符例题</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为1，因为规则使用临时变量,(1)temp=i;(2)i=i+1;(3)i=temp。所以结果为1。</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为2，因为规则使用临时变量,(1)i=i+1;(2)temp=i;(3)i=temp.所以结果为2。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复合运算符会进行逻辑转换</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>b<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//等价于b=(byte)(b+2)</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//等价于b=(byte)(b+1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>标识符命名规则</strong></p><ul><li>有26个字母，0-9，_和$组成。</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>java中严格区分大小写，长度无限制。</li></ul><p><strong>标识符命名规范</strong></p><ul><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc，例如：<code>com.hsp.crm</code>  。</li><li>类名、接口名：多单词组成时，所有单词的首字母大写（大驼峰）：XxxYyyZzz，例如： <code>TankShotGame</code> 。</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写（小驼峰）：xxxYyyZzz，例如：<code>tankShotGame</code> 。</li><li>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ，例如：<code>TAX_RATE</code> 。</li></ul><p><strong>接收键盘输入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//导入对应的包</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">//创建Scanner对象</span><span class="token class-name">Scanner</span> myscanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法，接收用户输入</span><span class="token class-name">String</span> name <span class="token operator">=</span> myscanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进制</strong></p><table><thead><tr><th>进制</th><th>表示方式</th></tr></thead><tbody><tr><td>二进制</td><td>以0b或0B开头</td></tr><tr><td>十进制</td><td>正常形式</td></tr><tr><td>八进制</td><td>以数字0开头</td></tr><tr><td>十六进制</td><td>以0x或0X开头，0-9及A(10)-F(15)，此处的A-F不区分大小写</td></tr></tbody></table><p><strong>位运算</strong></p><table><thead><tr><th>符号</th><th>效果</th></tr></thead><tbody><tr><td>~</td><td>取反</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&gt;&gt;</td><td>算术右移，低位溢出，符号位不变，用符号位补溢出的高位</td></tr><tr><td>&lt;&lt;</td><td>算术左移，符号位不变，低位补0</td></tr><tr><td>&gt;&gt;&gt;</td><td>逻辑右移，也称为无符号右移。运算规则是低位溢出，高位补0</td></tr></tbody></table><p><strong>原码、反码、补码</strong></p><ul><li>二进制的最高位是符号位：0代表正数，1代表负数。</li><li>正数的原码、反码、补码都一样。</li><li>负数的反码=原码符号位不变，其他位取反。</li><li>负数的补码=反码+1，负数的反码=补码+1。</li><li>0的反码，补码都是0。</li><li>java没有无符号数，java中的数都是有符号的。</li><li><strong>在计算机运行的时候，都是以补码的方式来运算的</strong>。</li><li><strong>当我们看运算结果的时候，要看他的原码。</strong></li></ul><p><strong>位运算解析</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、先得到-2的原码，由于默认为int型，4个字节，32位，原码为10000000 00000000 00000000 00000010</span><span class="token comment">//2、-2的反码：11111111 11111111 11111111 11111101</span><span class="token comment">//3、-2的补码：11111111 11111111 11111111 11111110</span><span class="token comment">//4、取反操作：00000000 00000000 00000000 00000001,运算后的补码</span><span class="token comment">//5、运算后的原码就是00000000 00000000 00000000 00000001=>1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为1</span><span class="token comment">//1、得到2的补码：00000000 00000000 00000000 00000010</span><span class="token comment">//~2操作:11111111 11111111 11111111 11111101，这是运算后的补码</span><span class="token comment">//3、运算后的反码:11111111 11111111 11111111 11111100</span><span class="token comment">//4、运算后的原码:10000000 00000000 00000000 00000011=>-3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四章-控制结构"><a href="#第四章-控制结构" class="headerlink" title="第四章 控制结构"></a>第四章 控制结构</h2><p>三大流程控制语句：顺序控制、分支控制、循环控制。</p><p>在java中，只要有值返回，就是一个表达式。</p><p>==break语句出现在多层嵌套的语句块中，可以通过标签指明要终止的是哪一层语句块。==</p><p>==字符串比较是否相同：<code>&quot;林黛玉&quot;.equals(name)</code> 。尽量把具体对象写在前面以避免空指针。==</p><p>continue语句用于结束本次循环，继续执行下一次循环。在多层嵌套的循环语句体中，可以通过标签指定要跳过哪一层循环，这个和前面的break语句类似。</p><p>当return用在方法时，表示跳出方法，如果用在main，表示退出程序。</p><p><strong>Switch注意事项</strong></p><ul><li>表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型。</li><li>Switch表达式中的返回值必须是：byte,short,int,char,enum,String。</li><li>case子句中的值必须是常量或常量表达式，而不能是变量。</li><li>default子句是可选的，当没有匹配的case时，执行default。</li><li>Switch穿透：case中没有break语句，运行结束后直接执行下一个case的语句，不会进行判断。</li></ul><p><strong>for使用细节</strong></p><ul><li>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略。</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。</li></ul><p><strong>编程思想</strong></p><ul><li>化繁为简：将复杂的需求，拆解成简单的需求，逐步完成。</li><li>先死后活：先考虑固定的值，然后转成灵活变化的值。</li></ul><p><strong>标签</strong></p><ol><li>label1是标签，名字由程序员指定。</li><li>break后指定到哪个标签就退出到哪里。</li><li>在实际的开发中，尽量不使用标签。因为会导致可读性变差。</li></ol><p><strong>标签的例子</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">label1<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//外层for循环</span>label2<span class="token operator">:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">break</span> label1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五章-数组"><a href="#第五章-数组" class="headerlink" title="第五章 数组"></a>第五章 数组</h2><p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。</p><p>二维数组指向多个一维数组，一维数组再指向具体的值。</p><p>==二维数组允许每列的元素个数不相同。==</p><p><strong>数组操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//新建数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hens <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//先声明，再分配</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//也可以使用int[] a;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//此时才真正赋予存储空间</span><span class="token comment">//获取数组长度</span>len <span class="token operator">=</span> hens<span class="token punctuation">.</span>length<span class="token comment">//二维数组的新建与一维的类似</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//动态初始化,列数不等</span><span class="token comment">//创建二维数组，有3个一维数组，但是每个一维数组没有开空间</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//给每个一维数组开空间</span><span class="token punctuation">&#125;</span><span class="token comment">//获取行数和列数</span>row <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>col <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//练习题</span><span class="token class-name">String</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token comment">//正确</span><span class="token class-name">String</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token comment">//错误，不可以指定数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组细节</strong></p><ol><li>数组创建后，如果没有赋值，有默认值。int、short、byte、long的默认值为0；float和double的默认值为0.0；char的默认值为\u0000；Boolean为false；String为null。</li><li>数组中的元素可以是任何数据类型。包括基本数据类型和引用类型，但是不能混用。</li><li>数组下标从0开始。</li><li>数组属引用类型，数组型数据是对象。</li></ol><p><strong>赋值方式</strong></p><ol><li>基本数据类型赋值，赋值方式为值拷贝。</li><li>数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递。</li><li>==数组在栈中存储一个指向堆的地址，堆中存储实际的值，数组赋值时，实际上是将栈中的地址进行传递，这也是为什么将数组成为引用类型。==</li></ol><p><strong>二维数组内存示意图</strong></p><img src="97b2904d6220cca5a9e0944106126e87.jpg" alt="未命名文件.jpg" style="zoom:50%;" /><h2 id="第六章-面向对象-基础"><a href="#第六章-面向对象-基础" class="headerlink" title="第六章 面向对象(基础)"></a>第六章 面向对象(基础)</h2><p>属性如果不赋值，有默认值，与数组相同。</p><p>由于对象也是引用类型，所以赋值也是引用传递。</p><p>==方法不能嵌套定义。==</p><p>方法重载：java中允许同一个类中，多个重名方法的存在，但要求形参列表不一致。</p><p>可变参数：java允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</p><p>==全局变量（属性）可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。我们说的局部变量一般是指在成员方法中定义的变量。==</p><p>属性可以加修饰符，局部变量不可以加修饰符。</p><p>可以使用hashCode()函数内存地址转换成的整数。例如 <code>this.hashCode()</code> 。</p><p>使用Double包装类返回值，就可以返回null来提示错误信息。</p><p><strong>类的操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明类</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token class-name">String</span> color<span class="token punctuation">;</span>  <span class="token comment">//新建方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span><span class="token string">"接收的信息："</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例化，创建对象</span><span class="token comment">//cat1是对象名(对象引用),new Cat()创建的对象空间(数据)才是真正的对象。</span><span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小白"</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将cat1指针置空</span>cat1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类与对象的区别</strong></p><ol><li>类是抽象的，概念的，代表一类事物，即它是数据类型。</li><li>对象是具体的，实际的，代表一个具体事物，即是实例。</li><li>类是对象的模板，对象是类的一个实体，对应一个实例。</li></ol><p><strong>对象内存示意图</strong></p><p>基本数据类型存储于堆中，引用类型存储于方法区中的常量池。</p><img src="5f4a10b99b9515c31caf316ec5e16bae.jpg" alt="类与对象.jpg" style="zoom:50%;" /><p><strong>java内存的结构分析</strong></p><ol><li>栈：一般存放基本数据类型（局部变量）。</li><li>堆：存放对象（Cat cat，数组等）。</li><li>方法区：常量池（常量，比如字符串），类加载信息。</li></ol><p><strong>java创建对象流程</strong></p><ol><li>先加载类信息（属性和方法信息，每个类只加载一次）。</li><li>在堆中分配空间，进行默认初始化。</li><li>把堆中地址赋给栈中的对象名，使得对象名指向对象。</li><li>进行指定初始化。</li></ol><p><strong>方法调用</strong></p><ol><li>当程序执行到方法时，就会开辟一个独立的空间（栈空间）。</li><li>当方法执行完毕，或者执行到return语句时，就会返回到调用方法的地方。</li><li>返回后，继续执行方法后面的代码。</li><li>当main方法(栈)执行完毕，整个程序退出。</li></ol><p><strong>返回数据</strong></p><ol><li>一个方法最多一个返回值，使用数组可以传递多个结果。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">returnarr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>返回类型可以为任意类型，包含基本数据类型或引用类型。</li><li>如果方法要求有返回类型，则方法体中最后的执行语句必须为return值，而且要求返回值类型必须和return的值类型一致或兼容。</li><li>如果方法返回类型为void，则方法体中可以没有return或只写return。</li></ol><p><strong>成员方法传参机制</strong></p><ol><li>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</li><li>引用类型传递的是地址（地址也是值），可以通过形参影响实参。对象也是引用类型。</li></ol><p><strong>递归使用规则</strong></p><ol><li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。</li><li>方法的局部变量是独立的，不会相互影响。</li><li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用类型的数据。</li><li>当方法执行完毕，或者遇到return，就返回，遵守谁调用，就把结果返回给谁，同时方法执行完毕或者返回时，该方法执行完毕。</li></ol><p><strong>方法重载</strong></p><ol><li>方法名：必须相同</li><li>形参列表：必须不同，形参类型或个数或顺序，至少有一个不同，参数名无要求</li><li>返回类型：无要求</li></ol><p><strong>可变参数声明</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">&#123;</span>  <span class="token comment">//计算多个数的和</span>  <span class="token comment">//int...表示接受的是可变参数，类型是int，使用可变参数时，可以当作数组来使用</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可变参数细节</strong></p><ol><li>可变参数的实参可为0到任意多个。</li><li>可变参数的实参可以是数组。</li><li>==可变参数的本质就是数组。==</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数放在最后。</li><li>一个形参列表只能出现一个可变参数。</li></ol><p><strong>构造器/构造方法</strong></p><ol><li>主要作用是完成对新对象的初始化，并不是创建对象</li><li>==构造器没有返回值，也不能写void==</li><li>方法名和类名要一致</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用由系统完成，不能自行调用</li><li>构造器也允许重载</li><li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器，可以使用javap指令反编译查看。例如 <code>javap Dog.class</code> 。</li></ol><p><strong>构造器/构造方法声明</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用this指定当前对象，即当前调用构造器的对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>this使用细节</strong></p><ol><li>this关键字可以用来访问本类的属性、方法、构造器</li><li>this用于区分当前类的属性和局部变量<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span>  <span class="token comment">//传统方式，输出局部变量smith</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this方式，输出类属性jack</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>访问成员方法的语法：this.方法名(参数列表)</li><li>访问构造器语法：this(参数列表)；==注意只能在构造器中调用本类的另一个构造器，而且必须放置于第一条语句，因此只能用一个==</li><li>this不能在类定义的外部使用，只能在类定义的方法中使用。</li></ol><p><strong>题目解析</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//Test类的main方法，任何一个类，都可以有自己的main方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//new Test()是匿名对象，只使用一次，因为没有对象名，使用后被销毁</span>    <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10</span>    <span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出9</span>    t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七章-面向对象-中级"><a href="#第七章-面向对象-中级" class="headerlink" title="第七章 面向对象(中级)"></a>第七章 面向对象(中级)</h2><p>idea编译后的文件会存放在out文件夹下，src文件夹存放源码文件。</p><p>文件-&gt;设置-&gt;编辑器-&gt;代码模板：可以查看模板或者编辑模板。遇到一个问题是我没有java的模板。可以使用代码模板加快速度，例如使用 <code>sout</code> 加缩进自动补全为打印。</p><p>package关键字，声明当前类所在的包，需要放在类的最上面。</p><p>==包的本质实际上就是创建不同的文件夹来保存类文件。==</p><p>当类重名的时候，默认使用引入的类，或者通过指定包名来指出使用的类。</p><p>==包的命名只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字。==</p><p>继承声明：<code>class 子类 extends 父类</code> 。</p><p>方法重写(覆盖)：子类的方法和父类的方法的名称、返回类型和参数都一样，那么子类的该方法覆盖父类的对应方法。</p><p>多态是指方法和对象具有多种形态，可以提高代码的复用性，利于代码维护。</p><p>instanceof比较操作符，用于判断对象的运行类型是否为某类型或某类型的子类型。例子：<code>cat instanceof Animal</code> 。</p><p>==多态的方法首先看运行类型，属性首先看编译类型。==</p><p>多态数组：数组的定义类型为父类类型，里面保存的实际元素为子类类型。</p><p>toString方法默认返回类的全类名(包名+类名)+@+十六进制哈希值(由hashCode获取)。当直接输出一个对象时，toString方法会被默认调用。</p><p>当某个对象没有任何引用时，则JVM就认为这个对象是一个垃圾对象，会使用垃圾回收机制销毁该对象，在销毁该对象前，会先调用finalize方法。垃圾回收并不是即时的，有自己的一套算法，使用System.gc()主动调用。</p><p>==在断点调试过程中是运行状态，是以对象的运行类型来执行的。==</p><p>设置步进至源码：文件-&gt;构建，执行，部署-&gt;调试器-&gt;步进-&gt;取消勾选 <code>java.*</code> 和 <code>javax*</code> 。</p><p>建议一段代码完成一个小功能，尽量不要混在一起。</p><p>数据校验时，可以采用找出不正确的金额条件，然后给出提示，就直接break。</p><p><strong>idea快捷键</strong></p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+d</td><td>删除当前行</td></tr><tr><td>ctrl+alt+向下箭头</td><td>复制当前行到下一行</td></tr><tr><td>alt+/</td><td>代码补全</td></tr><tr><td>ctrl+/</td><td>第一次添加注释，第二次取消注释</td></tr><tr><td>alt+enter</td><td>自动导入光标对应的class</td></tr><tr><td>ctrl+alt+L</td><td>自动格式化代码</td></tr><tr><td>alt+r</td><td>运行代码</td></tr><tr><td>alt+insert</td><td>新建构造器，get和set方法等</td></tr><tr><td>ctrl+h</td><td>查看类的继承关系</td></tr><tr><td>ctrl+b</td><td>快速定位到光标所在的方法</td></tr><tr><td>声明类时在后面加上var,点击enter</td><td>自动分配变量名</td></tr><tr><td>F7</td><td>断点调试跳入方法内</td></tr><tr><td>F8</td><td>逐行执行代码</td></tr><tr><td>F9</td><td>继续，执行到下一个断点</td></tr><tr><td>shift+F8</td><td>跳出方法</td></tr></tbody></table><p><strong>包的作用</strong></p><ol><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ol><p><strong>访问修饰符</strong></p><p>java提供四种访问修饰符，用于控制方法和属性的访问权限，也可以修饰类，但只能使用public和默认修饰符。</p><table><thead><tr><th>访问修饰符</th><th>访问级别</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>公开</td><td>可以</td><td>可以</td><td>可以</td><td>可以</td></tr><tr><td>protested</td><td>受保护</td><td>可以</td><td>可以</td><td>可以</td><td></td></tr><tr><td>没有修饰符</td><td>默认</td><td>可以</td><td>可以</td><td></td><td></td></tr><tr><td>private</td><td>私有</td><td>可以</td><td></td><td></td><td></td></tr></tbody></table><p><strong>封装的实现步骤</strong></p><ol><li>将属性进行私有化private，使用户不能直接修改属性。</li><li>提供一个公共的set方法，用于对属性进行判断并赋值。</li><li>提供一个公共的get方法，用于获取属性的值。</li></ol><p><strong>继承细节</strong></p><ol><li>子类继承父类的所有属性和方法，非私有的属性可以直接访问，私有的需要通过父类的公共方法使用。</li><li>java所有类都是Object类的子类，Object类是所有类的父类。</li><li>子类必须调用父类的构造器，完成父类的初始化。父类构造器的调用不限于直接父类，将一直往上追溯到Object类。</li><li>如果希望指定去调用父类的某个构造器，则显式3的调用一下：super(参数列表)。super只能在构造器中使用，且必须放在构造器第一行。</li><li>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器中，使用了this()方法，就不会默认调用super()方法。</li><li>子类最多只能继承一个父类(指直接继承)，那么如何继承多个？让父类去继承。</li><li>子类往上寻找属性时，遇到一个私有属性不能访问，不会跳过再往上查找，而是直接报错。</li></ol><p><strong>继承题目解析</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//由于有this()方法，所以没有默认调用super()方法</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自身的构造方法</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//默认调用了super();</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//B b = new B()的输出结果为a,b name,b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法重写细节</strong></p><ol><li>子类的方法的参数、方法名称要和父类方法的参数，方法名称完全相同。</li><li>子类方法的返回类型和父类方法的返回类型一样，或者是父类返回类型的子类，比如父类方法的返回类型是object，子类方法的返回类型是String。</li><li>子类方法不能缩小父类的方法权限。</li></ol><p><strong>对象的多态</strong></p><ol><li>一个对象的编译类型和运行类型可以不一致。</li><li>编译类型在定义对象时，就确定了，不能改变。</li><li>运行类型是可以变化的。</li><li>编译类型看定义时等号的左边，运行类型看等号的右边。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//animal编译类型是Animal，运行类型是Dog，相当于披着Animal皮的Dog</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为animal运行类型是Dog，使用执行Dog的cry方法，而不是Animal的cry方法</span>animal<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//animal的运行类型变成了Cat，编译类型仍然是Animal</span>animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态的向上转型</strong></p><ol><li>多态的前提是两个对象(类)存在继承关系</li><li>多态的向上转型的本质是父类的引用指向子类的对象</li><li>多态的向上转型的特点是可以调用父类中的所有成员(需遵守访问权限)，不能调用子类的特有成员，因为在编译阶段，能调用哪些成员是由编译类型决定的，最终运行效果看子类的具体实现。</li><li>==编译阶段只看编译类型，运行时只看具体的运行类型。==</li></ol><p><strong>多态的向下转型</strong></p><ol><li>语法：子类类型 引用名 = （子类类型）父类引用</li><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向当前目标类型的对象</li><li>当向下转型后，可以调用子类类型中的所有成员</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进行向下转型，此时cat的编译类型为Cat，运行类型也是Cat</span><span class="token comment">//向下转型要求animal原来的引用指向的是Cat(第3个特点)</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时可以调用Cat的特有方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态的属性</strong></p><p>属性没有重写，属性的值看编译类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token comment">//父类</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token comment">//子类</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Base</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//base的编译类型的Base,输出值为编译类型的10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态绑定</strong></p><ol><li>当调用对象方法时，该方法会和该对象的内存地址/运行类型绑定。</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//由于B类没有sum()，于是往上找，父类A有，执行A的sum()</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">//getI()在B类有，执行B的getI()，将B类中的i返回</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为30，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>==和equals的对比</strong></p><ol><li>==是一个比较运算符，它既可以判断基本数据类型，也可以判断引用类型。判断基本数据类型是判断值是否相等；判断引用类型则是判断地址是否相等，即判断是否为同一个对象。</li><li>equals方法是Object类中的方法，只能判断引用类型。默认判断地址是否相同，子类中往往重写该方法，用于判断内容是否相等。</li></ol><p><strong>hashCode方法</strong></p><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值一定一样；如果指向不同对象，则哈希值通常不一样</li><li>哈希值主要是根据地址号，但不能完全将哈希值等价于地址</li></ol><h2 id="第八章-面向对象-高级"><a href="#第八章-面向对象-高级" class="headerlink" title="第八章 面向对象(高级)"></a>第八章 面向对象(高级)</h2><p>类的单例(单个实例)模式：采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p><p>当父类的某些方法需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类。</p><p>接口就是给出一些没有实现的方法，封装在一起，到某个类要使用的时候，再根据具体情况将这些方法写出来，一种高层次的抽象。</p><br/><p><strong>类(静态)变量</strong></p><ol><li>类变量(静态变量)会被该类的所有对象实例共享，而且在类加载的时候就生成了。例子：<code>public static int count;</code> 。</li><li>类变量是随着类的加载而创建的，所以即使没有创建对象实例也可以访问。</li><li>类变量存放位置会由于JDK版本不同而产生差异。</li><li>类变量可以通过类名.类变量名或者对象名.类变量名来访问，但是java设计者推荐使用类名.类变量名方式访问。</li><li>类变量的生命周期是随着类的加载开始，随着类的消亡而销毁。</li></ol><p><strong>类(静态)方法</strong></p><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区。</li><li>类方法不允许使用和对象有关的关键字，比如this和super。</li><li>当方法中不涉及任何和对象相关的成员时，则可以将该方法设计成静态方法，提高开发效率。</li><li>当方法使用了static修饰符后，该方法就是静态方法，静态方法只能访问静态属性/变量和静态方法。普通方法既可以访问非静态成员，也可以访问静态成员。</li><li>类变量可以通过类名.类方法名或者对象名.类方法名来访问，但是java设计者推荐使用类名.类方法名方式访问。</li></ol><p><strong>main方法</strong></p><ol><li>main方法是由Java虚拟机调用的，处于不同的类，所以该方法的访问权限必须是public。</li><li>java虚拟机在执行main方法时不需要创建对象，所以该方法的必须是static。所以main方法本质上也是静态方法，遵守静态方法的规则。</li><li>main方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数。String数组是由命令行运行时传入的。idea中可以点击编辑配置-&gt;程序参数中填写。</li></ol><p><strong>代码块</strong></p><ol><li>代码块又称为初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是在加载类时或创建对象时隐式调用。</li><li>修饰符可不写或写static，使用static的为静态代码块，作用就是对类进行初始化，而且随着类的加载而执行，并且只会执行一次；否则为普通代码块，每创建一个对象就执行一次，如果只是使用类的静态成员，普通代码块并不会执行。静态代码块只能调用静态成员。</li><li>相当于另外一种形式的构造器(对构造器的补充机制)，可以做初始化的操作。如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性。</li><li>代码块的执行顺序优先于构造器。构造器的最前面其实隐含了super方法和调用普通代码块。</li></ol><p><strong>类的加载</strong></p><ol><li>创建对象实例时(new)</li><li>创建子类对象实例，父类也会被加载</li><li>使用类的静态成员时</li></ol><p><strong>创建对象的顺序</strong></p><ol><li>调用静态代码块和静态属性初始化，两者的优先级相同，按照顺序执行。</li><li>调用普通代码块和普通属性的初始化。</li><li>调用构造方法。</li></ol><p><strong>子类创建对象的顺序</strong></p><ol><li>==父类==的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li>==父类==的普通代码块和普通属性初始化</li><li>==父类==的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><p><strong>单例模式实现步骤</strong></p><ol><li>构造器私有化，防止用户直接进行创建。</li><li>类的内部创建对象</li><li>向外暴露一个静态的方法：getInstance</li><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉式：在没有使用前就提前创建好对象，可以在getInstance方法中判断是否已经创建对象，改造为懒汉式</span><span class="token keyword">class</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//类的内部创建对象,为了能够在静态方法中返回gf对象，需要将其修饰为static</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//构造器私有化</span>  <span class="token keyword">private</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//向外暴露一个静态的方法：getInstance</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> gf<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>final关键字应用</strong></p><ol><li>final可以修饰类、属性、方法和局部变量。</li><li>当不希望类被继承，可以用final修饰。</li><li>当不希望子类的某个方法被子类覆盖/重写时，可以用final关键字修饰。</li><li>当不希望类的某个属性被修改，可以用final修饰。</li><li>当不希望局部变量被修改，可以用final修饰。</li></ol><p><strong>final细节</strong></p><ol><li>final修饰的属性又叫常量，一般用XX_XX_XX来命名</li><li>final修饰的属性在定义时必须赋初值，并且不能再进行修改，且只能在定义时、构造器和代码块中为其赋初值。</li><li>如果该属性是静态的，则只能在定义时和静态代码块中赋初值。不能在构造器中赋初值，因为静态变量在类加载时创建，而构造器要在对象创建时才加载。</li><li>如果一个类已经是final类了，就没有必要在将其方法修饰为final方法。</li><li>final不能修饰构造方法(即构造器)。</li><li>final和static往往搭配使用，效率更高，不会导致类的加载，底层编译器做了优化处理。</li><li>包装类(Integer,Double,Float,Boolean等都是final)，String也是final类。</li><li>可以指定传入的形参为final。</li></ol><p><strong>抽象类细节</strong></p><ol><li>抽象类不能被实例化。</li><li>抽象类不一定要包含abstract方法，还可以有实现的方法。</li><li>当一个类中存在抽象方法时，需要将该类声明为abstract类。</li><li>abstract只能修饰类和方法，不能修饰属性和其他的。</li><li>抽象类可以有任意成员，因为其本质还是一个类，比如：非抽象方法、构造器、静态方法等。</li><li>抽象方法不可以有主体。</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类。所谓实现方法就是有方法体。</li><li>抽象方法不能使用private、final和static来修饰，因为这些关键字都是和重写相违背的。</li></ol><p><strong>接口</strong></p><ol><li>在JDK7之前，接口中所有方法都没有方法体，都是抽象方法。</li><li>JDK8后接口中可以有静态方法，默认方法，默认方法需要使用default关键字修饰，即接口中可以有方法的具体实现。</li><li>在接口中，抽象方法可以省略abstract关键字。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Myinterface01</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Myinterface01</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java基础 </tag>
            
            <tag> java学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel操作技巧</title>
      <link href="/2022/06/06/excel/"/>
      <url>/2022/06/06/excel/</url>
      
        <content type="html"><![CDATA[<h2 id="01-Excel入门"><a href="#01-Excel入门" class="headerlink" title="01 Excel入门"></a>01 Excel入门</h2><p>跨列居中：对齐方式-水平对齐-选定“跨列居中”（Office365 版本）</p><h3 id="自动调整栏宽"><a href="#自动调整栏宽" class="headerlink" title="自动调整栏宽"></a>自动调整栏宽</h3><ul><li>单栏调整：双击间隔线。</li><li>多栏同宽调整：选定栏数，拖动任一栏宽度调整。（调整列亦同）。</li></ul><h3 id="日期输入"><a href="#日期输入" class="headerlink" title="日期输入"></a>日期输入</h3><ul><li>输入使用斜线格式，方便excel函数等功能计算使用</li><li>使用“右键单元格格式-数字-日期”更换日期格式显示</li><li>更换后日期栏显示“#######”，表示日期文字过长，调整栏宽即可</li><li>“Ctrl+；”输入今日日期，向下拖动自动填充往后日期，拖动后方框右下角图标可设置填充格式，向下输入选项，有重复内容，右键-从下拉列表中选择，可从已输入选项中选择输入</li></ul><h3 id="计算总金额"><a href="#计算总金额" class="headerlink" title="计算总金额"></a>计算总金额</h3><ol><li>在结果栏输入“=”，无需输入数值坐标，直接选定条件数值，输入运算符号，回车自动显示结果</li><li>复制计算结果，粘贴到需计算的第二栏，直接得出第二栏计算结果</li><li>选择结果，向下拖动，自动计算</li><li>添加货币格式a 选定数值，在数字功能区选择货币格式，功能区内可选择增减小数点。b 添加后，可复制该区域，使用格式刷将货币格式粘贴到另一区域</li></ol><h2 id="02-表格设计"><a href="#02-表格设计" class="headerlink" title="02 表格设计"></a>02 表格设计</h2><h3 id="表格框线设计"><a href="#表格框线设计" class="headerlink" title="表格框线设计"></a>表格框线设计</h3><ol><li>打印前预览，默认网格线不被打印，需自行添加设计表格框线（预览符号：快速访问工具栏，没有可在工具栏小箭头内添加）</li><li>添加表格框线a 页面布局-&gt;工作表选项-&gt;网格线-&gt;打印（样式呆板）;b 手动设计：开始-&gt;字体-&gt;框线（选择颜色和样式）</li><li>画框方式a 画笔（两种，绘制外框，绘制内框，按Shift切换橡皮功能，按esc退出）;b 选取范围，套用类型</li></ol><h3 id="背景设计"><a href="#背景设计" class="headerlink" title="背景设计"></a>背景设计</h3><ul><li>excel背景（背景无法打印，仅设计表格时美观用）：页面布局-&gt;页面设置-&gt;背景</li><li>设计表格背景：开始-&gt;字体-&gt;油漆-&gt;选择颜色</li><li>隐藏网格线：页面布局-&gt;工作表选项-&gt;网格线-&gt;查看（取消勾选）</li></ul><h1 id="03-冻结窗格与分割视图"><a href="#03-冻结窗格与分割视图" class="headerlink" title="03 冻结窗格与分割视图"></a>03 冻结窗格与分割视图</h1><p>冻结窗格：选定需冻结窗格的下一栏/列-&gt;视图-&gt;窗口-&gt;冻结窗格-&gt;冻结窗格</p><p>拆分视窗：选定需拆分的大小-&gt;选定那一栏-&gt;视图-&gt;窗口-&gt;拆分</p><h1 id="04-资料排序"><a href="#04-资料排序" class="headerlink" title="04 资料排序"></a>04 资料排序</h1><p>单栏排序：选取排序栏中任一存储格（划重点）–排序与筛选–升序或降序（中文排序依照笔画多少）</p><p>多栏排序：选取表格内任一存储格-&gt;排序与筛选-&gt;自订排序-&gt;先指定第一层排序-&gt;新增层级-&gt;指定第二层排序</p><p>自订清单（依照用户自己设定的顺序来排列资料）：排序与筛选-&gt;自定排序-&gt;选择要排列的栏位-&gt;顺序选定为自订清单-&gt;清单项目-&gt;输入自己想要的顺序。PS：自订清单可以按照自己设定的顺序自动完成内容填充</p><p>删除清单：删除清单-&gt;选择建立的清单-&gt;删除</p><h1 id="05-资料筛选"><a href="#05-资料筛选" class="headerlink" title="05 资料筛选"></a>05 资料筛选</h1><p>筛选：点选表格内任一存储格–排序与筛选–筛选–类别栏–按条件筛选。PS：可同时在多个栏位中进行筛选，筛选时可按正序／倒序排序</p><p>模糊比对功能：类别栏–文字筛选–开始于–“李”。PS：以“李”姓业务员为例</p><p>色彩筛选+排序：上色（按住control不放并选取）-&gt;依色彩排序-&gt;自订排序-&gt;选择要排序的栏位-&gt;“值”为储存格色彩</p><p><strong>移除筛选</strong></p><ol><li>类别栏–清除筛选</li><li>还原表格–排序与筛选–清除／直接点选筛选</li></ol><h1 id="06-格式化为表格-amp-交叉分析筛选器"><a href="#06-格式化为表格-amp-交叉分析筛选器" class="headerlink" title="06 格式化为表格&amp;交叉分析筛选器"></a>06 格式化为表格&amp;交叉分析筛选器</h1><p>表格生成方式（自动侦测表格大小）：页面布局-&gt;色彩-&gt;可更换多种配色</p><p>取消表格：表格样式-&gt;套用无-&gt;清除表格样式</p><p><strong>合计列（汇总行）</strong></p><ul><li>最后一栏会自动进行加总，也可以切换其他计算公式（存储格右侧三角形）</li><li>可以将此栏位公式向左套用（拖动存储格右下角黑十字）</li></ul><p><strong>添加行或列</strong></p><ul><li>添加行：选取汇总行上一行最后一列，按 tab 键</li><li>添加列：输入新一列列名，在此格内按下 enter 键</li><li>套用第一行公式直接拉右下角十字即可</li></ul><p><strong>交叉分析筛选器（切片器）</strong></p><ul><li>表格-&gt;插入交叉分析筛选器（切片器）-&gt;勾选想筛选的栏位-&gt;生成面板</li><li>面板可调整大小、栏位，按 delete 可删除，右上角可清除筛选条件</li><li>同时显示多个项目：按住 control 不放选择</li><li>多重筛选：选取其他面板内的选项</li></ul><h1 id="07-设置格式化的条件"><a href="#07-设置格式化的条件" class="headerlink" title="07 设置格式化的条件"></a>07 设置格式化的条件</h1><p>更改／删除条件：选取要更改的列-&gt;条件格式-&gt;管理规则-&gt;编辑规则-&gt;可重新指定条件</p><p>数据条／色阶／图标集 –显示更有趣</p><p>清除规则：条件格式-&gt;清除规则-&gt;清除整个工作表的规则</p><p><strong>设定格式化</strong></p><ul><li>选取想筛选的栏位所在列–功能区右上角“条件格式”–自行设定条件和突出显示样式</li><li>栏位下方单元格新增突出显示的内容会自动填充显示样式</li></ul><h1 id="08-工作表设定-amp-合并汇算"><a href="#08-工作表设定-amp-合并汇算" class="headerlink" title="08 工作表设定&amp;合并汇算"></a>08 工作表设定&amp;合并汇算</h1><p>工作表复制（不同excel文件之间）：打开两个excel文件-&gt;点选工作表右键-&gt;移动／复制-&gt;选取移动路径<br>-&gt;表格位置-&gt;建立副本</p><p>工作组：按住 control 不放生成工作组</p><p><strong>合并计算</strong></p><ul><li>在需要计算的表格之外建立新的空白工作表-&gt;功能区-&gt;数据-&gt;合并计算</li><li>选取表格范围-&gt;如顶端列、最左栏无数字-&gt;勾选则不计算-&gt;“+”增加范围</li><li>挨个添加工作表需要计算的范围-&gt;勾选“创建指向原数据的链接”-&gt;可查看数据来源</li></ul><h1 id="09-图表制作"><a href="#09-图表制作" class="headerlink" title="09 图表制作"></a>09 图表制作</h1><p>表格制作步骤：框选整个表格（必须包含行、列标题）-&gt;插入-&gt;选择表格样式</p><p>图表移动：图表设计栏右上角-&gt;移动图表-&gt;可选择移动到另一工作表／将图表生成全新工作表</p><p>图表內添加文字或项目：图表设计-&gt;添加图表元素-&gt;选取要添加的内容</p><p>表格变化与图表变化同步：新增表格内容后-&gt;点选图表-&gt;出现框选部分-&gt;将新增内容框选进范围内-&gt;表格变化</p><p>直方图点击直方就可以进行选择填充的图像，比如说可以添加我们增加想要的图像。</p><p>点击图像可以调整选择的数据范围。</p><p>圆形图可以双击图形，并将想要突出的部分分离出来。</p><p>点击图形后可以通过设计按钮对图形进行自定义操作。比如切换行列。</p><p>框选空白位置，点击插入按钮选择迷你图，在选择数据范围即可画出走势图。</p><p>散点图可以点击+按钮选择趋势线对图形进行简单分析。</p><p>组合图可以用于实现不同数量级的数据的展示。</p><h1 id="10-枢纽分析表"><a href="#10-枢纽分析表" class="headerlink" title="10 枢纽分析表"></a>10 枢纽分析表</h1><p>建立：点选表格内任一存储格-&gt;插入-&gt;数据透视表-&gt;可选范围和位置。PS：勾选想要显示的栏位标题-&gt;拖拽标题至不同位置会在数据透视表发生相应变化。</p><p>排序：点选数据透视表內任意一格-&gt;右键-&gt;排序</p><p>查看数据来源：点选数据透视表内某格-&gt;左键×2</p><p>设置值的显示方式：选择要设定的选项-&gt;数据透视表字段-&gt;汇总方式、数据显示方式</p><p><strong>筛选</strong></p><ul><li>现有列筛选：右侧三角（清除-&gt;选单内下拉）</li><li>筛选器筛选：勾选筛选项拖拽至筛选器内</li></ul><p><strong>资料分组</strong></p><ul><li>按住cotrol不放点选对象-&gt;右键-&gt;组成群组</li><li>取消-&gt;选择群组-&gt;右键-&gt;取消</li></ul><h1 id="11-列印分页设定"><a href="#11-列印分页设定" class="headerlink" title="11 列印分页设定"></a>11 列印分页设定</h1><p>通过分页线调整打印页面范围</p><p>页面布局可在打印时出现网格线和标题</p><p>设定页面宽度和高度可以自动缩放</p><p>只需打印几行资料-&gt;框选内容-&gt;设定打印范围</p><h1 id="12-页首，页尾设计-amp-浮水印制作"><a href="#12-页首，页尾设计-amp-浮水印制作" class="headerlink" title="12 页首，页尾设计&amp;浮水印制作"></a>12 页首，页尾设计&amp;浮水印制作</h1><p>点击视图-&gt;页面布局，就可以看到出现了页眉和页脚等信息，点击所选位置即可进行操作。</p><p>点击页眉和页脚处还可以选择想要的格式。</p><p>浮水印的利用图片即可，在图片处按enter键可以将图片往下移动。</p><p>点击设置图片格式可以对图片进行更深一步的处理。</p><h1 id="13-逻辑函数IF"><a href="#13-逻辑函数IF" class="headerlink" title="13 逻辑函数IF"></a>13 逻辑函数IF</h1><p>普通IF函数结构(标点符号为英文)：缺点：只能判断两个条件=IF（条件，“条件成立”，“条件不成立”）</p><p>巢状IF函数(EXCEL2016版本后IFS函数)：缺点：如需叠加层级过多，则公式过于复杂=IF（条件，成立，IF（条件，成立，不成立））</p><h1 id="14-VLOOKUP函数-amp-F4绝对参照"><a href="#14-VLOOKUP函数-amp-F4绝对参照" class="headerlink" title="14 VLOOKUP函数&amp;F4绝对参照"></a>14 VLOOKUP函数&amp;F4绝对参照</h1><p><strong>VLOOKUP函数</strong></p><ul><li>公式=VLOOKUP(关键字，资料范围，列数，查询模式)</li><li>列数是指需要传回的是左起第几列的资料</li><li>参照表格需采用“递增方式”排列（最后一排数字最大）</li><li>查询模式：模糊比对：TRUE；精确比对：FALSE</li></ul><p><strong>绝对引用</strong></p><ul><li>通常情况下，VLOOKUP函数无法自动填充，需将“资料范围”设定为固定区域；<br>否则“资料范围”会因为“相对引用”规则，随“关键字”一行下移；</li><li>方法：选定公式中的资料范围-&gt;笔记本（FN+F4）/电脑 F4-&gt;出现货币符号</li></ul><h1 id="15-IFERROR函数-amp-资料验证"><a href="#15-IFERROR函数-amp-资料验证" class="headerlink" title="15 IFERROR函数&amp;资料验证"></a>15 IFERROR函数&amp;资料验证</h1><p>公式=IFERROR（要检查的公式,公式错误的讯息）</p><p>验证：选择存储格-&gt;数据-&gt;验证-&gt;设置待验证内容和报错信息</p><h1 id="16-COUNTIFS-amp-SUMIFS函数应用"><a href="#16-COUNTIFS-amp-SUMIFS函数应用" class="headerlink" title="16 COUNTIFS&amp;SUMIFS函数应用"></a>16 COUNTIFS&amp;SUMIFS函数应用</h1><p>SUMIFS函数公式=SUMIFS（加总范围，范围1，条件1，范围2，条件2，……）</p><p><strong>COUNTIF函数</strong></p><ul><li>公式=COUNTIF（资料范围，条件）</li><li>注意：文本资料一定要加双引号</li><li>小技巧： 条件可以指定为某空白存储格，便于随时修改</li></ul><p><strong>COUNTIFS函数</strong></p><ul><li>公式=COUNTIFS(范围1，条件1，范围2，条件2，……)</li><li>涉及金额的筛选=COUNTIFS(范围1，条件1，范围2，“&gt;”&amp;存储格)</li><li>存储格内金额可随时修改，符号根据需求选择</li><li>涉及日期的筛选：如需筛选特定两个日期间的资料=COUNTIFS(范围1，条件1，范围2，“&gt;2018/5/15”，范围2，“&lt;2018/6/3”)</li><li>如需筛选特定月份资料：1、利用MONTH函数建立辅助列，归纳出每笔资料所处的月份；2、建立COUNTIF函数，筛选范围设定为新建的月份列</li></ul><h1 id="17-定义名称-amp-INDIRECT函数-amp-下拉选单设定"><a href="#17-定义名称-amp-INDIRECT函数-amp-下拉选单设定" class="headerlink" title="17 定义名称&amp;INDIRECT函数&amp;下拉选单设定"></a>17 定义名称&amp;INDIRECT函数&amp;下拉选单设定</h1><p>定义名称：框选资料范围（不含标题）-&gt;公式-&gt;定义名称</p><p>INDIRECT 函数：以线索中的文字为媒介，取得目标存储格的内容。线索可以来自于两个不同的存储格，以“&amp;”连接</p><h1 id="18-让你事半功倍的12个小技巧"><a href="#18-让你事半功倍的12个小技巧" class="headerlink" title="18 让你事半功倍的12个小技巧"></a>18 让你事半功倍的12个小技巧</h1><p>资料剖析：框选需要剖析的单元格-&gt;数据-&gt;分列-&gt;分隔符号-&gt;勾选分隔符号<br>或分列-&gt;固定宽度-&gt;在数据预览处手动拖动分栏线。</p><p>插入多个空白列：选取想要插入的列数-&gt;鼠标右键-&gt;插入。F4：重复前面的操作</p><p>移除重复资料：框选单元格-&gt;数据-&gt;删除重复值-&gt;勾选</p><p>表格转置：框选单元-&gt;复制-&gt;选择性粘贴-&gt;勾选转置</p><p>贴上运算值：输入操作值-&gt;框选单元格-&gt;选择性粘贴-&gt;运算处点选操作</p><p>显示公式：公式-&gt;显示公式</p><p>目标搜寻：数据-&gt;模拟分析-&gt;单变量求解-&gt;填入对应值。PS：目标单元格内一定要有公式</p><p>表格对角线：开始-&gt;边框-&gt;绘制边框-&gt;手动绘制所需边框或右键-&gt;设置单元格格式-&gt;边框-&gt;选择所需边框</p><p>储存格内换行：ALT+enter</p><p>插入图片注解：选取单元格-&gt;右键-&gt;插入批注-&gt;删除注释框中的名字-&gt;在边框处点击右键-&gt;设置批注格式-&gt;颜色与线条-&gt;颜色-&gt;填充效果-&gt;图片-&gt;选择图片。PS：只有在边框处点击右键才会有颜色与线条选项</p><p><strong>快速选取资料</strong></p><ul><li>Ctrl+键盘方向键：选取框移动到表格的四个角落</li><li>Ctrl+shift+键盘方向键：选取对应的范围</li><li>标题列左上角：选取整张表格</li></ul><p><strong>储存格选取框</strong></p><ul><li>选取需要移动的单元格-&gt;鼠标移至单元格边框-&gt;拖动单元格</li><li>移动时按住Ctrl，复制内容</li><li>移动时按住shift，插入移动处，而不发生覆盖</li></ul><h1 id="19-表格数值格式"><a href="#19-表格数值格式" class="headerlink" title="19 表格数值格式"></a>19 表格数值格式</h1><p>开始-&gt;数字右边的按钮-&gt;数字-&gt;自定义-&gt;类型下面的输入框或快捷键Ctrl+！</p><p>可以添加符号，或者在开头或末尾添加文字。PS：添加文字资讯时记得加上””</p><p>示例：0.00;(0.00);(0.00);@代表正值；负值；零值；文字</p><p>添加颜色：[所选颜色]，添加到所选区域前即可。只有8种颜色或[颜色+色彩编号]，例如[颜色33]</p><p>若语法结构内某类型没有格式，那么将会隐藏该类型<br>可以在格式中加入判断语句，例如[&gt;90]，一个语法最多有两个判断语句若想有多个判断语句：开始-&gt;设定格式化条件</p><p>点选格式后再点选自定义格式即可看到它的语法结构</p><p><strong>符号表</strong></p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>#</td><td>遇到无意义的0将不会显示</td></tr><tr><td>?</td><td>遇到无意义的0将会空一格作为显示</td></tr><tr><td>0</td><td>强制显示每一个指定的位数</td></tr><tr><td>@</td><td>预留文字位置</td></tr><tr><td>*</td><td>重复*后面的符号</td></tr><tr><td>,</td><td>千</td></tr><tr><td>,,</td><td>百万</td></tr><tr><td>_</td><td>预留一个_后面符号的宽度</td></tr></tbody></table><h1 id="20-时间格式-amp-工龄与工时计算"><a href="#20-时间格式-amp-工龄与工时计算" class="headerlink" title="20 时间格式&amp;工龄与工时计算"></a>20 时间格式&amp;工龄与工时计算</h1><p>Datadif(开始日期，结束日期，计算单位）计算单位用”y”,”m”。PS：找不到这个函数，但是可以直接输入使用</p><p>Networkdays（开始日期，结束日期，假日）</p><p>Networkdays.intl(开始日期，结束日期，自定周末，假日)。自定周末输入对应的数字即可</p><p>符号表</p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>[DBNUM1]</td><td>将阿拉伯数字转换为中文数字</td></tr><tr><td>aaaa</td><td>以星期的方式显示</td></tr><tr><td>Ctrl+；</td><td>插入现在的日期</td></tr><tr><td>Ctrl+shift+；</td><td>插入现在的时间</td></tr><tr><td>Today（）</td><td>实时日期</td></tr><tr><td>Now（）</td><td>实时时间，按F9或点击单元格时更新</td></tr><tr><td>[h]</td><td>计算已经过的小时数</td></tr><tr><td>[m]</td><td>计算已经过的分钟数</td></tr></tbody></table><h1 id="21-如何计算成绩排名"><a href="#21-如何计算成绩排名" class="headerlink" title="21 如何计算成绩排名"></a>21 如何计算成绩排名</h1><p>rank.eq(主体，比较范围，排序方式)</p><p>比较范围注意要使用F4来作为绝对参照</p><p>排序方式默认以降序排序，需要升序排序时在排序方式内填入1即可</p><p>rank.avg()与rank.eq类似，只是当成绩相同时，rank.avg采用排名的平均值</p><h1 id="22-提取表格内信息"><a href="#22-提取表格内信息" class="headerlink" title="22 提取表格内信息"></a>22 提取表格内信息</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>Left（资料位置，捉取字数）</td><td>捉取数据左侧的数据</td></tr><tr><td>Right（资料位置，捉取字数）</td><td>捉取数据右侧的数据</td></tr><tr><td>mid（资料位置，开始位置，捉取字数）</td><td>捉取数据中间的数据</td></tr><tr><td>Find（要搜寻的文字，资料来源，搜寻起点）</td><td>查找文字所在位置</td></tr><tr><td>Len（资料）</td><td>计算储存格中的字数和空格</td></tr></tbody></table><h1 id="23-index-match"><a href="#23-index-match" class="headerlink" title="23 index+match"></a>23 index+match</h1><p>hlookup与vlookup类似</p><p>Index（栏/列范围，顺位）或index（资料范围，列数，栏数）</p><p>Match（查找对象，查找范围，比对方式）</p><p>综合运用例子INDEX(C3:F10,MATCH(I2,D3:D10,0),MATCH(H3,C2:F2,0))</p><h1 id="24-保护表格"><a href="#24-保护表格" class="headerlink" title="24 保护表格"></a>24 保护表格</h1><p>可供修改的单元格：框选单元格-&gt;右键-&gt;设置单元格格式-&gt;保护-&gt;取消勾选锁定。</p><p>隐藏单元格公式：框选单元格-&gt;右键-&gt;设置单元格格式-&gt;保护-&gt;勾选隐藏</p><p>隐藏：选定行或列-&gt;右键-&gt;隐藏</p><p>允许编辑范围：审阅-&gt;允许编辑范围-&gt;新建-&gt;设定标题、范围、密码-&gt;确认密码-&gt;确认</p><p>PS：以上操作需取消保护工作表，开启保护工作表后效果才会出现</p><p>保护工作表：审阅-&gt;保护工作表-&gt;输入密码-&gt;确定密码</p><p>保护工作簿与保护工作表类似</p><p><strong>Excel表设置密码</strong></p><ul><li>文件-&gt;信息-&gt;保护工作簿-&gt;用密码进行加密-&gt;设定密码-&gt;确认密码</li><li>另存为-&gt;工具-&gt;常规选项-&gt;设定密码</li></ul><h1 id="25-重复内容"><a href="#25-重复内容" class="headerlink" title="25 重复内容"></a>25 重复内容</h1><p>删除重复信息：框选单元格-&gt;数据-&gt;删除重复值-&gt;勾选选项-&gt;确定</p><p>防止重复内容：选定行或列-&gt;数据-&gt;数据验证-&gt;允许中选定自定义-&gt;填入公式-&gt;确定。公式例子：=countif(A:A,A1)=1</p><p><strong>标注重复信息</strong></p><ul><li>框选单元格-&gt;开始-&gt;条件格式-&gt;突出显示单元格规则-&gt;重复值-&gt;确定</li><li>框选单元格-&gt;开始-&gt;条件格式-&gt;新建规则-&gt;使用公式确定要设置格式的单元格-&gt;输入公式-&gt;修改后一参数值为相对参照-&gt;格式-&gt;填充-&gt;选择颜色-&gt;确定</li><li>公式例子：=countif($E$2:$E$14,$E2)&gt;1</li></ul><h1 id="26-随机函数的使用"><a href="#26-随机函数的使用" class="headerlink" title="26 随机函数的使用"></a>26 随机函数的使用</h1><p><strong>常见函数</strong></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>Randbetween(最小值,最大值)</td><td>从最小值和最大值的范围内产生一个整数</td></tr><tr><td>Choose(序号,可供选择的选项)</td><td>根据序号选择对应选项</td></tr><tr><td>Rand()</td><td>产生0到1的随机数</td></tr><tr><td>Roundup(数值,位数)</td><td>无条件进位函数</td></tr></tbody></table><p><strong>常见例子</strong></p><ul><li>=INDEX(C3:C14,RANDBETWEEN(1,12))</li><li>=CHOOSE(RANDBETWEEN(1,2),”A卷”,”B卷”)</li><li>=CHOOSE(ROUNDUP(RANK(D3,$D$3:$D$14)/4,0),”A组”,”B组”,”C组”)</li><li>=INDEX($C$3:$C$14,RANK(D3,$D$3:$D$14))</li></ul><h1 id="27-进度追踪表"><a href="#27-进度追踪表" class="headerlink" title="27 进度追踪表"></a>27 进度追踪表</h1><p>勾选框块：功能区空白处点击右键-&gt;自定义功能区-&gt;勾选开发工具-&gt;确定-&gt;开发工具-&gt;插入-&gt;选择勾选框块</p><p>完成格与状态的信息传输：框块右键-&gt;设置控件格式-&gt;选择单元格</p><p>进度栏函数设置：=IF(I3=TRUE,1,IF($C$3&gt;=G3,0,”🕒”))。PS：时钟符号可以：1.win10：wins+；2.UNICHAR(128336)</p><p>添加刻度：点击饼图-&gt;设计-&gt;选择数据-&gt;添加-&gt;系列值输入对应数值的1（如={1,1,1,1,1,1,1,1,1,1,1}）-&gt;更换图表类型-&gt;勾选次坐标轴-&gt;选择未完成部分的饼图-&gt;填充选择无填充</p><h1 id="28-甘特图"><a href="#28-甘特图" class="headerlink" title="28 甘特图"></a>28 甘特图</h1><p>插入-&gt;堆积条形图-&gt;设计-&gt;选择数据-&gt;图例项选择“开始日期”和“天数”-&gt;水平轴标签框选“任务名称”-&gt;点击右侧条形-&gt;设置数据系列格式-&gt;填充-&gt;无填充-&gt;点击任务名称-&gt;坐标轴设定-&gt;勾选逆序刻度值-&gt;点击日期标识-&gt;坐标轴设定-&gt;最小值（设定为对应数值，可通过设定单元格格式的通用格式查看）-&gt;单位的大选项为间距设定-&gt;点击右侧条形-&gt;点击+号-&gt;勾选误差线-&gt;更多选项-&gt;选择正偏差、无线端-&gt;自定义选择对应数列-&gt;填充-&gt;实线-&gt;调整宽度</p><h1 id="29-sumproduct"><a href="#29-sumproduct" class="headerlink" title="29 sumproduct"></a>29 sumproduct</h1><p>Sumproduct（A，B）：将A，B分别相乘后相加</p><p>=SUMPRODUCT((C3:C9=C11)*(D3:D9=D11)*F3:F9)</p><p>=SUMPRODUCT(C3:C8,D3:D8)</p><p>规则管理设定规则时需要加上一个$来锁定<br>=OR(AND($E3&gt;1000,$D3&gt;5),$C3=”有”)</p>]]></content>
      
      
      <categories>
          
          <category> 办公 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> office </tag>
            
            <tag> 日常办公 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/03/hello-world/"/>
      <url>/2022/06/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
