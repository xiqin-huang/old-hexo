<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8新特性</title>
      <link href="/2022/09/25/java/java8-xin-te-xing/"/>
      <url>/2022/09/25/java/java8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=666&amp;vd_source=636bdfc4ce8c201bed8740cf77c11dda">尚硅谷Java入门视频教程</a></p><h1 id="新特性简介"><a href="#新特性简介" class="headerlink" title="新特性简介"></a>新特性简介</h1><ul><li>速度更快，便于并行</li><li>代码更少，增加了新的语法：Lambda表达式</li><li>强大的Stream API</li><li>最大化的减少空指针异常：Optional</li><li>Nashorn引擎，允许在JVM上运行JS应用</li></ul><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><strong>Lambda表达式的本质：与其他语言的lambda表达式不同，java中的lambda表达式不是匿名函数，而是作为函数式接口的实例。</strong></p><p>以<code>(o1,02) -&gt; Interger.compare(o1,o2)</code>为例，<code>-&gt;</code>是Lambda操作符或箭头操作符，左边是形参列表，其实就是接口中的抽象方法的形参列表，右边是lambda体，其实就是重写的抽象方法的方法体。</p><p>以前使用匿名实现类表示的现在都可以用lambda表达式做。</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.无参，无返回值</span><span class="token class-name">Runnable</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.Lambda需要一个参数，但是没有返回值</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//3.数据类型可以省略，因为可由编译器推断得出，称为“类型推断”,只有一个参数时可以省略小括号</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//4.表达式需要两个或以上的参数，多条执行语句，并且可以有返回值</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//5.当lambda题只有一条语句时，return和大括号都可以省略</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。</strong></p><p>我们可以在一个接口上使用<code>@FunctionalInterface</code>注解，这样可以检测它是否为函数式接口。</p><p>在java.util.function包下定义了java8丰富的函数式接口。</p><p>java不仅可以支持OOP(面向对象编程)，还可以支持OOF(面向函数编程)。</p><h2 id="核心函数式接口"><a href="#核心函数式接口" class="headerlink" title="核心函数式接口"></a>核心函数式接口</h2><table><thead><tr><th>接口</th><th>参数类型</th><th>返回类型</th><th>用途</th><th>方法</th></tr></thead><tbody><tr><td>Consumer<t></t></td><td>T</td><td>void</td><td>对类型为T的对象应用操作</td><td>void accept(T t)</td></tr><tr><td>Supplier<t></t></td><td>无</td><td>T</td><td>返回类型为T的对象</td><td>T get()</td></tr><tr><td>Function&lt;T,R&gt;</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果为R的对象</td><td>R apply(T t)</td></tr><tr><td>Predicate<t></t></td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某种约束，并返回boolean值</td><td>boolean test(T t)</td></tr></tbody></table><h2 id="方法引用和构造器引用"><a href="#方法引用和构造器引用" class="headerlink" title="方法引用和构造器引用"></a>方法引用和构造器引用</h2><p>当要传递给lambda体的操作，已经有实现的方法了，可以使用方法引用。方法引用就是lambda表达式，通过方法的名字来指向一个方法，可以认为是lambda表达式的一个语法糖。</p><p><strong>使用的要求是实现接口的抽象对象方法的参数列表和返回值类，必须与方法引用的方法的参数列表和返回值类型一致。</strong></p><p>使用格式：<code>类或对象 :: 方法名</code>。具体有三种情况，对象调用非静态方法，类调用静态方法，类调用非静态方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Consumer中的void accept(T t)和PrintStream中的void println(T t)的参数列表和返回值类型一致</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con1 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>con1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用方法引用</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con2 <span class="token operator">=</span> ps<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello,beijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类::实例方法,Comparator中的int compare(T o1,T o2)和String中的int o1.compareTo(o2)</span><span class="token comment">//前者比后者多一个参数，实际上是使用该参数调用实例方法，因为类是无法调用实例方法的</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> com2 <span class="token operator">=</span> <span class="token class-name">String</span> <span class="token operator">::</span> <span class="token function">compareTo</span><span class="token punctuation">;</span><span class="token comment">//构造器引用与方法引用类似</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> sup1 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><p>Stream API把真正的函数式编程风格引入到java中。使用Stream API可以对集合数据进行操作，可以执行非常复杂的查找、过滤和映射数据等操作，这操作类似SQL执行的数据库查询。</p><p>现在数据库源有MongDB，Redis等，而这些NoSQL的数据就需要java层面去处理。</p><p><strong>Stream和Collection集合的区别：Collection是一种静态的内存数据结构，而Stream是有关计算的。前者主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU实现计算。</strong></p><p><strong>Stream自身不存储元素。Stream不会改变源对象，相反，他们会返回一个持有结果的新Stream。</strong></p><p><strong>Stream操作是延迟执行的，只有在执行终止操作，才执行中间操作链，并产生结果。执行终止操作后流不能再复用，若想继续操作需要重新创建新的Stream。</strong></p><p>Optional<t>类是一个容器类，可以保存类型T的值，代表这个值存在，或者仅仅保存null，表示这个值不存在。是java8中用于解决空指针异常引入的类。</t></p><h2 id="创建Stream流"><a href="#创建Stream流" class="headerlink" title="创建Stream流"></a>创建Stream流</h2><ul><li>集合可以通过stream()方法返回一个顺序流，通过parallelStream()方法返回一个并行流。</li><li>数组可以通过stream()方法返回一个流。</li><li>通过Stream的of()方法，在方法内填入多个参数形成容器。</li><li>使用iterate()迭代方法和generate()生成方法创建无限流，主要用于生成数据。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个集合</span><span class="token comment">//default Stream&lt;E&gt; stream():返回一个顺序流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填入参数形成容器</span><span class="token comment">//迭代方法，初始值为0，每次迭代加2，limit()限制输出个数，并在forEach()中指定输出位置</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>t <span class="token operator">-&gt;</span> t<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成10个随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>fliter(Predicate p)</td><td>接收Lambda，从流中排除某些元素</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的hashCode()和equals()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个忽略前n个元素的流。若流中元素不足n个，则返回一个空流。</td></tr></tbody></table><h3 id="映射与排序"><a href="#映射与排序" class="headerlink" title="映射与排序"></a>映射与排序</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>map(Function f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个DoubleStream。</td></tr><tr><td>mapToint(TointFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个IntStream。</td></tr><tr><td>mapToLong(ToLongFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个LongStream。</td></tr><tr><td>flatMap(Function f)</td><td>接收一个函数作为参数，将流中的每个值都转换成一个流，然后把所有流连接成一个流。例如将字符串数组的每个元素拆成字符，再组合成一个字符数组。</td></tr><tr><td>sorted(Comparator com)</td><td>产生一个新流，如果没有传入比较器，则按自然顺序排序，否则按照比较器顺序排序。</td></tr></tbody></table><h3 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h3><p>map和reduce的连接通常被称为map-reduce模式，因Google用它来进行网络搜索而出名。</p><p>Collect接口中方法的实现决定了如果对流执行收集的操作，如收集到List，Set和Map。另外Collects实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td>findFirst()</td><td>返回第一个元素</td></tr><tr><td>findAny()</td><td>返回当前流中所有元素</td></tr><tr><td>count()</td><td>返回流中元素的总个数</td></tr><tr><td>max(Comparator c)</td><td>返回流中元素的最大值</td></tr><tr><td>min(Comparator c)</td><td>返回流中的最小值</td></tr><tr><td>forEach(Consumer c)</td><td>内部迭代</td></tr><tr><td>reduce(T iden,BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回T。</td></tr><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回Optional<t></t></td></tr><tr><td>collect(Collector c)</td><td>将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java基础 </tag>
            
            <tag> java学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平 零基础30天学会Java</title>
      <link href="/2022/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/"/>
      <url>/2022/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=9&amp;spm_id_from=pageDriver">韩顺平 零基础30天学会Java</a></p><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><p>了解了该视频课程的大纲和Java的基本知识，Java1995年推出，目前稳定维护的有Java8和Java11版本。</p><p>JVM（Java虚拟机）：JVM包含于JDK中，Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</p><p>JRE（Java运行环境）：JRE=JVM+Java的核心类库。</p><p>JDK（Java开发工具包）：JDK=JRE+Java的开发工具</p><p>在桌面图标里勾选此电脑就可以在桌面显示此电脑了</p><p>dos命令行快捷键：win+r</p><p>在对应文件夹上地址上输入cmd可以直接在该目录下打开命令行</p><p>在控制台，输入tab键，可以实现命令补全</p><p><strong>本机Java8的JDK安装位置：C:\Program Files\Java\jdk1.8.0_211\bin</strong></p><p><strong>代码存放位置：E:\java韩顺平\练习代码</strong></p><p>环境变量path的设置，增加JAVA_HOME环境变量，指向JDK的安装目录，编辑path环境变量，增加%JAVA_HOME%\bin</p><p>如果程序中含有中文的时候，使用命令行编译的时候，需要将sublime中的文件-&gt;Set File Encoding to-&gt;GBK，再保存，才能够正确编译成class文件，而GBK是根据cmd设置的编码方式相关</p><p>运行的时候不是输入Hello.java，而是Hello，因为它实际运行的是Hello这个主类。</p><p>一个源文件中最多只能有一个public类，其他类的个数不限。每一个类都就会生成一个对应的class文件。也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法。</p><p>在学习新技术时我们要思考它有什么好处，能应用到什么方面。学习新技术时先关注知识点的基本语法和基本语句，暂时不需要考虑细节，然后完成一个基础项目，最后开始考虑研究技术的注意事项、使用细节、使用规范、如何优化。</p><p>java对单引号和双引号敏感，输出时是使用双引号的。</p><p>找不到文件，可能是文件名写错了，也可能没有在当前目录下。<br>最不好修改的是编译没有问题，但是业务逻辑错误，还有环境错误。</p><p><strong>变量有三个基本要素：类型+名称+值</strong></p><p>程序中的加号，当左右两边一方为字符串，则做拼接运算，运算顺序从左到右。</p><h2 id="java转义字符"><a href="#java转义字符" class="headerlink" title="java转义字符"></a>java转义字符</h2><p>换行与回车的区别，回车后会直接到当前行的首位，而不是换下一行，而且会用当前字符覆盖掉之前的字符</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>\t</td><td>一个制表位，实现对齐功能</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>"</td><td>一个”</td></tr><tr><td>'</td><td>一个’</td></tr><tr><td>\r</td><td>一个回车</td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>多行注释内不允许内嵌多行注释，因为第一开始与第二个的结束符号匹配，导致第一的结束符号报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//单行注释</span><span class="token comment">/*多行注释  多行注释*/</span>  <span class="token comment">//文档注释</span>java文件中<span class="token comment">/*** @author 西芹* @version 1.0*/</span>cmd中：表示将结果存放在存放<span class="token class-name">D</span>盘的temp文件下，关键字根据上面的注释写，最后写文件名<span class="token class-name">E</span><span class="token operator">:</span>\java韩顺平\练习代码<span class="token operator">&gt;</span>javadoc <span class="token operator">-</span>d d<span class="token operator">:</span>\\temp <span class="token operator">-</span>author <span class="token operator">-</span>version <span class="token class-name">Comment02</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li>类、方法的注释，要以javadoc的方式来写。</li><li>非Javadoc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题。</li><li>源代码使用utf-8编码。</li><li>行宽度不要超过80字符。</li><li>代码编写有次行风格和行尾风格，推荐行尾风格。</li></ul><h2 id="dos命令"><a href="#dos命令" class="headerlink" title="dos命令"></a>dos命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dir</td><td>查看当前目录有什么</td></tr><tr><td>cd</td><td>切换到其他文件夹，切换到其他盘，需要加上/D。例如E:\java韩顺平\练习代码&gt;cd /D c:</td></tr><tr><td>md</td><td>新建文件夹</td></tr><tr><td>rd</td><td>删除文件夹</td></tr><tr><td>..</td><td>到上级目录</td></tr><tr><td>help</td><td>查看命令的详细信息</td></tr><tr><td>cd</td><td>直接切换到根目录</td></tr><tr><td>tree</td><td>查看指定目录下的所有子级目录</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出DOS</td></tr></tbody></table><h1 id="第二章-变量"><a href="#第二章-变量" class="headerlink" title="第二章 变量"></a>第二章 变量</h1><p>java的整型常量（具体值）<strong>默认为int型</strong>，声明long型常量需后加‘l’或’L‘。例如  <code>long num = 50L</code> 。</p><p>浮点数构成：浮点数=符号位+指数位+尾数位。</p><p>java的浮点型常量（具体值）<strong>默认为double型</strong>，声明为float型常量需后加’f’或’F’。例如<code>float num = 1.1F</code> 。</p><p>浮点型常量有两种表现形式：1、十进制数形式 <code>double num = 5.12</code>;2、科学计数法形式 <code>double num = 2.12e2</code> 。</p><p><strong>当我们对运算结果是小数的进行相等判断时，要小心，因为可能会有精度误差，应该是以两个数的差值的绝对值在某个精度范围类判断。</strong>如果是直接查询得到的小数或者赋值是可以正常判断的。</p><p>API（应用程序编程接口）是java提供的基本编程接口（java提供的类还有相关的方法）。<a href="https://www.matools.com/">中文在线文档</a></p><p>字符类型可以直接存放一个数字，因为在java中char的本质是一个整数，例如 <code>char c4 = 97</code> ，但是会输出数字对应的Unicode字符。</p><p>字符常量需要使用单引号括起来，例如 <code>char c1 = 'a'</code> ,双引号代表字符串。java中还运行使用转义字符’'将字符转变为特殊字符串常量，例如 <code>char c3 = '\n'</code> 。char类型是可以进行运算的，相当于一个整数，因为它都有对应的Unicode码。</p><p><strong>布尔类型不可以使用0或非0的整数代替false和true，这点和C语言不同。</strong></p><p>当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。<strong>有多种类型的数据混合运算时，系统首先将所有数据转换成容量最大的数据类型，然后再进行计算。</strong></p><p>char-&gt;int-&gt;long-&gt;float-&gt;double;byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double。</p><p><strong>（byte,short）和char不会自动转换，但是它们三者之间是可以进行运算的，在计算时首先转换为int类型，包括自身的运算，例如byte和byte运算结果也是int。</strong></p><p>boolean类型不参与自动转换。</p><p>强制类型转换使用时用加上强制转换符()，例如 <code>int i = (int)1.9</code> 。可能造成精度丢失，需要格外注意。强制转换符号只对最近的操作数有效，往往会使用小括号提升优先级，例如 <code>int x = (int)(10 * 3.5 + 6 * 1.9)</code>。</p><p>基本数据类型转String，使用加号和双引号即可,例如 <code>String s1 = n1 + ""</code> 。String转基本数据类型，使用基本数据类型的包装类调用方法parseXX方法即可，例如 <code>int num = Integer.parseInt(s5)</code> ，但是一定要确保能够转换成有效的数据。从String中取字符，指定需要获取的第几个元素， <code>char c1 = s.charAt(0)</code> 。</p><h2 id="java数据类型"><a href="#java数据类型" class="headerlink" title="java数据类型"></a>java数据类型</h2><p>基本数据类型：1、数值型：整数类型：byte[1]、short[2]、int[4]、long[8]；浮点类型：float[4]、double[8]。2、字符型char[2]。3、布尔型boolean[1]。</p><p>引用数据类型：类(class)、接口(inferface)、数组([])。</p><h2 id="字符编码表"><a href="#字符编码表" class="headerlink" title="字符编码表"></a>字符编码表</h2><table><thead><tr><th>编码表</th><th>简介</th></tr></thead><tbody><tr><td>ASCII</td><td>一个字节表示一个字符，一共有128个字符，上限为256个字符</td></tr><tr><td>Unicode</td><td>使用两个字节表示字符，汉字和字母统一占用2个字节</td></tr><tr><td>UTF-8</td><td>大小可变的 编码表，字母使用1个字节，汉字使用3个字节，可以使用1-6个字符表示一个符号</td></tr><tr><td>gbk</td><td>字母使用1个字节，汉字使用2个字节</td></tr><tr><td>big5码</td><td>存储繁体中文</td></tr></tbody></table><h1 id="第三章-运算符"><a href="#第三章-运算符" class="headerlink" title="第三章 运算符"></a>第三章 运算符</h1><p>java取余的本质，公式 <code>a % b = a - a / b *b</code> ，当a为小数时，公式转变为 <code>a % b = a - (int) a / b * b</code>。</p><p><code>&amp;和|是逻辑运算符，&amp;&amp;和||是短路运算符</code> 。</p><p><code>x=flase</code> 的返回结果是flase，同理 <code>x=true</code> 的返回结果是true。</p><p>有小数参与运算，得到结果是近似值。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>正号；数字相加；字符串相加</td></tr><tr><td>-</td><td>负号；数字相减；</td></tr><tr><td>*</td><td>数字相乘</td></tr><tr><td>/</td><td>数字相除</td></tr><tr><td>%</td><td>取模（取余）</td></tr><tr><td>++</td><td>先运算后取值；先取值后运算</td></tr><tr><td>–</td><td>先运算后取值；先取值再运算</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//算术运算符例题</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为1，因为规则使用临时变量,(1)temp=i;(2)i=i+1;(3)i=temp。所以结果为1。</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为2，因为规则使用临时变量,(1)i=i+1;(2)temp=i;(3)i=temp.所以结果为2。</span><span class="token comment">//复合运算符进行逻辑转换</span><span class="token keyword">byte</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>b<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//等价于b=(byte)(b+2)</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//等价于b=(byte)(b+1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>有26个字母，0-9，_和$组成。</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>java中严格区分大小写，长度无限制。</li></ul><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><ul><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc，例如：<code>com.hsp.crm</code>  。</li><li>类名、接口名：多单词组成时，所有单词的首字母大写（大驼峰）：XxxYyyZzz，例如： <code>TankShotGame</code> 。</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写（小驼峰）：xxxYyyZzz，例如：<code>tankShotGame</code> 。</li><li>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ，例如：<code>TAX_RATE</code> 。</li></ul><h2 id="接收键盘输入"><a href="#接收键盘输入" class="headerlink" title="接收键盘输入"></a>接收键盘输入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//导入对应的包</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">//创建Scanner对象</span><span class="token class-name">Scanner</span> myscanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法，接收用户输入</span><span class="token class-name">String</span> name <span class="token operator">=</span> myscanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><table><thead><tr><th>进制</th><th>表示方式</th></tr></thead><tbody><tr><td>二进制</td><td>以0b或0B开头</td></tr><tr><td>十进制</td><td>正常形式</td></tr><tr><td>八进制</td><td>以数字0开头</td></tr><tr><td>十六进制</td><td>以0x或0X开头，0-9及A(10)-F(15)，此处的A-F不区分大小写</td></tr></tbody></table><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><table><thead><tr><th>符号</th><th>效果</th></tr></thead><tbody><tr><td>~</td><td>取反</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&gt;&gt;</td><td>算术右移，低位溢出，符号位不变，用符号位补溢出的高位</td></tr><tr><td>&lt;&lt;</td><td>算术左移，符号位不变，低位补0</td></tr><tr><td>&gt;&gt;&gt;</td><td>逻辑右移，也称为无符号右移。运算规则是低位溢出，高位补0</td></tr></tbody></table><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><ul><li>二进制的最高位是符号位：0代表正数，1代表负数。</li><li>正数的原码、反码、补码都一样。</li><li>负数的反码=原码符号位不变，其他位取反。</li><li>负数的补码=反码+1，负数的反码=补码+1。</li><li>0的反码，补码都是0。</li><li>java没有无符号数，java中的数都是有符号的。</li><li><strong>在计算机运行的时候，都是以补码的方式来运算的</strong>。</li><li><strong>当我们看运算结果的时候，要看他的原码。</strong></li></ul><h2 id="位运算解析"><a href="#位运算解析" class="headerlink" title="位运算解析"></a>位运算解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、先得到-2的原码，由于默认为int型，4个字节，32位，原码为10000000 00000000 00000000 00000010</span><span class="token comment">//2、-2的反码：11111111 11111111 11111111 11111101</span><span class="token comment">//3、-2的补码：11111111 11111111 11111111 11111110</span><span class="token comment">//4、取反操作：00000000 00000000 00000000 00000001,运算后的补码</span><span class="token comment">//5、运算后的原码就是00000000 00000000 00000000 00000001=&gt;1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为1</span><span class="token comment">//1、得到2的补码：00000000 00000000 00000000 00000010</span><span class="token comment">//~2操作:11111111 11111111 11111111 11111101，这是运算后的补码</span><span class="token comment">//3、运算后的反码:11111111 11111111 11111111 11111100</span><span class="token comment">//4、运算后的原码:10000000 00000000 00000000 00000011=&gt;-3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章-控制结构"><a href="#第四章-控制结构" class="headerlink" title="第四章 控制结构"></a>第四章 控制结构</h1><p>三大流程控制语句：顺序控制、分支控制、循环控制。</p><p>在java中，只要有值返回，就是一个表达式。</p><p><strong>break语句出现在多层嵌套的语句块中，可以通过标签指明要终止的是哪一层语句块。</strong></p><p><strong>字符串比较是否相同：<code>"林黛玉".equals(name)</code> 。尽量把具体对象写在前面以避免空指针。</strong></p><p>continue语句用于结束本次循环，继续执行下一次循环。在多层嵌套的循环语句体中，可以通过标签指定要跳过哪一层循环，这个和前面的break语句类似。</p><p>当return用在方法时，表示跳出方法，如果用在main，表示退出程序。</p><h2 id="Switch注意事项"><a href="#Switch注意事项" class="headerlink" title="Switch注意事项"></a>Switch注意事项</h2><ul><li>表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型。</li><li>Switch表达式中的返回值必须是：byte,short,int,char,enum,String。</li><li>case子句中的值必须是常量或常量表达式，而不能是变量。</li><li>default子句是可选的，当没有匹配的case时，执行default。</li><li>Switch穿透：case中没有break语句，运行结束后直接执行下一个case的语句，不会进行判断。</li></ul><h2 id="for使用细节"><a href="#for使用细节" class="headerlink" title="for使用细节"></a>for使用细节</h2><ul><li>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略。</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。</li></ul><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><ul><li>化繁为简：将复杂的需求，拆解成简单的需求，逐步完成。</li><li>先死后活：先考虑固定的值，然后转成灵活变化的值。</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ol><li>label1是标签，名字由程序员指定。</li><li>break后指定到哪个标签就退出到哪里。</li><li>在实际的开发中，尽量不使用标签。因为会导致可读性变差。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标签的例子</span>label1<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//外层for循环</span>label2<span class="token operator">:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">break</span> label1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章-数组"><a href="#第五章-数组" class="headerlink" title="第五章 数组"></a>第五章 数组</h1><p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。</p><p>二维数组指向多个一维数组，一维数组再指向具体的值。</p><p><strong>二维数组允许每列的元素个数不相同。</strong></p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//新建数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hens <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8.8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//先声明，再分配</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//也可以使用int[] a;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//此时才真正赋予存储空间</span><span class="token comment">//获取数组长度</span>len <span class="token operator">=</span> hens<span class="token punctuation">.</span>length<span class="token comment">//二维数组的新建与一维的类似</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//动态初始化,列数不等</span><span class="token comment">//创建二维数组，有3个一维数组，但是每个一维数组没有开空间</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//给每个一维数组开空间</span><span class="token punctuation">}</span><span class="token comment">//获取行数和列数</span>row <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>col <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//练习题</span><span class="token class-name">String</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">}</span><span class="token comment">//正确</span><span class="token class-name">String</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">}</span><span class="token comment">//错误，不可以指定数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组细节"><a href="#数组细节" class="headerlink" title="数组细节"></a>数组细节</h2><ol><li>数组创建后，如果没有赋值，有默认值。int、short、byte、long的默认值为0；float和double的默认值为0.0；char的默认值为\u0000；Boolean为false；String为null。</li><li>数组中的元素可以是任何数据类型。包括基本数据类型和引用类型，但是不能混用。</li><li>数组下标从0开始。</li><li>数组属引用类型，数组型数据是对象。</li></ol><h2 id="赋值方式"><a href="#赋值方式" class="headerlink" title="赋值方式"></a>赋值方式</h2><ol><li>基本数据类型赋值，赋值方式为值拷贝。</li><li>数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递。</li><li><strong>数组在栈中存储一个指向堆的地址，堆中存储实际的值，数组赋值时，实际上是将栈中的地址进行传递，这也是为什么将数组成为引用类型。</strong></li></ol><h2 id="二维数组内存示意图"><a href="#二维数组内存示意图" class="headerlink" title="二维数组内存示意图"></a>二维数组内存示意图</h2><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/97b2904d6220cca5a9e0944106126e87.jpg" alt="未命名文件.jpg" style="zoom:50%;"><h1 id="第六章-面向对象-基础"><a href="#第六章-面向对象-基础" class="headerlink" title="第六章 面向对象(基础)"></a>第六章 面向对象(基础)</h1><p>属性如果不赋值，有默认值，与数组相同。</p><p>由于对象也是引用类型，所以赋值也是引用传递。</p><p><strong>方法不能嵌套定义。</strong></p><p>方法重载：java中允许同一个类中，多个重名方法的存在，但要求形参列表不一致。</p><p>可变参数：java允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</p><p><strong>全局变量（属性）可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。我们说的局部变量一般是指在成员方法中定义的变量。</strong></p><p>属性可以加修饰符，局部变量不可以加修饰符。</p><p>可以使用hashCode()函数内存地址转换成的整数。例如 <code>this.hashCode()</code> 。</p><p>使用Double包装类返回值，就可以返回null来提示错误信息。</p><h2 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明类</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token class-name">String</span> color<span class="token punctuation">;</span>  <span class="token comment">//新建方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span><span class="token string">"接收的信息："</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//实例化，创建对象</span><span class="token comment">//cat1是对象名(对象引用),new Cat()创建的对象空间(数据)才是真正的对象。</span><span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小白"</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将cat1指针置空</span>cat1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类与对象的区别"><a href="#类与对象的区别" class="headerlink" title="类与对象的区别"></a>类与对象的区别</h2><ol><li>类是抽象的，概念的，代表一类事物，即它是数据类型。</li><li>对象是具体的，实际的，代表一个具体事物，即是实例。</li><li>类是对象的模板，对象是类的一个实体，对应一个实例。</li></ol><h2 id="对象内存示意图"><a href="#对象内存示意图" class="headerlink" title="对象内存示意图"></a>对象内存示意图</h2><p>基本数据类型存储于堆中，引用类型存储于方法区中的常量池。</p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/5f4a10b99b9515c31caf316ec5e16bae.jpg" alt="类与对象.jpg" style="zoom:50%;"><h2 id="java内存的结构分析"><a href="#java内存的结构分析" class="headerlink" title="java内存的结构分析"></a>java内存的结构分析</h2><ol><li>栈：一般存放基本数据类型（局部变量）。</li><li>堆：存放对象（Cat cat，数组等）。</li><li>方法区：常量池（常量，比如字符串），类加载信息。</li></ol><h2 id="java创建对象流程"><a href="#java创建对象流程" class="headerlink" title="java创建对象流程"></a>java创建对象流程</h2><ol><li>先加载类信息（属性和方法信息，每个类只加载一次）。</li><li>在堆中分配空间，进行默认初始化。</li><li>把堆中地址赋给栈中的对象名，使得对象名指向对象。</li><li>进行指定初始化。</li></ol><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ol><li>当程序执行到方法时，就会开辟一个独立的空间（栈空间）。</li><li>当方法执行完毕，或者执行到return语句时，就会返回到调用方法的地方。</li><li>返回后，继续执行方法后面的代码。</li><li>当main方法(栈)执行完毕，整个程序退出。</li></ol><h2 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h2><ol><li>一个方法最多一个返回值，使用数组可以传递多个结果。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">returnarr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>返回类型可以为任意类型，包含基本数据类型或引用类型。</li><li>如果方法要求有返回类型，则方法体中最后的执行语句必须为return值，而且要求返回值类型必须和return的值类型一致或兼容。</li><li>如果方法返回类型为void，则方法体中可以没有return或只写return。</li></ol><h2 id="成员方法传参机制"><a href="#成员方法传参机制" class="headerlink" title="成员方法传参机制"></a>成员方法传参机制</h2><ol><li>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</li><li>引用类型传递的是地址（地址也是值），可以通过形参影响实参。对象也是引用类型。</li></ol><h2 id="递归使用规则"><a href="#递归使用规则" class="headerlink" title="递归使用规则"></a>递归使用规则</h2><ol><li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。</li><li>方法的局部变量是独立的，不会相互影响。</li><li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用类型的数据。</li><li>当方法执行完毕，或者遇到return，就返回，遵守谁调用，就把结果返回给谁，同时方法执行完毕或者返回时，该方法执行完毕。</li></ol><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ol><li>方法名：必须相同</li><li>形参列表：必须不同，形参类型或个数或顺序，至少有一个不同，参数名无要求</li><li>返回类型：无要求</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可变函数声明</span><span class="token keyword">class</span> <span class="token class-name">HspMethod</span><span class="token punctuation">{</span>  <span class="token comment">//计算多个数的和</span>  <span class="token comment">//int...表示接受的是可变参数，类型是int，使用可变参数时，可以当作数组来使用</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变参数细节"><a href="#可变参数细节" class="headerlink" title="可变参数细节"></a>可变参数细节</h3><ol><li>可变参数的实参可为0到任意多个。</li><li>可变参数的实参可以是数组。</li><li><strong>可变参数的本质就是数组。</strong></li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数放在最后。</li><li>一个形参列表只能出现一个可变参数。</li></ol><h2 id="构造器-构造方法"><a href="#构造器-构造方法" class="headerlink" title="构造器/构造方法"></a>构造器/构造方法</h2><ol><li>主要作用是完成对新对象的初始化，并不是创建对象</li><li><strong>构造器没有返回值，也不能写void</strong></li><li>方法名和类名要一致</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用由系统完成，不能自行调用</li><li>构造器也允许重载</li><li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器，可以使用javap指令反编译查看。例如 <code>javap Dog.class</code> 。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//构造器/构造方法声明</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使用this指定当前对象，即当前调用构造器的对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this使用细节"><a href="#this使用细节" class="headerlink" title="this使用细节"></a>this使用细节</h2><ol><li>this关键字可以用来访问本类的属性、方法、构造器</li><li>this用于区分当前类的属性和局部变量<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span>  <span class="token comment">//传统方式，输出局部变量smith</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this方式，输出类属性jack</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>访问成员方法的语法：this.方法名(参数列表)</li><li>访问构造器语法：this(参数列表)；<strong>注意只能在构造器中调用本类的另一个构造器，而且必须放置于第一条语句，因此只能用一个</strong></li><li>this不能在类定义的外部使用，只能在类定义的方法中使用。</li></ol><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count1="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count2="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//Test类的main方法，任何一个类，都可以有自己的main方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//new Test()是匿名对象，只使用一次，因为没有对象名，使用后被销毁</span>    <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10</span>    <span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出9</span>    t1<span class="token punctuation">.</span><span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第七章-面向对象-中级"><a href="#第七章-面向对象-中级" class="headerlink" title="第七章 面向对象(中级)"></a>第七章 面向对象(中级)</h1><p>idea编译后的文件会存放在out文件夹下，src文件夹存放源码文件。</p><p>文件-&gt;设置-&gt;编辑器-&gt;代码模板：可以查看模板或者编辑模板。遇到一个问题是我没有java的模板。可以使用代码模板加快速度，例如使用 <code>sout</code> 加缩进自动补全为打印。</p><p>package关键字，声明当前类所在的包，需要放在类的最上面。</p><p><strong>包的本质实际上就是创建不同的文件夹来保存类文件。</strong></p><p>当类重名的时候，默认使用引入的类，或者通过指定包名来指出使用的类。</p><p><strong>包的命名只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字。</strong></p><p>继承声明：<code>class 子类 extends 父类</code> 。</p><p>方法重写(覆盖)：子类的方法和父类的方法的名称、返回类型和参数都一样，那么子类的该方法覆盖父类的对应方法。</p><p>多态是指方法和对象具有多种形态，可以提高代码的复用性，利于代码维护。</p><p>instanceof比较操作符，用于判断对象的运行类型是否为某类型或某类型的子类型。例子：<code>cat instanceof Animal</code> 。</p><p><strong>多态的方法首先看运行类型，属性首先看编译类型。</strong></p><p>多态数组：数组的定义类型为父类类型，里面保存的实际元素为子类类型。</p><p>toString方法默认返回类的全类名(包名+类名)+@+十六进制哈希值(由hashCode获取)。当直接输出一个对象时，toString方法会被默认调用。</p><p>当某个对象没有任何引用时，则JVM就认为这个对象是一个垃圾对象，会使用垃圾回收机制销毁该对象，在销毁该对象前，会先调用finalize方法。垃圾回收并不是即时的，有自己的一套算法，使用System.gc()主动调用。</p><p><strong>在断点调试过程中是运行状态，是以对象的运行类型来执行的。</strong></p><p>设置步进至源码：文件-&gt;构建，执行，部署-&gt;调试器-&gt;步进-&gt;取消勾选 <code>java.*</code> 和 <code>javax*</code> 。</p><p>建议一段代码完成一个小功能，尽量不要混在一起。</p><p>数据校验时，可以采用找出不正确的金额条件，然后给出提示，就直接break。</p><h2 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+d</td><td>删除当前行</td></tr><tr><td>ctrl+alt+向下箭头</td><td>复制当前行到下一行</td></tr><tr><td>alt+/</td><td>代码补全</td></tr><tr><td>ctrl+/</td><td>第一次添加注释，第二次取消注释</td></tr><tr><td>alt+enter</td><td>自动导入光标对应的class</td></tr><tr><td>ctrl+alt+L</td><td>自动格式化代码</td></tr><tr><td>alt+r</td><td>运行代码</td></tr><tr><td>alt+insert</td><td>新建构造器，get和set方法等</td></tr><tr><td>ctrl+h</td><td>查看类的继承关系</td></tr><tr><td>ctrl+b</td><td>快速定位到光标所在的方法</td></tr><tr><td>声明类时在后面加上var,点击enter</td><td>自动分配变量名</td></tr><tr><td>F7</td><td>断点调试跳入方法内</td></tr><tr><td>F8</td><td>逐行执行代码</td></tr><tr><td>F9</td><td>继续，执行到下一个断点</td></tr><tr><td>shift+F8</td><td>跳出方法</td></tr></tbody></table><h2 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h2><ol><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ol><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>java提供四种访问修饰符，用于控制方法和属性的访问权限，也可以修饰类，但只能使用public和默认修饰符。</p><table><thead><tr><th>访问修饰符</th><th>访问级别</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>公开</td><td>可以</td><td>可以</td><td>可以</td><td>可以</td></tr><tr><td>protested</td><td>受保护</td><td>可以</td><td>可以</td><td>可以</td><td></td></tr><tr><td>没有修饰符</td><td>默认</td><td>可以</td><td>可以</td><td></td><td></td></tr><tr><td>private</td><td>私有</td><td>可以</td><td></td><td></td><td></td></tr></tbody></table><h2 id="封装的实现步骤"><a href="#封装的实现步骤" class="headerlink" title="封装的实现步骤"></a>封装的实现步骤</h2><ol><li>将属性进行私有化private，使用户不能直接修改属性。</li><li>提供一个公共的set方法，用于对属性进行判断并赋值。</li><li>提供一个公共的get方法，用于获取属性的值。</li></ol><h2 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h2><ol><li>子类继承父类的所有属性和方法，非私有的属性可以直接访问，私有的需要通过父类的公共方法使用。</li><li>java所有类都是Object类的子类，Object类是所有类的父类。</li><li>子类必须调用父类的构造器，完成父类的初始化。父类构造器的调用不限于直接父类，将一直往上追溯到Object类。</li><li>如果希望指定去调用父类的某个构造器，则显式3的调用一下：super(参数列表)。super只能在构造器中使用，且必须放在构造器第一行。</li><li>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器中，使用了this()方法，就不会默认调用super()方法。</li><li>子类最多只能继承一个父类(指直接继承)，那么如何继承多个？让父类去继承。</li><li>子类往上寻找属性时，遇到一个私有属性不能访问，不会跳过再往上查找，而是直接报错。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//继承题目解析</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//由于有this()方法，所以没有默认调用super()方法</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自身的构造方法</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//默认调用了super();</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//B b = new B()的输出结果为a,b name,b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h2><ol><li>子类的方法的参数、方法名称要和父类方法的参数，方法名称完全相同。</li><li>子类方法的返回类型和父类方法的返回类型一样，或者是父类返回类型的子类，比如父类方法的返回类型是object，子类方法的返回类型是String。</li><li>子类方法不能缩小父类的方法权限。</li></ol><h2 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h2><ol><li>一个对象的编译类型和运行类型可以不一致。</li><li>编译类型在定义对象时，就确定了，不能改变。</li><li>运行类型是可以变化的。</li><li>编译类型看定义时等号的左边，运行类型看等号的右边。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//animal编译类型是Animal，运行类型是Dog，相当于披着Animal皮的Dog</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为animal运行类型是Dog，使用执行Dog的cry方法，而不是Animal的cry方法</span>animal<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//animal的运行类型变成了Cat，编译类型仍然是Animal</span>animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li>多态的前提是两个对象(类)存在继承关系</li><li>多态的向上转型的本质是父类的引用指向子类的对象</li><li>多态的向上转型的特点是可以调用父类中的所有成员(需遵守访问权限)，不能调用子类的特有成员，因为在编译阶段，能调用哪些成员是由编译类型决定的，最终运行效果看子类的具体实现。</li><li><strong>编译阶段只看编译类型，运行时只看具体的运行类型。</strong></li></ol><h3 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h3><ol><li>语法：子类类型 引用名 = （子类类型）父类引用</li><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向当前目标类型的对象</li><li>当向下转型后，可以调用子类类型中的所有成员</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进行向下转型，此时cat的编译类型为Cat，运行类型也是Cat</span><span class="token comment">//向下转型要求animal原来的引用指向的是Cat(第3个特点)</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时可以调用Cat的特有方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态的属性"><a href="#多态的属性" class="headerlink" title="多态的属性"></a>多态的属性</h3><p>属性没有重写，属性的值看编译类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token comment">//父类</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token comment">//子类</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Base</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//base的编译类型的Base,输出值为编译类型的10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><ol><li>当调用对象方法时，该方法会和该对象的内存地址/运行类型绑定。</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//由于B类没有sum()，于是往上找，父类A有，执行A的sum()</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">//getI()在B类有，执行B的getI()，将B类中的i返回</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为30，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="和equals的对比"><a href="#和equals的对比" class="headerlink" title="==和equals的对比"></a>==和equals的对比</h2><ol><li>==是一个比较运算符，它既可以判断基本数据类型，也可以判断引用类型。判断基本数据类型是判断值是否相等；判断引用类型则是判断地址是否相等，即判断是否为同一个对象。</li><li>equals方法是Object类中的方法，只能判断引用类型。默认判断地址是否相同，子类中往往重写该方法，用于判断内容是否相等。</li></ol><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值一定一样；如果指向不同对象，则哈希值通常不一样</li><li>哈希值主要是根据地址号，但不能完全将哈希值等价于地址</li></ol><h1 id="第八章-面向对象-高级"><a href="#第八章-面向对象-高级" class="headerlink" title="第八章 面向对象(高级)"></a>第八章 面向对象(高级)</h1><p>类的单例(单个实例)模式：采用一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。</p><p>当父类的某些方法需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类。</p><p>接口就是给出一些没有实现的方法，封装在一起，到某个类要使用的时候，再根据具体情况将这些方法写出来，一种高层次的抽象。</p><h2 id="类-静态-变量"><a href="#类-静态-变量" class="headerlink" title="类(静态)变量"></a>类(静态)变量</h2><ol><li>类变量(静态变量)会被该类的所有对象实例共享，而且在类加载的时候就生成了。例子：<code>public static int count;</code> 。</li><li>类变量是随着类的加载而创建的，所以即使没有创建对象实例也可以访问。</li><li>类变量存放位置会由于JDK版本不同而产生差异。</li><li>类变量可以通过类名.类变量名或者对象名.类变量名来访问，但是java设计者推荐使用类名.类变量名方式访问。</li><li>类变量的生命周期是随着类的加载开始，随着类的消亡而销毁。</li></ol><h2 id="类-静态-方法"><a href="#类-静态-方法" class="headerlink" title="类(静态)方法"></a>类(静态)方法</h2><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区。</li><li>类方法不允许使用和对象有关的关键字，比如this和super。</li><li>当方法中不涉及任何和对象相关的成员时，则可以将该方法设计成静态方法，提高开发效率。</li><li>当方法使用了static修饰符后，该方法就是静态方法，静态方法只能访问静态属性/变量和静态方法。普通方法既可以访问非静态成员，也可以访问静态成员。</li><li>类变量可以通过类名.类方法名或者对象名.类方法名来访问，但是java设计者推荐使用类名.类方法名方式访问。</li></ol><h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><ol><li>main方法是由Java虚拟机调用的，处于不同的类，所以该方法的访问权限必须是public。</li><li>java虚拟机在执行main方法时不需要创建对象，所以该方法的必须是static。所以main方法本质上也是静态方法，遵守静态方法的规则。</li><li>main方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数。String数组是由命令行运行时传入的。idea中可以点击编辑配置-&gt;程序参数中填写。</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ol><li>代码块又称为初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是在加载类时或创建对象时隐式调用。</li><li>修饰符可不写或写static，使用static的为静态代码块，作用就是对类进行初始化，而且随着类的加载而执行，并且只会执行一次；否则为普通代码块，每创建一个对象就执行一次，如果只是使用类的静态成员，普通代码块并不会执行。静态代码块只能调用静态成员。</li><li>相当于另外一种形式的构造器(对构造器的补充机制)，可以做初始化的操作。如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性。</li><li>代码块的执行顺序优先于构造器。构造器的最前面其实隐含了super方法和调用普通代码块。</li></ol><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><ol><li>创建对象实例时(new)</li><li>创建子类对象实例，父类也会被加载</li><li>使用类的静态成员时</li></ol><h2 id="创建对象的顺序"><a href="#创建对象的顺序" class="headerlink" title="创建对象的顺序"></a>创建对象的顺序</h2><ol><li>调用静态代码块和静态属性初始化，两者的优先级相同，按照顺序执行。</li><li>调用普通代码块和普通属性的初始化。</li><li>调用构造方法。</li></ol><h2 id="子类创建对象的顺序"><a href="#子类创建对象的顺序" class="headerlink" title="子类创建对象的顺序"></a>子类创建对象的顺序</h2><ol><li><strong>父类</strong>的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li><strong>父类</strong>的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><h2 id="单例模式实现步骤"><a href="#单例模式实现步骤" class="headerlink" title="单例模式实现步骤"></a>单例模式实现步骤</h2><ol><li>构造器私有化，防止用户直接进行创建。</li><li>类的内部创建对象</li><li>向外暴露一个静态的方法：getInstance</li><li>代码实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉式：在没有使用前就提前创建好对象，可以在getInstance方法中判断是否已经创建对象，改造为懒汉式</span><span class="token keyword">class</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//类的内部创建对象,为了能够在静态方法中返回gf对象，需要将其修饰为static</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//构造器私有化</span>  <span class="token keyword">private</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//向外暴露一个静态的方法：getInstance</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> gf<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="final关键字应用"><a href="#final关键字应用" class="headerlink" title="final关键字应用"></a>final关键字应用</h2><ol><li>final可以修饰类、属性、方法和局部变量。</li><li>当不希望类被继承，可以用final修饰。</li><li>当不希望子类的某个方法被子类覆盖/重写时，可以用final关键字修饰。</li><li>当不希望类的某个属性被修改，可以用final修饰。</li><li>当不希望局部变量被修改，可以用final修饰。</li></ol><h3 id="final细节"><a href="#final细节" class="headerlink" title="final细节"></a>final细节</h3><ol><li>final修饰的属性又叫常量，一般用XX_XX_XX来命名</li><li>final修饰的属性在定义时必须赋初值，并且不能再进行修改，且只能在定义时、构造器和代码块中为其赋初值。</li><li>如果该属性是静态的，则只能在定义时和静态代码块中赋初值。不能在构造器中赋初值，因为静态变量在类加载时创建，而构造器要在对象创建时才加载。</li><li>如果一个类已经是final类了，就没有必要在将其方法修饰为final方法。</li><li>final不能修饰构造方法(即构造器)。</li><li>final和static往往搭配使用，效率更高，不会导致类的加载，底层编译器做了优化处理。</li><li>包装类(Integer,Double,Float,Boolean等都是final)，String也是final类。</li><li>可以指定传入的形参为final。</li></ol><h2 id="抽象类细节"><a href="#抽象类细节" class="headerlink" title="抽象类细节"></a>抽象类细节</h2><ol><li>抽象类不能被实例化。</li><li>抽象类不一定要包含abstract方法，还可以有实现的方法。</li><li>当一个类中存在抽象方法时，需要将该类声明为abstract类。</li><li>abstract只能修饰类和方法，不能修饰属性和其他的。</li><li>抽象类可以有任意成员，因为其本质还是一个类，比如：非抽象方法、构造器、静态方法等。</li><li>抽象方法不可以有主体。</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类。所谓实现方法就是有方法体。</li><li>抽象方法不能使用private、final和static来修饰，因为这些关键字都是和重写相违背的。</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li>在JDK7之前，接口中所有方法都没有方法体，都是抽象方法。</li><li>JDK8后接口中可以有静态方法，默认方法，默认方法需要使用default关键字修饰，即接口中可以有方法的具体实现。</li><li>多态传递，A接口继承B接口，C实现A接口，可以有<code>B b = new c();</code>。</li><li>在接口中，抽象方法可以省略abstract关键字。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Myinterface01</span> <span class="token punctuation">{</span>  <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Myinterface01</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口细节"><a href="#接口细节" class="headerlink" title="接口细节"></a>接口细节</h3><ol><li>接口不能被实例化。</li><li>接口中所有的方法都是public方法，接口中抽象方法可以不用abstract修饰。</li><li>一个普通类实现接口，就必须将该接口的所有方法都实现。在IJ代码标黄处，使用alt+enter可以一键实现。</li><li>抽象类实现接口，可以不用实现接口的方法。</li><li>一个类可以同时多个接口。</li><li><strong>接口中的属性，只能是final的，而且是public static final修饰符。</strong></li><li>接口中属性的访问形式：接口名.属性名。</li><li>接口不能继承其他的类，但是可以继承多个别的接口，使用extends关键字继承。</li><li>接口的修饰符只能是public和默认，这点和类的修饰符是一样的。</li></ol><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><ol><li>当子类继承了父类，就自动的拥有了父类的功能，如果子类需要扩展功能，可以通过实现接口的方式拓展。可以理解实现接口是对java单继承方式的补充。</li><li>继承的价值主要在于：解决代码的复用性和可维护性。接口的价值主要在于：设计好各种规范，让其他类去实现这些方法。</li><li>接口比继承更加灵活，继承满足is-a的关系，而接口只需满足like-a的关系。</li><li>接口在一定程度上实现代码解耦。使用接口规范性+动态绑定。</li></ol><h3 id="接口练习"><a href="#接口练习" class="headerlink" title="接口练习"></a>接口练习</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x不明确，访问接口使用A.x，父类使用super().x</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类，嵌套其他类的类称为外部类。</p><p>内部类的最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p><h3 id="内部类的划分"><a href="#内部类的划分" class="headerlink" title="内部类的划分"></a>内部类的划分</h3><p>定义在外部类局部位置上（通常方法内）：</p><ol><li>局部内部类（有类名）</li><li>匿名内部类（无类名，重点）</li></ol><p>定义在外部类的成员位置上：</p><ol><li>成员内部类（不使用static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ol><li>可以直接访问外部类的所有成员，包括私有的。</li><li>除了可以使用final修饰，不能添加访问修饰符。</li><li>内部类可以继续被同一外部类的内部类所继承。</li><li>作用域仅仅在定义它的方法或代码块中。</li><li>外部类在方法中，可以创建内部类对象，然后调用方法即可。</li><li>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类.this.成员）去访问。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outer02 m2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//局部内部类是定义在外部类的局部位置，通常在方法</span>    <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">{</span><span class="token comment">//本质还是一个类</span>      <span class="token comment">//可以直接访问外部类的所有成员，包括私有的</span>      <span class="token keyword">private</span> n1 <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//如果外部类和局部内部类的成员重名时，默认遵循就近原则</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出800</span>        <span class="token comment">//如果想访问外部类的成员，则可以使用（外部类.this.成员）去访问</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的n1="</span> <span class="token operator">+</span> <span class="token class-name">Outer02</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出100</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//外部类在方法中，可以创建内部类对象，然后调用方法即可</span>    <span class="token class-name">Inner02</span> inner02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inner02<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ol><li>匿名内部类没有名字，底层有一个系统命名的名字，同时还是一个对象。</li><li>tiger的编译类型是IA,运行类型就是匿名内部类。</li><li>底层分配的类名为外部类名+$数字，可以使用getClass()查看。</li><li>匿名内部类使用一次，就不能再使用，对象可以反复使用。</li><li>我认为匿名内部类就是为了简便重写只需使用一次的类。</li><li>匿名内部类可以当作实参直接传递，简介高效。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer04</span><span class="token punctuation">{</span><span class="token comment">//外部类</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//基于接口的匿名内部类</span>    <span class="token comment">//以前想使用IA接口，是先写一个类实现该接口，并创建对象，如果只是使用一次，会很麻烦，此时使用匿名内部类</span>    <span class="token comment">//tiger的编译类型是IA,运行类型就是匿名内部类Outer04$1</span>    <span class="token comment">//底层分配的类名为外部类名+$次序，所以这个是Outer04$1，可以使用getClass()查看</span>    <span class="token comment">//jdk底层在创建匿名内部类后，马上就创建了实例，并且把地址返回给tiger。</span>    <span class="token class-name">IA</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是老虎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//由于有对象的性质，也可以直接调用,效果与上面的一样</span>    <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是老虎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//基于类的匿名内部类</span>    <span class="token comment">//father编译类型是Father，运行类型是匿名内部类Outer04$2</span>    <span class="token comment">//参数列表会传递给Father的构造器</span>    <span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部重写了test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//基于抽象类的匿名内部类</span>    <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@override</span>      <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span><span class="token comment">//接口</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token comment">//类</span>  <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造器</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//测试方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ol><li>成员内部类是定义在外部类的成员位置，并且没有static修饰。</li><li>可以添加任意访问修饰符，因为它的地位就是一个成员。</li><li>外部其他类访问成员内部类。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法1，相当于将new Inner()当作是outer的成员</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2，在外部类中编写一个方法，返回对象实例</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ol><li>静态内部类是定义在外部类的成员位置，使用static进行修饰。</li><li>可以访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员。</li><li>外部其他类访问静态内部类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法1,因为静态内部类是可以通过类名直接访问的</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2，在外部类中编写一个方法，返回对象实例</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>重名时访问外部类的成员，可以使用外部类名.成员。</li></ol><h1 id="第九章-枚举和注解"><a href="#第九章-枚举和注解" class="headerlink" title="第九章 枚举和注解"></a>第九章 枚举和注解</h1><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ol><li>当我们使用enum关键字开发一个枚举类时，默认继承Enum类。</li><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略。</li><li>枚举对象必须放在枚举类的行首。</li></ol><h3 id="枚举函数"><a href="#枚举函数" class="headerlink" title="枚举函数"></a>枚举函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>ordinal()</td><td>输出该枚举对象的次序，从0开始编号</td></tr><tr><td>values()</td><td>返回一个数组</td></tr><tr><td>valueof()</td><td>将字符串转换为枚举对象，要求字符串为已有的枚举对象</td></tr><tr><td>compareTo()</td><td>对比两个枚举对象的编号</td></tr></tbody></table><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>  <span class="token comment">//要求将定义常量对象写在最前面</span>  <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"凉爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"炎热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>  <span class="token comment">//下面写构造器和各种方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入到代码中的补充信息。</p><p>override表示重写指定的父类方法（从编译层面验证），如果父类没有该方法，则会报错。</p><p>元注解是修饰注解的注解。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@override</td><td>限定某个方法，是重写父类方法，该注释只能用于方法</td></tr><tr><td>@Deprecated</td><td>用于表示某个程序元素（类，方法，字段，包，参数等）已经过时</td></tr><tr><td>@SuppressWarnings</td><td>抑制编译器警告</td></tr></tbody></table><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><table><thead><tr><th>元注解</th><th>作用</th></tr></thead><tbody><tr><td>Retention</td><td>指定注解的作用范围，有SOURCE、CLASS、RUNTINE</td></tr><tr><td>Target</td><td>指定注解可以在哪些地方使用</td></tr><tr><td>Document</td><td>指定该注解是否会在javadoc体现</td></tr><tr><td>Inherited</td><td>子类会继承父类注解</td></tr></tbody></table><h1 id="第十章-异常"><a href="#第十章-异常" class="headerlink" title="第十章 异常"></a>第十章 异常</h1><p>java语言中，将程序执行中发生的不正常现象称为“异常”，开发中的语法错误和逻辑错误不是异常。</p><p>异常分为两大类，运行时异常和编译时异常。</p><p>编译时异常是必须处理的异常，是我们编写程序时需要避免的情况。</p><p>自定义异常类名继承Exception（编译异常）或RuntimeException（运行异常）。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>IJ中将该代码选中，输入快捷键ctrl+alt+t，选中try-catch可以设置异常处理。</p><p>如果异常发生了，则异常后的代码不再执行，直接进入catch代码块。</p><p>可以有多个catch异常，捕获不同的异常，但要求父类异常在后，子类异常在前，如发生异常，只会匹配一个catch。</p><p>可以使用try-finally，即不对异常进行任何处理。</p><p>子类重写的方法所抛出的异常类型要么额父类抛出的异常一致，要么为父类抛出异常类型的子类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//try-catch-finally异常处理方式</span><span class="token keyword">try</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//捕获不同的异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//程序捕获到异常后，将其封装成一个Exception对象</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>  <span class="token comment">//不管是否捕获到异常，始终执行</span><span class="token punctuation">}</span><span class="token comment">//throws异常处理方式，返回给上一级函数处理，是系统默认的处理方式</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">f5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会被标红，因为f2抛出的是编译异常</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">{</span>  <span class="token comment">//使用throws抛出异常，让调用f2方法的调用者(方法)处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见运行异常"><a href="#常见运行异常" class="headerlink" title="常见运行异常"></a>常见运行异常</h2><table><thead><tr><th>名称</th><th>原因</th></tr></thead><tbody><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>ArithmeticException</td><td>数学运算异常</td></tr><tr><td>ArrayIndexOutOfBoundException</td><td>数组下标越界异常</td></tr><tr><td>ClassCastException</td><td>类型转换异常</td></tr><tr><td>NumberFormatException</td><td>数字格式不正确异常</td></tr></tbody></table><h1 id="第十一章-常用类"><a href="#第十一章-常用类" class="headerlink" title="第十一章 常用类"></a>第十一章 常用类</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>包装类是针对8种基本数据类型对应的引用类型。</p><p>jdk5以后实现了自动装箱和自动拆箱。</p><p>三元运算符是一个整体，取最高精度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//装箱</span><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动装箱</span><span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> n1<span class="token punctuation">;</span><span class="token comment">//自动装箱，底层使用的仍是valueOf方法</span><span class="token comment">//拆箱</span><span class="token keyword">int</span> i <span class="token operator">=</span> integer1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动拆箱</span><span class="token keyword">int</span> i <span class="token operator">=</span> integer2<span class="token punctuation">;</span><span class="token comment">//自动拆箱，底层使用的仍是intValue方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包装类与String转换"><a href="#包装类与String转换" class="headerlink" title="包装类与String转换"></a>包装类与String转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//包装类转String</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//方式一，i本身没变化</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//方式二,使用包装类的toString方法</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String转包装类</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果为1.0，因为三元运算符为一个整体，最高为Double</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出FALSE，i和j此时是对象，对象相等判断地址是否相同</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回True，自动装箱底层是valueOf方法，在范围-128~127正确，这个数组是事先加载好的</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回True，只要有基本数据类型，判断的是值是否相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>String实现了Serializable接口，说明String可以串行化，即可以在网络中传输；Comparable接口表示可以比较。</p><p>字符串的字符使用Unicode编码，一个字符（不区分字母还是汉字）占两个字节。</p><p>String是final类，不能被其他的类继承。</p><p>String有属性value[]用于存放字符串内容，值得注意的是，该属性为final，不可修改地址。</p><h3 id="两种创建方法的区别"><a href="#两种创建方法的区别" class="headerlink" title="两种创建方法的区别"></a>两种创建方法的区别</h3><p><code>Srting s = 'hsp'</code>:先从常量池查看是否有“hsp”数据空间，如果有则直接指向；如果没有则重新创建，然后指向，S最终指向的是<strong>常量池</strong>的空间地址。</p><p><code>String s = new String("hsp")</code>:先在堆中创建空间，里面维护了value属性，指向常量池的hsp空间。如果常量池没有“hsp”，重新创建，有则通过value指向。最终指向的是<strong>堆</strong>中的空间地址。可以使用intern方法返回常量池的地址。</p><p><code>String a = "hello"+"abc";</code>只创建了一个对象，因为编译器会将其优化，先进行拼接。</p><p><code>String s = a + "hello"</code>底层会调用StringBuilder，所以会指向<strong>堆</strong>中的空间地址。</p><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>equals</td><td>区分大小写</td></tr><tr><td>equalsIgnoreCase</td><td>忽略大小写判断内容是否相同</td></tr><tr><td>length</td><td>字符的个数，字符串的长度</td></tr><tr><td>indexOf</td><td>获取字符第一次出现的索引</td></tr><tr><td>lastIndexOf</td><td>获取字符最后一次出现的索引</td></tr><tr><td>substring</td><td>截取指定范围的子串</td></tr><tr><td>trim</td><td>去前后空格</td></tr><tr><td>charAt</td><td>获取某索引出的字符，注意不能使用str[index]方法</td></tr><tr><td>contact</td><td>拼接字符串</td></tr><tr><td>replace</td><td>替换字符串，原字符串不变化，返回的结果才是替换的</td></tr><tr><td>split</td><td>分割字符串</td></tr><tr><td>toCharArray</td><td>转换为字符数组</td></tr><tr><td>compareTo</td><td>比较大小</td></tr><tr><td>format</td><td>格式化字符串</td></tr></tbody></table><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">{</span>  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'j'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'v'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    str <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span><span class="token comment">//String类的更新实际上是更改地址</span>    ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'h'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">Text1</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token operator">+</span><span class="token string">"and"</span><span class="token operator">+</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出hspandhava</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="StringBuffer、StringBuilder类"><a href="#StringBuffer、StringBuilder类" class="headerlink" title="StringBuffer、StringBuilder类"></a>StringBuffer、StringBuilder类</h2><p>StringBuffer是一个容器，代表可变的字符序列，可以对字符串内容进行删减。</p><p>String保存的是字符串常量，里面的值不能更改，每次String类的实际上就是更改地址，效率较低；StringBuffer值存放在堆中，每次更新实际上可以更新内容，不用每次更新地址。</p><p>StringBuilder一个可变的字符序列，提供与StringBuffer兼容的API，但不保证同步，不是线程安全。其作为StringBuffer的一个简易替换，用于字符串缓冲区被单个线程使用，速度快于StringBuffer。</p><h3 id="String与StringBuffer转换"><a href="#String与StringBuffer转换" class="headerlink" title="String与StringBuffer转换"></a>String与StringBuffer转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//String转StringBuffer</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello tom"</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> strB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//StringBuffer转String</span><span class="token class-name">String</span> str <span class="token operator">=</span> strB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>append</td><td>在末尾追加字符</td></tr><tr><td>delete(start,end)</td><td>删除区间内字符</td></tr><tr><td>replace(start,end,string)</td><td>将start到end中的字符替换成string</td></tr><tr><td>indexOf</td><td>查找子串第一次出现的索引</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>length</td><td>获取长度</td></tr></tbody></table><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//底层调用的是AbstractStringBuilder的appendNull，返回一个null字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出null</span><span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//底层super(str.length()+16),length方法抛出空指针异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>abs</td><td>绝对值</td></tr><tr><td>pow</td><td>求幂</td></tr><tr><td>ceil</td><td>向下取整</td></tr><tr><td>floor</td><td>向上取整</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>sqrt</td><td>开平方</td></tr><tr><td>random</td><td>返回[0-1)的随机数</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr></tbody></table><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>toString</td><td>返回数组的字符串形式</td></tr><tr><td>sort</td><td>排序，分为自然排序和定制排序，因为数组是引用类型，所以会影响到实参</td></tr><tr><td>binarySearch</td><td>二分查找，要求已排序数组</td></tr><tr><td>copyOf</td><td>拷贝n个元素到新数组中</td></tr><tr><td>fill</td><td>数组填充，将原来的元素全部替换成新元素</td></tr><tr><td>equals</td><td>比较两个数组元素内容是否完全一致</td></tr><tr><td>asList</td><td>将一组数据转换为list</td></tr></tbody></table><h4 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定制排序是通过传入一个接口Comparator实现定制排序规则</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>object o1<span class="token punctuation">,</span>object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>    <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>    <span class="token keyword">return</span> i2 <span class="token operator">-</span> i1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>exit</td><td>退出当前程序</td></tr><tr><td>arraycopy</td><td>复制数组元素，比较适合底层调用</td></tr><tr><td>currentTimeMillens</td><td>返回当前时间距离1970-1-1的毫秒数</td></tr><tr><td>gc</td><td>垃圾回收机制</td></tr></tbody></table><h2 id="BigInteger和BigDecimal"><a href="#BigInteger和BigDecimal" class="headerlink" title="BigInteger和BigDecimal"></a>BigInteger和BigDecimal</h2><p>BigInteger适合保存比较大的整型，BigDecimal适合保存精度更高的浮点型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明BigInteger</span><span class="token class-name">BigInteger</span> big1 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"57987978979879879"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> big2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"989898989898899879"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在对BigInteger进行加减乘除的时候，需要使用对应的方法</span><span class="token class-name">BigInteger</span> add <span class="token operator">=</span> big1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>big2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> sub <span class="token operator">=</span> big1<span class="token punctuation">.</span><span class="token function">substract</span><span class="token punctuation">(</span>big2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> mul <span class="token operator">=</span> big1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>big2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigInteger</span> div <span class="token operator">=</span> big1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>big2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明BigDecimal</span><span class="token class-name">BigDecimal</span> dec1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"489.5646545644454465"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> dec2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"8978978.564654564564544565"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加减乘的方法与上面BigInteger相同，除法可能出现异常，结果可能无限循环小数</span><span class="token comment">//在调用除法时，指定精度,ROUND_CEILING保留被除数原有的精度</span><span class="token class-name">BigInteger</span> div <span class="token operator">=</span> dec1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>dec2<span class="token punctuation">,</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_CEILING<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="第一代日期类Date"><a href="#第一代日期类Date" class="headerlink" title="第一代日期类Date"></a>第一代日期类Date</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Date</td><td>精确到毫秒，代表特定的瞬间</td></tr><tr><td>SimpleDateFormat</td><td>格式和解析日期的类</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取日期</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 hh:mm:ss E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设定格式</span><span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"1996年01月01日 10:20:30 星期一"</span><span class="token punctuation">;</span><span class="token class-name">Date</span> parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将格式化字符串转化为日期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二代日期类Calendar"><a href="#第二代日期类Calendar" class="headerlink" title="第二代日期类Calendar"></a>第二代日期类Calendar</h3><p>Calender是一个抽象类，并且构造器是private，可以通过getInstance()来获取实例。</p><p>存在的问题：可变性、偏移性、不可格式化、线程不安全、不能处理闰秒。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建日历对象，不能使用new</span><span class="token comment">//获取日历对象的字段，使用get方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月："</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//月份从0开始，所以需要加1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第三代日期类LocalDateTime"><a href="#第三代日期类LocalDateTime" class="headerlink" title="第三代日期类LocalDateTime"></a>第三代日期类LocalDateTime</h3><p>LocalDate只包含日期，LocalTime只包含时间，LocalDateTime日期和时间都包含。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> ldt <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象，不能new</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回JULY</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回7</span><span class="token comment">//使用DateTimeFormatter对象格式化</span><span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">""</span>yyyy年MM月dd日 HH小时mm分钟ss秒<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> format <span class="token operator">=</span> dft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Instant时间戳，与Date相互转换</span><span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Instant</span> instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提供plus和minus方法对当前日期进行加减操作</span><span class="token class-name">LocalDateTime</span> ldt1 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">890</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//890天后的时间</span><span class="token class-name">LocalDateTime</span> ldt1 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8分钟前的时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>编程技巧：对函数进行验证时，先写出正确的情况，然后取反即可。</p><h1 id="第十二章-集合"><a href="#第十二章-集合" class="headerlink" title="第十二章 集合"></a>第十二章 集合</h1><p>集合可以动态保存任意多个对象，使用比较方便，并提供了一系列方便操作对象的方法。</p><p>集合主要分为单列集合(Collection)和双列集合(Map,一般以键值对形式存在)。</p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/f59eb486d97f8445f82ac823e1181265.png" alt="Collection.png" style="zoom:50%;"><h3 id="Collection常用方法"><a href="#Collection常用方法" class="headerlink" title="Collection常用方法"></a>Collection常用方法</h3><p>Collection接口没有被实例化，以实现子类ArrayList来演示。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>add</td><td>增加元素</td></tr><tr><td>remove</td><td>删除元素，指定删除元素会返回布尔值，指定对象则返回被删除对象</td></tr><tr><td>contains</td><td>查找元素是否存在</td></tr><tr><td>size</td><td>返回元素个数</td></tr><tr><td>isEmpty</td><td>判断是否为空</td></tr><tr><td>clear</td><td>清空</td></tr><tr><td>addAll</td><td>添加多个元素</td></tr><tr><td>containsAll</td><td>查找多个元素是否都存在</td></tr><tr><td>removeAll</td><td>删除多个元素</td></tr></tbody></table><h3 id="迭代器的执行原理"><a href="#迭代器的执行原理" class="headerlink" title="迭代器的执行原理"></a>迭代器的执行原理</h3><p>快捷键itit快速生成while循环,而且ctrl+j可以查看所有快捷键。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> col<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取迭代器</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//判断是否有下一元素</span>  <span class="token class-name">Object</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回下一元素，类型为Object</span><span class="token punctuation">}</span>iterator <span class="token operator">=</span> col<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重置迭代器</span><span class="token comment">//增强for循环，简化版的iterator</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> book<span class="token operator">:</span>col<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book="</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>List集合类中元素有序（即添加顺序和取出顺序一致），且可重复。</p><p>List集合中的每个元素都有其对应的顺序索引，支持索引，可以根据序号存取容器中的元素。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>add(int index,Object ele)</td><td>在index位置插入ele元素</td></tr><tr><td>addAll(int index,Collection eles)</td><td>从index位置开始将eles的元素添加进来</td></tr><tr><td>get</td><td>获取指定位置的元素</td></tr><tr><td>indexOf</td><td>返回元素在集合中首次出现的位置</td></tr><tr><td>lastIndexOf</td><td>返回元素在集合中最后出现的位置</td></tr><tr><td>remove</td><td>删除指定位置的元素，并返回该元素</td></tr><tr><td>set(int index,Object ele)</td><td>设置指定位置的元素为ele，相当于替换</td></tr><tr><td>subList(int from,int to)</td><td>返回从from到to的子集合</td></tr></tbody></table><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList可以放入null，而且可以放多个。</p><p>ArrayList底层是由数组实现数据存储的，维护了一个Object类型的数组elementData[]。当创建ArrayList对象时，如果使用无参构造器，则elementData<strong>容量为0</strong>，第一次添加时则扩容elementData为<strong>10</strong>，如需要再次扩容，则扩容elementData为<strong>1.5倍</strong>。如果使用的是指定大小的构造器，则初始扩容elementData为指定大小，如需要再次扩容，则扩容elementData为<strong>1.5倍</strong>。</p><p>ArrayList基本等同于Vector，除了ArrayList是线程不安全的（执行效率高），在多线程情况下，建议使用Vector。</p><p>transient关键字表示该属性不会被序列化。</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>Vector底层也是一个对象数组，维护了一个Object类型的数组elementData[]。当创建Vector对象时，如果使用无参构造器，则调用有参构造器，设置<strong>容量为10</strong>，需要扩容，则扩容elementData为<strong>2倍</strong>。如果使用的是指定大小的构造器，则初始扩容elementData为指定大小，如需要再次扩容，则扩容elementData为<strong>2倍</strong>。不过扩容大小可以自行指定。</p><p>与ArrayList不同的是，Vector是线程同步的，即线程安全的，带有synchronized关键字。</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList底层实现了双向链表和双端队列，可以添加任意元素，且元素可以重复或为null，但线程不安全，没有实现同步。</p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>Set接口是无序的，即添加和取出的顺序不一致(但是取出的顺序是固定的)，没有索引；不允许重复数据，使用最多只有一个null。</p><p>同Collection的迭代方式一样，因为Set接口是Collection接口的子接口，可以使用迭代器和增强for，但是不能使用索引的方式来获取。</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>HashSet的底层其实是HashMap，而HashMap的底层是数组+链表+红黑树，在数据量小的时候为哈希中的拉链法，数据量大时会转化为红黑树。</p><p>在添加数据时，先得到hash值，然后会转化为索引值，找到索引位置后判断是否已有元素，没有则直接加入，有则逐个调用equals方法比较，如果相同则放弃添加，否则将其添加到最后。在java8中，如果一条链表的元素个数超过TREEIFY-THRESHOLD(默认是8)，而且数组大小大于等于MIN-TREEIFY-CAPACITY(默认为64)，就会进行红黑树化。</p><p>第一次添加时，table扩容到16，临界值为容量*加载因子0.75为12。到达临界值后，会扩容2倍到32，因此新的临界值等于32乘以0.75=24，以此类推。还有一种导致扩容的情况是单条链已经超越TREEIFY-THRESHOLD(默认是8)，每超越一次，触发一次扩容。该容量是指元素的个数，不是只计算在第一个位置上的。</p><p>LinkedHashSet是HashSet的子类，底层是LinkedHashMap，维护了一个数组+双向链表。其使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。第一次添加时，直接将数组扩容到16，数组类型是<code>HashMap$Node</code>存放的结点类型是<code>LinkedHashMap$Entry</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//HashSet不能添加相同的元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是可以的，因为是两个不同的元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是不可以的，因为按照String的equals方法判断，两者是相同的</span><span class="token comment">//哈希计算公式</span>hash <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>h<span class="token operator">&gt;&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相等判断,equals会根据key进行动态绑定</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>TreeSet的底层是TreeMap，可以进行排序，可以通过传入一个比较器(匿名内部类)来实现排序效果。构造器把传入的比较器对象赋给TreeSet底层的TreeMap的属性this.comparator。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span> treeset <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>object o1<span class="token punctuation">,</span>object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不允许传入相同(以Comparator为准)的元素，如果设定比较长度，则长度一样的不能加入。</p><h2 id="Map-JDK8"><a href="#Map-JDK8" class="headerlink" title="Map(JDK8)"></a>Map(JDK8)</h2><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/01ad78be19da71cc384c01b6b8deeebb.png" alt="Map.png" style="zoom:50%;"><p>Map用于具有映射关系的数据，key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中。key不允许重复，但允许为null，而value允许重复，这种情况相当于进行替换。</p><p>常用String类作为Map的key。key和value之间存在单向一对一关系，即通过指定的key总能找到对应的value。</p><p>HashMap是Map接口使用频率最高的实现类，其没有实现同步，因此是线程不安全。</p><p>HashTable的键和值都不能为null，而且是线程安全的。HashTable的元素是HashTable$Entry类型的，使用addEntry方法添加元素。其初始容量为11，扩容为2倍+1。</p><p>Properties还可以从xxx.propertises文件(作为配置文件)中加载数据到Properties类对象，并进行读取和修改</p><h3 id="Map常用方法"><a href="#Map常用方法" class="headerlink" title="Map常用方法"></a>Map常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>put</td><td>添加</td></tr><tr><td>remove</td><td>根据键删除映射关系</td></tr><tr><td>get</td><td>根据键获取值</td></tr><tr><td>size</td><td>获取元素个数</td></tr><tr><td>isEmpty</td><td>判断是否为空</td></tr><tr><td>clear</td><td>清除</td></tr><tr><td>containsKey</td><td>查找键是否存在</td></tr><tr><td>keySet</td><td>获取所有的键</td></tr><tr><td>entrySet</td><td>获取所有的关系</td></tr><tr><td>values</td><td>获取所有的值</td></tr></tbody></table><h3 id="Map遍历方式"><a href="#Map遍历方式" class="headerlink" title="Map遍历方式"></a>Map遍历方式</h3><ol><li>先取出所有的key，通过key取出对应的value。</li><li>把所有values取出。</li><li>通过entrySet方法获取，集合存放的数据的元素类型是Entry，提供了getKey和getValue方法。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成entry类型</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span>set<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token comment">//向下转型</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Collections的方法都是静态方法，传入参数即可调用</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>reverse</td><td>反转List中元素的顺序</td></tr><tr><td>shuffle</td><td>对List中元素进行随机排序</td></tr><tr><td>sort</td><td>对List元素进行升序排序，可以自行指定排序接口</td></tr><tr><td>swap</td><td>交换List中两个元素的位置</td></tr><tr><td>max</td><td>返回集合中的最大元素，可以自行指定排序接口</td></tr><tr><td>min</td><td>返回集合中的最小元素，可以自行指定排序接口</td></tr><tr><td>frequency</td><td>返回集合中指定元素的出现次数</td></tr><tr><td>copy(List dest,List src)</td><td>将一个src复制到dest中，需要dest的大小大于等于src</td></tr><tr><td>replaceAll</td><td>使用新值替换List中的所有值</td></tr></tbody></table><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span> treeset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//add方法，因为构造器没有传入Comparator接口的匿名内部类，</span><span class="token comment">//所以底层会将尝试将Person转为Comparable类型，而Person没有实现，因此会报错，解决方法是实行Comparable接口</span>treeset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改了hashcode为id和name绑定，equals是判断id和name是否相同</span><span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于此时p1已被改变，哈希值改变，不能查找到原来位置，删除失败</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p1的name发生改变，但在内部存储的位置不变，和新加入的不相同，所以能成功加入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十三章-泛型"><a href="#第十三章-泛型" class="headerlink" title="第十三章 泛型"></a>第十三章 泛型</h1><p>传统方法不能对加入到集合中的数据进行约束，而且遍历的时候，需要类型转换，如果集合中的数据量较大，对效率有影响。</p><p>泛型又称参数化类型，是JDK5出现的新特性，解决数据类型的安全性问题，在类声明或实例化时只要指定需要的具体类型即可。</p><p>泛型的作用是在类声明时通过一个标识表示类中某个属性的类型，或者某个方法的返回值类型，或者参数类型。</p><p>JUnit单元测试框架首先输入<code>@Test</code>，然后在后面按<code>alt+enter</code>，然后点击方法旁边的运行键即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> arraylist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> arraylist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简写形式，推荐使用</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token operator">:</span>arraylist<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//此时可以不再使用Object类，直接使用Dog，不用进行类型转换</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>  <span class="token class-name">T</span> s<span class="token punctuation">;</span><span class="token comment">//此时s的数据类型指定的泛型决定'</span>  <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//错误的，使用泛型的数组，不能初始化，因为数组在new不能确定T的类型，就无法在内存中开空间</span>  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">T</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//T可以是参数类型</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//E可以是返回类型</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token class-name">M</span> m<span class="token punctuation">,</span><span class="token class-name">R</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//泛型方法，调用方法声明的泛型</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly1</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//不能称作泛型方法，只是使用了泛型，里面的泛型只能使用类声明的泛型</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token keyword">extends</span> <span class="token class-name">IUsb</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>  <span class="token comment">//在继承接口时指定泛型接口的类型</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IUsb</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型使用细节"><a href="#泛型使用细节" class="headerlink" title="泛型使用细节"></a>泛型使用细节</h2><ol><li><strong>泛型只能是引用类型，不可以是基本数据类型。</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//True</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在给泛型指定具体类型后，可以传入该类型或其子类类型。</li><li>如果没有指定泛型，则默认是Object类。</li><li>使用泛型的数组，不能初始化，因为数组在new不能确定T的类型，就无法在内存中开空间。</li><li>静态方法不能使用泛型，因为静态是和类相关的，所以无法得知泛型的类型。</li></ol><h2 id="泛型的通配符"><a href="#泛型的通配符" class="headerlink" title="泛型的通配符"></a>泛型的通配符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//泛型不具备继承性</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;?&gt;:支持任意泛型类型</span><span class="token comment">//&lt;? extends A&gt;:支持A类以及A类的子类，规定了泛型的上限</span><span class="token comment">//&lt;? super A&gt;:支持A类以及A类的父类，不限于直接父类，规定了泛型的下限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十四章-坦克大战"><a href="#第十四章-坦克大战" class="headerlink" title="第十四章 坦克大战"></a>第十四章 坦克大战</h1><p>写并发程序，一定要考虑清楚，该线程什么时候结束。</p><p>线程消亡了不代表它的对象会变为null。</p><p>主要实现了英雄坦克和敌人坦克的范围内移动和子弹的发射功能，还有子弹击中效果实现。</p><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><p>当组件第一次在屏幕显示的时候，程序会自动的调用paint()方法来绘制组件，还有在窗口最小化后在最大化；窗口的大小发生变化；repaint函数被调用。</p><p>画笔基础JPanel画笔类，主类继承JFrame画框类，这样才能画出图像。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCircle</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span><span class="token comment">//JFrame相当于画框</span>    <span class="token keyword">private</span> <span class="token class-name">MyPenal</span> mp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//初始化面板</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPenal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将面板放入到画框中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置画框大小</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点击关闭按钮后程序退出</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以显示</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPenal</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//绘图方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类方法完成初始化</span>        <span class="token comment">//此处画椭圆的x,y不是圆心的坐标，而是椭圆形成的长方形的左上角坐标</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置颜色为蓝色</span>        g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绘制图片</span>        <span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token class-name">Panel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/哈哈.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绘制文字</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"北京你好"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处的x,y位置为左下角</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>drawLine</td><td>画直线</td></tr><tr><td>drawRect</td><td>画矩形边框</td></tr><tr><td>drawOval</td><td>画椭圆边框</td></tr><tr><td>fillRect</td><td>填充矩形</td></tr><tr><td>fillOval</td><td>填充椭圆</td></tr><tr><td>drawImage</td><td>画图片，图片需要放在out文件夹下的idea文件夹下</td></tr><tr><td>drawString</td><td>画字符串</td></tr><tr><td>setFont</td><td>设置画笔的字体</td></tr><tr><td>setColor</td><td>设置画笔的颜色</td></tr></tbody></table><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>java事件处理是采用“委派事件模型”，当事件发生时，产生事件的对象，会将此“信息”传递给“事件的监听者”处理。</p><p>控制小球移动需要画笔实现KeyListener接口监听键盘的操作，以实现对小球的控制，同时需要在主函数中监听对应的画笔才能实现功能。</p><p>使用getKeyCode()方法可以获取键盘输入，每当发生变化时需要调用repaint方法进行图像重绘。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BallMove</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token class-name">MyPenal</span> mp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BallMove</span> ballMove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BallMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BallMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPenal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//窗口JFrame可以监听键盘事件，即可以监听面板发生的键盘事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//面板，可以画小球</span><span class="token comment">//KeyListener是一个监听器，可以监听键盘时间，可以点击显示上下文生成三个需要实现的方法</span><span class="token keyword">class</span> <span class="token class-name">MyPenal</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span> <span class="token punctuation">{</span>    <span class="token comment">//为了小球可以移动，把左上角坐标设置为变量</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//监听有字符输出时</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//当某个键被按下时</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//System.out.println((char) e.getKeyCode() + "被按下");</span>        <span class="token comment">//根据用户按下的不同键，来处理小球的移动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//向下的箭头</span>            y<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span><span class="token punctuation">{</span>            y<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_LEFT<span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_RIGHT<span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//让画笔重绘图像</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//当某个键被释放</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十五章-线程-基础"><a href="#第十五章-线程-基础" class="headerlink" title="第十五章 线程(基础)"></a>第十五章 线程(基础)</h1><p><strong>在java中使用线程有两种方法，一种是继承Thread类，重写run方法；另一种是实行Runnable，重写run方法。</strong>从java的设计来看，两者本质上没有区别，但实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制。</p><p>Thread类实现了Runnable接口的run方法。</p><p>在控制台中输入jconsole可以查看线程信息。</p><p><strong>为啥调用的是start方法，而不是run方法，因为run方法就是一个普通的方法，没有真正的启动一个线程，只是像以前一样顺序执行。线程是通过底层的start0方法实现的。</strong></p><p>当线程完成任务后会自动退出，除此之外还可以通过使用变量来控制run方法停止线程，即通知方式。</p><p>用户线程：也叫工作线程，当线程的任务执行完成或通知方式结束。</p><p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束。最常见的守护线程是垃圾回收机制。</p><p>可以在方法上加上synchronized关键字来实现同步。同步方法如果没有使用static修饰，默认锁对象为this，如果方法使用static修饰，默认锁对象为当前类.class。</p><p>在代码块上加锁：同步方法（非静态的）的锁可以是this，也可以是其他对象（要求是同一个对象）；而同步方法（静态的）的锁是当前类本身。</p><p>线程同步关键在于要求多个线程的锁的对象为同一个即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动线程，是start方法而不是run方法</span>        <span class="token comment">//如果是通过继承Runnable接口的方法，没有start方法，则要使用下面的方式</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设计模式中的代理模式</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多个线程共享一个资源</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为守护线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//重写run方法，写上自己的业务逻辑</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//给该代码块加锁</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是西芹啊"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//休眠1秒</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>setName</td><td>设置线程名称，使其与参数name相同</td></tr><tr><td>getName</td><td>返回线程的名称</td></tr><tr><td>start</td><td>使该线程开始执行，java虚拟机底层调用该线程的start0方法</td></tr><tr><td>run</td><td>调用线程对象run方法</td></tr><tr><td>setPriority</td><td>更改线程的优先级</td></tr><tr><td>getPriority</td><td>获取线程的优先级</td></tr><tr><td>sleep</td><td>指定线程休眠的毫秒数</td></tr><tr><td>interrupt</td><td>中断线程，一般用于中断正在休眠的线程，此时会进入catch方法中</td></tr><tr><td>yield</td><td>线程的礼让，让出CPU使其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</td></tr><tr><td>join</td><td>线程的插队，插队的线程一旦插队成功，则肯定让先执行完插入的线程所有的任务</td></tr><tr><td>getState</td><td>获取线程当前状态</td></tr></tbody></table><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/197a9592f2d9e99b7739720a71f36c13.png" alt="java线程生命周期 - 搜索结果 - 知乎.png"></p><table><thead><tr><th>生命周期</th><th>介绍</th></tr></thead><tbody><tr><td>NEW</td><td>尚未启动的线程</td></tr><tr><td>RUNNABLE</td><td>在java虚拟机中执行的线程，可细分为READY和RUNNING两种状态</td></tr><tr><td>BLOCKED</td><td>被阻塞等待监视器锁定的线程</td></tr><tr><td>WAITTING</td><td>正在等待另一个线程执行特定动作的线程</td></tr><tr><td>TIMED_WAITING</td><td>正在等待另一个线程执行动作达到指定等待时间的线程</td></tr><tr><td>TERMINATED</td><td>已退出的线程</td></tr></tbody></table><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><h3 id="释放锁情况"><a href="#释放锁情况" class="headerlink" title="释放锁情况"></a>释放锁情况</h3><ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步方法、同步代码块中遇到break、return。</li><li>当前线程在同步方法、同步代码块中出现了未处理的Error或Exception，导致异常结束。</li><li>当前线程在同步方法、同步代码块中执行了线程对象的wait()方法，当前线程释放，并释放锁。</li></ol><h3 id="不释放锁情况"><a href="#不释放锁情况" class="headerlink" title="不释放锁情况"></a>不释放锁情况</h3><ol><li>线程执行同步方法、同步代码块时，程序调用了Thread.sleep()、Thread.yield()方法暂停当前线程的执行，不会释放锁。</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，不会释放锁。但应尽量避免使用suspend()和resume()来控制线程。</li></ol><h1 id="第十六章-IO文件流"><a href="#第十六章-IO文件流" class="headerlink" title="第十六章 IO文件流"></a>第十六章 IO文件流</h1><p>当文件读取完成后应将子资源释放，避免造成浪费。</p><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种方式:new File(String pathname)根据路径创建一个File对象</span><span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"e:\\news1.txt"</span><span class="token punctuation">;</span><span class="token comment">//这里的File对象，在java程序中只是一个对象</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种方式:new File(File parent,String child)根据父目录文件+子路径创建</span><span class="token class-name">File</span> parentFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"news2.txt"</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentFile<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种方法:new File(String parent,String child)根据父目录+子路径创建</span><span class="token class-name">String</span> parentPath <span class="token operator">=</span> <span class="token string">"e:\\"</span><span class="token punctuation">;</span><span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"news3.txt"</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有执行了createNewFile方法才会真正的在磁盘中创建该文件</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h2><p>在java编程中，目录也被当作是一种文件。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getName</td><td>获取文件名称</td></tr><tr><td>getAbsolutePath</td><td>获取绝对路径</td></tr><tr><td>getParent</td><td>获取文件父级目录</td></tr><tr><td>length</td><td>文件大小，按字节统计</td></tr><tr><td>exists</td><td>文件或目录是否存在</td></tr><tr><td>isFile</td><td>是不是一个文件</td></tr><tr><td>isDirectory</td><td>是不是一个目录</td></tr><tr><td>mkdir</td><td>创建一级目录</td></tr><tr><td>mkdirs</td><td>创建多级目录</td></tr><tr><td>delete</td><td>删除空目录或文件</td></tr><tr><td>close</td><td>关闭输入输出流</td></tr></tbody></table><h2 id="输入流和输出流"><a href="#输入流和输出流" class="headerlink" title="输入流和输出流"></a>输入流和输出流</h2><table><thead><tr><th>抽象基类</th><th>字节流(二进制文件)</th><th>字符流(文本文件)</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>InputStream常用子类：文件输入流FileInputStream、缓冲字节输入流BufferedInputStream、对象字节输入流ObjectInputStream。</p><p>可以使用String中的getBytes()方法将字符串转换为字符数组，使其可以使用write方法写入到文件中：<code>fileOutputStream.write(str.getBytes());</code>。</p><p>FileWriter使用后，必须要关闭(close)或刷新(flush)，否则写入不到指定的文件。</p><p>比较特殊的是read方法返回的是int类型，所以要使用int变量接收后进行强转后输出。</p><h2 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h2><p>节点流可以从一个特定的数据源读取数据。处理流(又称包装流)是“连接”在已存在的流之上，为程序提供更为强大的读写功能。</p><p>节点流是底层流/低级流，直接跟数据源连接。</p><p>处理流包装节点流，使用了修饰器设计模式，不会与数据源直接相连，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</p><p>处理流的功能主要体现在：性能的提高，以增加缓冲的方式提高输入输出的效率；操作的便捷，处理流提供了一系列便捷大方法来一次性输入输出大批量的数据，使用更加方便。</p><p><strong>处理流对节点流的包装使用的多态，处理流拥有自身管理的节点流的父类属性，通过动态绑定机制实现对不同节点流的统一处理。</strong></p><p>关闭处理流时只需关闭外层流即可，因为底层会自动的去关闭节点流。</p><p>BufferedReader和BufferedWriter都是按照字符串操作的处理流，不要去操作二进制文件，可能会导致文件损坏。</p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>序列化是指在保存数据时，保存数据的值和数据类型；反序列化是指在恢复数据时，恢复数据的值和数据类型。</p><p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，因此该类必须实现如下接口之一：Serializable和Exterenalizable。而ObjectOutputStream和ObjectInputStream提供了对基本数据类型或对象类型的序列化和反序列化的方法。</p><p>序列化后保存的文件格式，不是存文本，而是按照它的格式进行存储。</p><p>对于自定义的类而言，通过readObject方法读取到的对象的编译类型是Object类，而运行类型是本身的类型。</p><p>序列化中的类中建议添加SerialVersionUID，这个是序列化的版本号，可以提高版本的兼容性。</p><p><strong>序列化对象时，默认将里面所有的对象进行序列化，除了static或transient修饰的成员，还有没有实现序列化接口的属性也是不会进行序列化的。</strong></p><p>序列化具备可继承性，如果父类已经实现了序列化，则其所有子类也默认实现了序列化。</p><h3 id="默认输入输出"><a href="#默认输入输出" class="headerlink" title="默认输入输出"></a>默认输入输出</h3><p>System.in的编译类型是InputStream，运行类型是BufferInputStream，默认输入是键盘。</p><p>System.out的编译类型是PrintStream，运行类型是PrintStream，默认输出是显示器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//切换输出位置</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"e\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>在默认情况下，我们读取文件是按照UTF-8编码。</p><p>转换流有InputStreamReader和OutputStreamWriter，可以实现将字节流转换为字符流，并为其指定编码类型(比如UTF-8、gbk、gb2312、ISO8859-1等)。</p><p>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换为字符流。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先将字节流转换为字符流</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后放入BufferedReader中提高读取效率，也可以将两步合成一步写</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><p>该类是专门用于读写配置文件的集合类，键值对不需要有空格，值不需要引号，默认类型是String。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql2.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>load</td><td>加载配置文件的键值对到Properties对象</td></tr><tr><td>list</td><td>将数据显示到指定设备</td></tr><tr><td>getProperty(key)</td><td>根据键获取值</td></tr><tr><td>setProperty(key,value)</td><td>设置键值对到Properties对象</td></tr><tr><td>store</td><td>将Properties中的键值对存储到配置文件，在idea中保存数据到配置文件，中文会存储为Unicode码</td></tr></tbody></table><h1 id="第十七章-网络通信"><a href="#第十七章-网络通信" class="headerlink" title="第十七章 网络通信"></a>第十七章 网络通信</h1><p>IPV4使用32位表示地址，IPV6使用128位地址。</p><p>端口范围为0-65535，而0-1024已经被占用，例如ssh占用22，ftp占用21，smtp占用25，http占用90，常用的网络程序端口号Tomcat是8080，mysql是3306，Oracle是1521，SQLserver是1433。</p><p><strong>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通信的，这个端口是TCP/IP进行随机分配的。</strong></p><p><strong>语言本身就是协议。</strong></p><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getLocalHost</td><td>获取本机InetAddress对象</td></tr><tr><td>getByName</td><td>根据指定主机名/域名获取ip对象</td></tr><tr><td>getHostName</td><td>获取InetAddress对象的主机名</td></tr><tr><td>getHostAddress</td><td>获取InetAddress对象的地址</td></tr></tbody></table><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准。</p><p><strong>通信的两端都要有Socket，是两台机器间通信的端点，网络通信其实就是Socket之间的通信。</strong></p><p>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP01Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.链接服务端(IP,端口)，连接本机9999端口，可以指定对应的IP地址，如果连接成功则返回socket对象</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.连接上后，生产socket，通过socket。getOutputStream()得到和socket对象关联的输出流对象</span>        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.通过输出流，写入数据到数据通道</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello,server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置结束标志,这样对方才能回复</span>        <span class="token comment">//在字符流中可以使用writer.newLine()写入结束标记，但对方需要使用readLine()</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.关闭流对象和socket</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//服务端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP01Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.在本机的9999端口监听，等待链接，要求本机没有其他服务在监听9999端口</span>        <span class="token comment">//这个ServerSocket可以通过accept()返回多个Socket对象</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.当没有客户端连接9999端口时，程序会阻塞，等待链接;如果有客户连接，则会返回Socket对象，程序继续</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.通过socket.getInputStream()读取客户端写入到数据通道的数据，显示</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.IO读取</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据读取到的实际长度，显示内容</span>        <span class="token punctuation">}</span>        <span class="token comment">//5.关闭流和socket</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传图片到客户端"><a href="#上传图片到客户端" class="headerlink" title="上传图片到客户端"></a>上传图片到客户端</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//文件上传服务端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPFileUploadServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1.服务端在本机监听8888端口</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.等待连接</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.读取客户端发送的数据，通过socket得到一个输入流</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">streamToByteArray</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用老韩的工具</span>        <span class="token comment">//4.将数组写入到指定的路径，就得到一个文件了</span>        <span class="token class-name">String</span> destFilePath <span class="token operator">=</span> <span class="token string">"src\\qie2.png"</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.向客户端回复“收到图片”</span>        <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"收到图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新内容到数据通道</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入结束标志</span>        <span class="token comment">//6.关闭其他资源</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//文件上传的客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPFileUploadClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1.客户端连接服务端8888，得到Socket对象</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建读取磁盘文件的输入流</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"e:\\qie.png"</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用老韩的文件实现转换</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">streamToByteArray</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.通过socket获取到输出流，将byte数据发送给服务端</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将文件的内容写入数据通道</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束标记</span>        <span class="token comment">//4.接受服务端回复的消息</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用老韩工具，将接受到的数据转换为字符串</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">streamToString</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.关闭流</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>netstat -an</td><td>可以查看当前主机网络情况，包括端口监听情况和网络连接情况。 netstat -an|more 可以分页显示</td></tr><tr><td>netstat -an|more</td><td>可以分页显示</td></tr><tr><td>netstat -anb</td><td>查看是哪个程序在使用该端口，需要管理员权限</td></tr></tbody></table><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><p>类DatagramSocket和DatagramPacket实现了基于UDP协议网络程序。</p><p>UDP数据报数据通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能安全送到目的地，也不能确定什么时候可以抵达。</p><p>DatagramPacket对象封装了UDP数据，在数据报中包含了发送端的IP地址和端口号已经接收端的IP地址和端口号。UDP协议中每个数据报都给出了完整的地址信息，因此无需建立发送方和接收方的连接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//UDP接收端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPReceiverA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建一个DatagramSocket对象，准备在9999接收数据</span>        <span class="token class-name">DatagramSocket</span> socket  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.构建一个DatagramPacket对象，准备接收数据,数据包最大64k</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.调用接收方法，准备接收数据，将数据填充到packet中</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将packet进行拆包，取出数据并显示</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取实际接收到的长度</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实际上的数据</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.关闭资源</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//UDP发送端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPSenderB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建DatagramSocket对象，准备在9998接收数据</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.将需要发送的数据封装到DatagramPacket对象，使用ipconfig查询ip地址</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"hello,明天吃火锅~"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.116.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.关闭资源</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十八章-反射"><a href="#第十八章-反射" class="headerlink" title="第十八章 反射"></a>第十八章 反射</h1><p>反射可以通过外部文件设置，在不修改源码的基础上来控制程序，也符合设计模式的开闭原则。</p><p>反射机制允许程序在执行期借助反射取得任何类的内部信息(比如成员变量、构造器和成员方法等等)，并能操作对象的属性及方法。反射的应用广泛，在设计模式和框架底层都会用到。</p><p>加载完类之后，在堆中就产生了一个class类型的对象(一个类只有一个Class对象)，这个对象包含了类的完整结构信息。通过这个对象可以得到类的结构。这个Class对象就像是一面镜子，透过这个镜子可以看到类的结构，所以形象的将其称为：反射。</p><p><strong>反射的优点是可以动态的创建和使用对象(也是框架底层核心)，使用灵活，没有反射机制，框架技术就失去底层支撑。缺点是反射基本是解释执行，对执行速度有影响。</strong></p><p>Method和Field、Constructor对象都有setAccessible()方法，该方法作用是启动和禁止访问安全检查的开关，参数值为true表示反射的对象在使用时取消访问检查，提高反射的效率。</p><p>静态加载在编译时加载相关的库，如果没有则报错，依赖性太强。动态加载在运行时加载需要的库，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性。</p><p><strong>类加载的时机：创建对象、子类被加载、调用类中的静态方法、通过反射。</strong>其中只有反射是动态加载，其余都是静态加载。</p><p>在反射中，如果方法有返回值，统一返回Object类型，但运行类型和方法定义的返回类型一致。</p><p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/bc8de307116765133225103e6b99267a.png" alt="未命名文件 (1).png"></p><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从配置文件中读取到类cat和需要被调用的方法methodName</span><span class="token comment">//1.加载类，返回class类型的对象cls</span><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classfullpath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.通过cls得到加载的类Cat的对象实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过cls得到你加载的Cat的methodName对应的方法"hi"的方法对象</span><span class="token comment">//在反射中，可以把方法视为对象（万物皆对象）</span><span class="token class-name">Method</span> method1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.通过method1调用方法，即通过方法对象来实现调用方法</span>method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射机制：方法.invoke(对象)</span><span class="token class-name">Field</span> nameField <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取User类的Class对象</span><span class="token class-name">Class</span> userclass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用无参构造器创建实例</span><span class="token class-name">Object</span> o <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用有参public构造器创建实例</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取构造器</span><span class="token class-name">Object</span> hsp <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用非public构造器创建实例</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取构造器</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴破，强行访问非public的构造方法</span><span class="token class-name">Object</span> hsp <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h2 id="反射的主要类"><a href="#反射的主要类" class="headerlink" title="反射的主要类"></a>反射的主要类</h2><p>这些类在java.lang.reflection</p><table><thead><tr><th>类</th><th>作用</th></tr></thead><tbody><tr><td>java.lang.Class</td><td>代表一个类，Class对象表示某个类加载后在堆中的对象</td></tr><tr><td>java,lang.reflect.Method</td><td>代表类的方法，Method对象表示某个类的方法</td></tr><tr><td>java.lang.reflect.Field</td><td>代表类的成员变量，获取公有的成员变量</td></tr><tr><td>java.lang.reflect.Constructor</td><td>代表类的构造方法</td></tr></tbody></table><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ol><li>Class也是类，因此也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>对于某个类的Class对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会知道自己是由哪个Class实例所生成</li><li>通过Class对象可以完整地得到一个类的完整结构</li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据是放在方法区的，有的地方称为类的元数据(包括方法代码、变量名、方法名、访问权限等)。</li></ol><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>加载阶段：JVM在该阶段的主要目的是将字节码从不同的数据源(可能是class文件，也可能是jar包，甚至是网络)转化为二进制字节流加载到内存中，并生成一个代表该类的java.lang.Class对象。</p><p>连接阶段-验证：目的是确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证包括文件格式验证、元数据验证、字符码验证和符号引用验证。</p><p>连接阶段-准备：JVM会在该阶段对静态变量分配内存并默认初始化(对应数据类型的默认初始化值)。这些变量所使用的内存将在方法区中进行分配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token comment">//n1是实例变量，不是静态变量，因此在准备阶段不会分配内存</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//n2是静态变量，分配内存并初始化为默认值0，而不是20</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">//n3是static final是常量，和静态变量不一样，直接赋值为30</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接阶段-解析：虚拟机将常量池内的符号引用替换为直接引用的过程。</p><p>初始化：到初始化阶段才真正开始执行类中定义的java程序代码，此阶段是执行<code>&lt;clinit&gt;()</code>方法的过程。该方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值语句和静态代码块中的语句，并进行合并。</p><p>虚拟机会保证一个类的<code>&lt;clinit()&gt;</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行该方法，其他线程都需要阻塞等待，直到活动线程执行该方法完毕。</p><p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/80ec4d8b21e1f9775fbc5bc6f0f628a8.png" alt="未命名文件 (1).png"></p><h1 id="第十九章-MySQL"><a href="#第十九章-MySQL" class="headerlink" title="第十九章 MySQL"></a>第十九章 MySQL</h1><p>数据库表的一行成为一条记录，在java程序中，一行记录往往使用对象表示。</p><p>在创建数据库，表的时候，为了规避关键字，可以使用反引号解决。</p><p>delete语句不能删除某一列的数据，可以使用update设为null或者‘’。</p><p>select语句可以通过指定distinct参数来选择是否显示重复的数据。</p><p>count(*)返回满足条件的记录的行数；count(‘列名’)也会返回满足条件的记录的某列有多少个，但是会排除为null。</p><p>like模糊查找，%表示多个任意字符，_表示单个任意字符。</p><p>为了给某个SQL语句进行效率测试，我们需要海量数据时，可以使用该方法为表创建海量数据。</p><p>union all将两个查询结果合并，不会去重；union合并时会进行去重。</p><p>可以使用auto_increment实现自增长，填入数据时只需填入null，数据会自行增长，如果填入值，则以该值为准。自增长的机制是选取当前的最大值进行加一。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into my_tab01 select * from my_tab01 # 自我复制# 将my_tab01表的结构(列)复制到my_tab02中create table my_tab02 like my_tab01;# 修改自增长的起始值为100alter table t25 auto_increment = 100;select empno,ename name,sal salary from emp;# 正确，可以省略as# 错误，Annual Salary中间有空格，编译器无法明白，改为"Annual Salary"，或者中间加上下划线select ename,sal*12 Annual Salary from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>索引是最物美价廉的东西，不用加内存，不用改程序，不用调SQL，查询速度就可能提高百倍千倍。但是会影响更新，删除和插入的效率，因为要更新搜索二叉树。</strong></p><p>索引的类型：主键索引(primary key)，唯一索引(unique)，普通索引(index)，全文索引(fulltext)，但一般不使用全文索引，而是使用全文搜索Solr和ElasticSearch。</p><p>较频繁的作为查询条件字段应该创建索引，唯一性太差的和更新非常频繁字段不适合单独创建索引。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 在emp表的empno列创建索引create index empno_index on emp(empno)alter table emp add index empno_index(empno)# 查询表是否有索引show index from t25# 删除索引drop index empno_index on t25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#备份数据库，将数据库保存到指定目录:mysqldump -u 用户名 -p -B 数据库1 数据库2 &gt; 文件名.sqlmysqldump -u root -p -B hsp_db02 hsp_db03 &gt; d:\\bak.sql#备份数据库中指定的表:mysqldump -u 用户名 -p 数据库 表1 表2 &gt; 文件名.sqlmysqldump -u root -p hsp num1 num2 &gt; d:\\bak.sql#恢复数据库，需要先进入MySQL命令行，输入mysql -u root -psource d:\\bak.sql#由于备份的数据库中含有所有操作，所有可以全部执行一遍来进行恢复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型-列类型"><a href="#数据类型-列类型" class="headerlink" title="数据类型(列类型)"></a>数据类型(列类型)</h2><p>数据默认是有符号的，添加unsigned关键字变为无符号。</p><p>Decimal[M,D]，M是小数位的总数，D是小数点后面的位数。M的最大值是65，默认值是10；D的最大值为30，默认值是0。</p><p>timestamp时间戳可以指定on update current_timestamp，这样每次更新时都会自动更新为当前时间。</p><p>字符和日期型数据应包含在单引号中。</p><p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/81bf2d9b3a518e97ccb968574b30080f.png" alt="MySQL列类型.png"></p><h2 id="char与varchar"><a href="#char与varchar" class="headerlink" title="char与varchar"></a>char与varchar</h2><ol><li><strong>char最多可存储255个字符，varchar最大可存储65532个字节，注意是字节，因此能最多能存储的字符取决于编码方式。但填入的参数都是指定字符数。</strong></li><li>char是定长，会固定占用声明的空间；varchar是变长，存储实际占用的空间，但会使用一定长度的字节存储长度。</li><li>char的查询速度大于varchar。</li></ol><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>dual是亚元表，系统表，可以作为一个测试表使用。</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>charset</td><td>获取字符串所属字符集</td></tr><tr><td>concat</td><td>连接字符串，将多个列拼接成一列</td></tr><tr><td>instr(string,substring)</td><td>返回substring在string出现的位置，没有则返回0</td></tr><tr><td>ucase</td><td>转换为大写</td></tr><tr><td>lcase</td><td>转换为小写</td></tr><tr><td>left(string,length)</td><td>从字符串的左边起取length个字符</td></tr><tr><td>right(string,length)</td><td>从字符串的右边起取length个字符</td></tr><tr><td>length</td><td>获取字符串长度(字节)</td></tr><tr><td>replace(str,search,replace)</td><td>将str列中的search替换成replace</td></tr><tr><td>strcmp</td><td>比较两个字符串大小</td></tr><tr><td>substring(str,position,[,length])</td><td>截取字符串，从position开始取length个字符，从1开始计数</td></tr><tr><td>ltrim,rtrim,trim</td><td>去除前端或后端空格</td></tr></tbody></table><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>abs</td><td>返回绝对值</td></tr><tr><td>bin</td><td>十进制转二进制</td></tr><tr><td>celling</td><td>向上取整</td></tr><tr><td>conv</td><td>进制转换</td></tr><tr><td>floor</td><td>向下取整</td></tr><tr><td>format</td><td>保留小数位数，四舍五入</td></tr><tr><td>hex</td><td>转十六进制</td></tr><tr><td>least</td><td>求最小值</td></tr><tr><td>mod</td><td>求余</td></tr><tr><td>rand</td><td>返回随机数，范围为[0,1]，可以填入seed，生产对应的随机数</td></tr></tbody></table><h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>current_date</td><td>当前日期</td></tr><tr><td>current_time</td><td>当前时间</td></tr><tr><td>current_timestamp</td><td>当前时间戳</td></tr><tr><td>date</td><td>返回datetime的日期部分</td></tr><tr><td>date_add(date,interval d_value d_type)</td><td>在date中加上日期或时间</td></tr><tr><td>date_sub(date,interval d_value d_type)</td><td>在date上减去日期或时间</td></tr><tr><td>datediff</td><td>两个时间差，结果返回天数</td></tr><tr><td>timediff</td><td>两个时间差，返回多少小时多少分钟多少秒</td></tr><tr><td>now</td><td>当前时间</td></tr><tr><td>year|month</td><td>date(date)</td></tr><tr><td>from_unixtime</td><td>可以将unix_timestamp转换为指定格式的日期</td></tr><tr><td>unix_timestamp</td><td>返回从1970-1-1到现在的秒数</td></tr><tr><td>last_day</td><td>返回填入日期该月的最后一天</td></tr></tbody></table><p>date_add和date_sub中的interval后面可以是year,month,day,hour,second,minute</p><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>user</td><td>查询登录到mysql的有哪些用户，已经登录的IP</td></tr><tr><td>database</td><td>查询当前的数据库名称</td></tr><tr><td>md5</td><td>为字符串算出一个MD5的32位字符串，进行加密</td></tr><tr><td>password</td><td>加密函数，MySQL数据库的用户密码函数使用该函数进行加密</td></tr></tbody></table><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>if(expr1,expr2,expr3)</td><td>然后expr1为true，则返回expr2，否则返回expr3</td></tr><tr><td>ifnull(expr1,expr2)</td><td>如果expr1不为空，则返回expr1，否则返回expr2</td></tr><tr><td>when a then b when c then d else e</td><td>多分支选择</td></tr></tbody></table><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>在默认情况下，当两张表查询时，规则是从第一张表中取出一行和第二张表的每一行进行组合，返回结果。因此一共返回的记录数为两张表的行数之积，称为笛卡尔集。</p><p><strong>自连接是指在同一张表的连接查询，将同一张表看做两张表，此时需要为该表起别名才能进行操作。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp worker,emp boss; #分别取别名为worker和boss# 多列子查询，查询和Allen的deptno和job完全一样的员工select * from empwhere (deptno,job)=(select deptno,job from emp where ename='allen') and ename!='allen'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>子查询是指嵌入到其他SQL语句中的select语句，也叫嵌套查询。子查询还可以当做临时表使用。</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束用于确保数据库的数据满足特定的商业规则，在MySQL中，约束包括：not null,unique,primary key,foreign key和check五种。</p><p>如果没有指定not null，则unique字段可以有多个null。</p><p>外键(foreign key)用于定义主表和从表的之间的关系：主表约束要定义在从表上，主表则必须具有主键约束或者unique约束，要求外键列数据必须在主键列存在或者是为null。</p><p>表的类型必须是InnoDB，这样的表才支持外键。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">primary key(id,name)#复合主键#指定外键关系foreign key (class_id) references my_class(id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>check用于强制行数据必须满足的条件。Oracle和SQL server均支持check，但是MySQL5.7目前还不支持check，只做语法校验，但不会生效。在MySQL中实现check的功能，一般是在程序中控制或者通过触发器完成。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>当执行回退事务时，通过指定保存点可以回退到指定的点。</p><p>提交事务后会确认事务的变化，结束事务，删除保存点，释放锁，数据生效。当使用commit语句结束事务后，其他会话将可以查看到事务变化后的新数据。</p><p>如果不开启事务，在默认情况下，操作是自动提交的，不能回滚。</p><p>InnoDB存储引擎支持事务，MyISAM不支持。</p><p><strong>事务的特性：原子性、一致性、隔离性和持久性。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开始事务，也可以写set autocommit=offstart transaction# 设置保存点savepoint asavepoint b# 回退到a保存点,此时就无法再回退到b点，只写rollback的话直接回退到事务开始的状态rollback to a# 提交操作，此时不可以回退commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。如果不考虑隔离性，可能会导致：脏读、不可重复读、幻读。</p><p>脏读：当一个事务读取到另一个事务<strong>尚未提交</strong>的修改时，产生脏读。</p><p>不可重复读：同一查询在同一事务中多次进行，由于其他提交事务所做的<strong>修改或删除</strong>，每次返回不同的结果集，产生不可重复读。</p><p>幻读：同一查询在同一事务中多次出现，由于其他提交事务所做的<strong>插入</strong>操作，每次返回不同的结果集，产生幻读。</p><p><strong>我希望看到的数据是我连接到数据库时的数据，而不可重复读和幻读影响了我能看到的数据，不同事务之间正常来说应该不会互相影响。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看当前MySQL的隔离级别select @@tx_isolation;# 查看系统当前隔离级别select @@global.tx_isolation# 设置控制台的隔离级别set session transaction isolation level read uncommitted# 设置系统的隔离级别set global transaction isolation level read uncommitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>MySQL默认的隔离级别是repeated read，一般情况下，没有特殊要求就没有必要修改。若要修改，可以在my.ini文件中写入transaction-isolation=想要的隔离级别</p><table><thead><tr><th>MySQL隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>加锁读</th></tr></thead><tbody><tr><td>读未提交(Read uncommitted)</td><td>√</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>读已提交(Read committed)</td><td>×</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>可重复读(Repeatable read)</td><td>×</td><td>×</td><td>×</td><td>不加锁</td></tr><tr><td>可串行化(Serializable)</td><td>×</td><td>×</td><td>×</td><td>加锁</td></tr></tbody></table><p>√表示可能出现，×表示不会出现；加锁后需要其他事务均已提交才能运行。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL的表类型由存储引擎决定，主要包括Myisam、innoDB、Memory等。</p><p>MySQL数据表主要支持六种类型，分别是：CSV、Memory、Archive、Mge_Myisam、Myisam和InnoDB，这六种又分为两类，一类为事务安全型，例如InnoDB；其余为非事务安全型，例如MyISAM和Memory。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看所有的存储引擎show engines# 修改存储引擎alter table 'tb01' engine = innodb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用引擎比较"><a href="#常用引擎比较" class="headerlink" title="常用引擎比较"></a>常用引擎比较</h3><p>Myisam不支持事务也不支持外键，但其访问速度快，对事务完整性没有要求。</p><p>InnoDB提供了具有提交、回滚和崩溃恢复能力的事物安全。但是比起Myisam，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</p><p>Memory使用存储在内存中的内容来创建表。每个Memory表只实际对应一个磁盘文件，Memory类型的表访问非常快，因为它的数据是放在内存的，而且默认使用hash索引，但是一旦MySQL服务关闭，表中的数据就会丢失掉，表的结构还在。</p><table><thead><tr><th>特点</th><th>Myisam</th><th>InnoDB</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>批量插入的速度</td><td>高</td><td>低</td><td>高，内存级别</td><td>非常高</td></tr><tr><td>事务安全</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>表级</td><td>行锁</td><td>表锁</td><td>行锁</td></tr><tr><td>存储限制</td><td>没有</td><td>64TB</td><td>有</td><td>没有</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>哈希索引</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>集群索引</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>数据缓存</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>数据可压缩</td><td>支持</td><td></td><td></td><td>支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td></td><td>非常低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td><td>低</td></tr><tr><td>支持外键</td><td></td><td>支持</td><td></td><td></td></tr></tbody></table><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义，其数据来自于对应的真实表(基表)。创建视图后到数据库去看，对应视图只有一个视图结构文件，而没有数据文件。</p><p>视图的数据变化会影响到基表，基表的数据变化也会影响视图。</p><p>视图中仍可以生成视图。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建视图emp_view01，只能查询emp表的empno、ename、job和deptno信息create view emp_view as select empno,ename,job,deptno from emp;# 查看视图select empno,job from emp_view# 查看创建视图的指令show create view emp_view01# 删除视图drop view emp_view01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二十章-jdbc和连接池"><a href="#第二十章-jdbc和连接池" class="headerlink" title="第二十章 jdbc和连接池"></a>第二十章 jdbc和连接池</h1><p>jdbc为访问不同的数据库提供了统一的接口，为使用者屏蔽了细节问题。java程序员使用jdbc，可以连接任何提供了jdbc驱动程序的数据库系统，从而完成对数据库的各种操作。</p><p>jdbc的API是一系列的接口，它统一和规范了应用程序和数据库的连接、执行SQL语句，并得到返回结果等各类操作，相关类和接口在java.sql和javax.sql包中。</p><p>jdbc程序编写步骤：注册驱动，加载Driver类；获取连接，得到Connection；执行增删改查，发生SQL给数据库执行；释放资源，关闭相关连接。</p><p><strong>mysql的连接本质上是socket连接。</strong></p><p><strong>jdbc连接MySQL时，如果要使用批处理功能，需要在URL中加参数<code>?rewriteBatchedStatements=true</code>。</strong></p><p>批处理往往和PreparedStatement一起搭配使用，既可以减少编译次数，又减少运行次数，效率大大提高。</p><p>遇到异常时，可以使用<code>throw new RuntimeException(e);</code>将其转换为运行异常。</p><p><strong>新建Propertises文件时选择文件类型为Text即可。</strong></p><p>BasicDao是专门和数据库交互的，即完成对数据库的crud操作。在BasicDao的基础上，实现一张表对应一个Dao，更好的完成功能，比如Customer表-Customer.java类-CustomerDao.java。</p><p>声明使用可变参数可以使用省略号，例如<code>Object... parameters</code>。</p><p><strong>idea注释中的作者和版本信息都会对程序运行有影响。</strong></p><p>进行多表查询时，增加来自另一张表的属性需要和原来表的属性名保持一致，因为底层会通过列名来调用set方法进行赋值，或者在SQL语句中通过取别名的方法解决。</p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p>使用PreparedStatement进行预处理可以解决Statement的SQL注入问题。PreparedStatement不再使用加号拼接SQL语句，而是使用占位符和set方法，有效解决了SQL注入问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select name from class where name = ? and pwd = ?"</span><span class="token punctuation">;</span><span class="token comment">//？作为占位符</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>admin_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给第一个？号处填入值</span><span class="token comment">//由于前面已经填了，此处不需要再填入sql</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h2><p>ResultSet表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。ResultSet对象保存一个光标指向其当前的数据行，光标在最初位于第一行之前，next方法可以将光标移动到下一行，当对象没有更多行时会返回false，因此可以使用while循环进行遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from class"</span><span class="token punctuation">;</span><span class="token comment">//执行SQL语句，返回单个的ResultSet对象</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第一列的数据</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getNString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id是"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">";班级是"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//4.关闭连接</span>resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jdbc操作数据库"><a href="#jdbc操作数据库" class="headerlink" title="jdbc操作数据库"></a>jdbc操作数据库</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先将jar文件加入到项目中，并右键选择“添加到库”</span><span class="token comment">//1.注册驱动</span><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.得到连接，表示通过jdbc的方式连接mysql，localhost表示主机，可以使用ip地址，</span><span class="token comment">//3306是监听的端口，day27db是连接的数据库，高版本的mysql包需要写上?serverTimezone=UTC</span><span class="token comment">//mysql的连接本质上是socket连接</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/day27db?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token comment">//将用户名和密码放入到Properties对象中</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user和password是规定好的，后面的值根据实际情况填写</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//密码</span><span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.执行SQL语句</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into class values(null,'数学')"</span><span class="token punctuation">;</span><span class="token comment">//用于执行静态SQL语句并返回其生成的结果的对象</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> row <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是dml语句，返回影响的行数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.关闭连接</span>statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p>MySQL驱动在5.1.6之后可以无需<code>Class.forName("com.mysql.jdbc.Driver")</code>。从jdk1.5以后使用了jdbc4，不需要显式调用该方法注册驱动，而是自动调用驱动jar包下META-INF\services\java.sql.Driver文本中的类名去注册。</p><p>本质上只有两种连接方式：静态加载和动态加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式1，创建Driver对象，静态加载</span><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式2，使用反射加载Driver类，动态加载，更加灵活，减少依赖性</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span>aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式3，使用DriverManager替代Driver进行统一管理</span><span class="token comment">//先获取Driver对象，然后传入URL，用户名和密码</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册Driver驱动</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManage</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式4，如果使用了Class.forName方法则会自动完成注册驱动，可以省略registerDriver的步骤，这是最推荐使用的</span><span class="token comment">//方式5则是在方式4上进行改进，使用配置文件</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.propertises"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p><img src="/09/20/java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/han-shun-ping-ling-ji-chu-30-tian-xue-hui-java/ff73ede308799b2baad8f194c544c270.png" alt="每日工作计划_副本.png"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>传统的jdbc数据库连接使用DriverManager来获取，每次向数据库建立连接的时候都要将Connection加载到内存中，再验证IP地址，用户名和密码。需要数据库连接的时候，就向数据库要求一个，频繁的进行数据库连接操作将占用很多的系统资源，容易造成服务器崩溃。</p><p>每一次数据库连接，使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄露，最终导致重启数据库。为解决传统开发中的数据库连接问题，可以采用 数据库连接池技术。</p><p><strong>数据库连接池预先在缓冲区放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕后放回去。连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立。</strong></p><h3 id="常见连接池"><a href="#常见连接池" class="headerlink" title="常见连接池"></a>常见连接池</h3><p>jdbc的数据库连接池使用javax.sql.DataSource来表示，DataSource只是一个接口，该接口由第三方提供实现。</p><table><thead><tr><th>连接池</th><th>特点</th></tr></thead><tbody><tr><td>C3P0</td><td>速度相对较慢，稳定性不错，hibernate和spring使用</td></tr><tr><td>DBCP</td><td>速度相对C3P0较快，但不稳定</td></tr><tr><td>Proxool</td><td>有监控连接池状态的功能，稳定性较C3P0差一点</td></tr><tr><td>BoneCP</td><td>速度快</td></tr><tr><td>Druid(德鲁伊)</td><td>来自阿里，集上面的优点于一身</td></tr></tbody></table><h3 id="连接池使用"><a href="#连接池使用" class="headerlink" title="连接池使用"></a>连接池使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将c3p0提供的c3o0.config.xml拷贝到src目录下，该文件指定了数据库和连接池的相关参数</span><span class="token class-name">ComboPooledDataSource</span> comboPooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"hsp_edu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填入数据源名称</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> comboPooledDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.加入Druid的jar包和配置文件druid.properties，将该文件拷贝到项目的src目录</span><span class="token comment">//2.创建Properties对象，读取配置文件</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.创建一个指定参数的数据库连接池</span><span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><p><strong>关闭connection后，resultSet结果集无法使用，而且resultSet不利于数据的管理。</strong></p><p>commons-dbutils是Apache组织提供的一个开源JDBC工具类库，它是对JDBC的封装，使用dbutils能极大简化jdbc编程的工作量。</p><p>QueryRunner类：封装了SQL的执行，是线程安全的。可以实现增、删、改、查、批处理。</p><p>ResultSetHandler接口：用于处理java.sql.ResultSet，将数据按要求转换为另一种形式。</p><p>一定要给java类一个无参构造器，可能反射会需要。</p><p>int,double等在java中都使用包装类，因为mysql中所有类型都可能是null，而只有java是引用类型才有null值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//DBUtils使用</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtilsByDruid</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from course where cid &gt;= ?"</span><span class="token punctuation">;</span><span class="token comment">//new BeanListHandler&lt;&gt;(Actor.class):将resultSet-&gt;Actor对象-&gt;封装到ArrayList，底层会使用反射机制</span><span class="token comment">//参数1是填入到SQL中的问号</span><span class="token comment">//底层得到的resultSet和PreparedStatement会在query方法中关闭</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Actor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Actor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Actor</span> actor <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">JDBCUtilsByDruid</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>ArrayHandler</td><td>将结果集中的第一行数据转成对象数组</td></tr><tr><td>ArrayListHandler</td><td>将结果集中的每一行数据都转成一个数组，再存放到List中</td></tr><tr><td>BeanHandler</td><td>将结果集中的第一行数据封装到一个对应的javaBean实例中</td></tr><tr><td>BeanListHandler</td><td>将结果集中的每一行都封装到一个对应的javaBean实例中，存放到List中</td></tr><tr><td>ColumnListHandler</td><td>将结果集中某一列的数据存放到List中</td></tr><tr><td>KeyedHandler(name)</td><td>将结果集中每行的数据都封装到Map里，再把这些map存到另一个Map里，其key为指定的key</td></tr><tr><td>MapHandler</td><td>将结果集中第一行的数据都封装到Map里，key是列名，value是对应的值</td></tr><tr><td>MapListHandler</td><td>将结果集中每行的数据都封装到Map里，然后存放到List</td></tr><tr><td>ScalarHandler</td><td>返回单行单列，一个object对象</td></tr></tbody></table><h1 id="第二十一章-正则表达式"><a href="#第二十一章-正则表达式" class="headerlink" title="第二十一章 正则表达式"></a>第二十一章 正则表达式</h1><p><strong>在java的正则表达式中，两个<code>\\</code>代表其他语言中的一个\。</strong>而需要用到转义字符的有：<code>.*()$/\?[]^{}</code>。</p><p><strong>正则表达式可以使用括号进行分组，group(0)表示匹配到的字符串，group(n)表示返回对应的分组。</strong></p><p>java匹配默认贪婪匹配，即尽可能多的匹配。</p><p>分组的内容被捕获后，可以在这个括号后被使用，从而写出比较实用的匹配模式，这个被称作反向引用。这种引用可以在正则表达式内部，也可以是外部，内部反向引用使用\\分组号，外部引用使用$分组号。</p><p>字符串配合正则表达式使用replaceAll、matches和split方法可以提高效率。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先创建一个Pattern对象，模式对象，可以理解为就是一个正则表达式对象</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z+]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个匹配器对象</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//content是需要匹配的文本</span><span class="token comment">//开始循环匹配</span><span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//匹配内容和文本会放在matcher.group()</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到"</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//捕获命名分组，(?&lt;name&gt;pattern)</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"?(&lt;name1&gt;\\d\\d)(?&lt;name2&gt;\\d\\d)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token comment">//应用实例</span><span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">"^[\u0391-\uffe5]+$"</span><span class="token punctuation">;</span><span class="token comment">//匹配汉字</span><span class="token keyword">boolean</span> matches <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regStr<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态方法进行整体匹配，而不是其中一部分</span><span class="token comment">//匹配五个连续相同的数字，相当于"(//d)//1//1///1//1"，意思是后面的元素与第一分组的内容相同</span><span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">"(\\d)\\1{4}"</span><span class="token punctuation">;</span><span class="token comment">//匹配四位长度的回文数字,意思是先与第2分组相同，再与第1分组相同</span><span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">"(\\d)(\\d)\\2\\1"</span><span class="token punctuation">;</span>content <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反向引用使用第1分组的内容进行替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串匹配符"><a href="#字符串匹配符" class="headerlink" title="字符串匹配符"></a>字符串匹配符</h2><p><a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程字符串匹配符</a></p><table><thead><tr><th>字符</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>.</td><td>匹配处\n以外的任意字符</td><td>a..b</td><td>以a开头，b结尾，中间包括两个任意字符为4的字符串</td><td>aaab,a35b</td></tr><tr><td>[]</td><td>可接收的字符列表，特殊符号将按照本身进行匹配</td><td>[efg?.]</td><td>e,f,g,?和.中的任意一个字符</td><td>.,?,e</td></tr><tr><td>[^]</td><td>不接收的字符列表</td><td>[^efg]</td><td>除e,f,g的任意一个字符</td><td>a</td></tr><tr><td>-</td><td>连字符</td><td>A-Z</td><td>任意大写字母</td><td>A</td></tr><tr><td>|</td><td>选择匹配符，匹配’|’之前或之后的表达式</td><td>ab|cd</td><td>ab或cd</td><td>ab</td></tr><tr><td>*</td><td>指定字符重复0次或n次</td><td>(abc)*</td><td>仅包含任意个abc的字符串，等效于\w*</td><td>abcabc</td></tr><tr><td>+</td><td>指定字符重复1次或n次</td><td>m+(abc)*</td><td>以至少一个m开头，后接任意个abc的字符串</td><td>m</td></tr><tr><td>?</td><td>指定字符重复0次或1次，当此字符紧随其他限定符(*,+,?,{n},{n,},{n,m})之后，则表示采用非贪婪匹配</td><td>m+abc？</td><td>以至少一个m开头，后接ab或abc的字符串</td><td>mab</td></tr><tr><td>^</td><td>指定起始字符</td><td>^[0-9]+[a-z]*</td><td>以至少一个数字开头，后接任意个小写字母的字符串</td><td>123dsd，而a123dsd就不能匹配</td></tr><tr><td>$</td><td>指定结束字符</td><td>^[0-9]\-[a-z]+$</td><td>以1个数字开头后接连字符‘-’，并以至少一个小写字母结尾的字符串</td><td>1-a</td></tr><tr><td>{n}</td><td>接收n个字符</td><td>[abcd]{3}</td><td>由abcd中字母组成的任意长度为3的字符串</td><td>abc</td></tr><tr><td>{n,}</td><td>指定至少n个匹配</td><td>[abcd]{3,}</td><td>由abcd中字母组成的任意长度不小于3的字符串</td><td>abaaaaa</td></tr><tr><td>{n,m}</td><td>指定至少n个但不多于m个匹配</td><td>[abcd]{3,5}</td><td>由abcd中字母组成的任意长度不小于3，不大于5的字符串</td><td>aaaa</td></tr><tr><td>\\d</td><td>匹配单个数字字符，相当于[0-9]</td><td>\\d{3}(\\d)?</td><td>包含3个或4个数字的字符串</td><td>123，7895</td></tr><tr><td>\\D</td><td>匹配单个非数字字符，相当于[^0-9]</td><td>\\D(\\d)*</td><td>以单个非数字字符开头，后接任意个数字字符</td><td>a，A345</td></tr><tr><td>\\w</td><td>匹配单个数字、大小写字母字符，相当于[0-9a-zA-Z]</td><td>\\d{3}\\w{4}</td><td>以3个数字字符开头的长度为7的数字字母字符串</td><td>234abcd</td></tr><tr><td>\\W</td><td>匹配单个非数字、大小写字母字符，相当于[^0-9a-zA-Z]</td><td>\\W+\\d{2}</td><td>以至少一个非数字字母字符开头，2个数字字符结尾的字符串</td><td>#29</td></tr><tr><td>\\s</td><td>匹配任意空白字符(空格、制表符等)</td><td>\\s</td><td>任意空白字符</td><td>一个空格</td></tr><tr><td>\\S</td><td>匹配任意非空白字符</td><td>\\S</td><td>任意非空白字符</td><td>A</td></tr><tr><td>\\b</td><td>匹配目标字符串的边界</td><td>han\\b</td><td>字符串的边界指的是子串之间有空格，或者是目标字符串的结束位置</td><td>hanshun<strong>han</strong> nn <strong>han</strong></td></tr><tr><td>\\B</td><td>匹配目标字符串的非边界</td><td>han\\B</td><td>与\\b的含义相反，匹配北边界的han</td><td><strong>han</strong>shunhan nnhan</td></tr></tbody></table><h3 id="大小写区分"><a href="#大小写区分" class="headerlink" title="大小写区分"></a>大小写区分</h3><p>java正则表达式默认区分字母大小写，如何实现不区分大小写。</p><ul><li>(?i)abc表示都不区分大小写</li><li>a(?i)abc表示bc不区分大小写</li><li>a((?i)b)c表示只有b不区分大小写</li><li>Pattern pat = Pattern.compile(regEx,Pattern.CASE_INSENSITIVE);</li></ul><h2 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h2><p>非捕获分组的意思是只是进行了匹配，并没有获取该分组子表达式的值，即不能通过group(n)等获取该分组的值。</p><table><thead><tr><th>构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(?:pattern)</td><td>匹配pattern但不捕获该匹配式的子表达式，不存储供以后使用的匹配。该形式对于用”or”字符(|)组合模式部件的情况很有用，例如”韩顺平(?:学习</td></tr><tr><td>(?=pattern)</td><td>“Windows(?=95|98</td></tr><tr><td>(?!pattern)</td><td>和第二个模式取反，该模式不匹配括号内的字符。</td></tr></tbody></table><h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>matches</td><td>整体匹配，返回一个布尔值</td></tr><tr><td>start</td><td>返回匹配的开始索引</td></tr><tr><td>end</td><td>返回匹配的结束索引，对应位置的后一位</td></tr><tr><td>replaceAll(oldStr)</td><td>返回一个替换后的结果</td></tr></tbody></table><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h3 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> 数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$<span class="token number">2</span> n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">{</span>n<span class="token punctuation">}</span>$<span class="token number">3</span> 至少n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span>$<span class="token number">4</span> m<span class="token operator">-</span>n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">{</span>m<span class="token punctuation">,</span>n<span class="token punctuation">}</span>$<span class="token number">5</span> 零和非零开头的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$<span class="token number">6</span> 非零开头的最多带两位小数的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">7</span> 带<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>位小数的正数或负数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">8</span> 正数、负数、和小数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token operator">|</span>\<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">9</span> 有两位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">10</span> 有<span class="token number">1</span><span class="token operator">~</span><span class="token number">3</span>位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">11</span> 非零的正整数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>$ 或 <span class="token operator">^</span>\<span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$<span class="token number">12</span> 非零的负整数：<span class="token operator">^</span>\<span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>"<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token number">13</span> 非负整数：<span class="token operator">^</span>\d<span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token number">14</span> 非正整数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">15</span> 非负浮点数：<span class="token operator">^</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token number">16</span> 非正浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token number">17</span> 正浮点数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">18</span> 负浮点数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">19</span> 浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> 汉字：<span class="token operator">^</span><span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span>$<span class="token number">2</span> 英文和数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span>$<span class="token number">3</span> 长度为<span class="token number">3</span><span class="token operator">-</span><span class="token number">20</span>的所有字符：<span class="token operator">^</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span>$<span class="token number">4</span> 由<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">5</span> 由<span class="token number">26</span>个大写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">6</span> 由<span class="token number">26</span>个小写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">7</span> 由数字和<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">8</span> 由数字、<span class="token number">26</span>个英文字母或者下划线组成的字符串：<span class="token operator">^</span>\w<span class="token operator">+</span>$ 或 <span class="token operator">^</span>\w<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span>$<span class="token number">9</span> 中文、英文、数字包括下划线：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9_</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">10</span> 中文、英文、数字但不包括下划线等符号：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span><span class="token class-name">Za</span><span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span>$<span class="token number">11</span> 可以输入含有<span class="token operator">^</span><span class="token operator">%</span><span class="token operator">&amp;</span>'<span class="token punctuation">,</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">?</span>$\"等字符：<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">%</span><span class="token operator">&amp;</span>'<span class="token punctuation">,</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">?</span>$\x22<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">12</span> 禁止输入含有<span class="token operator">~</span>的字符：<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">~</span>\x22<span class="token punctuation">]</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token class-name">Email</span>地址：<span class="token operator">^</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>\<span class="token punctuation">.</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>$<span class="token number">2</span> 域名：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">.</span>?<span class="token number">3</span> <span class="token class-name">InternetURL</span>：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token punctuation">]</span><span class="token operator">*</span> 或 <span class="token operator">^</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">.</span>/<span class="token operator">?</span><span class="token operator">%</span><span class="token operator">&amp;=</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">4</span> 手机号码：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">14</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">15</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">18</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span>$<span class="token number">5</span> 电话号码<span class="token punctuation">(</span><span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXXX-XXXXXXXX"</span>、<span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXX-XXXXXXXX"</span>、<span class="token string">"XXXXXXX"</span>和"XXXXXXXX<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">|</span>\d<span class="token punctuation">{</span><span class="token number">3.4</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>$ <span class="token number">6</span> 国内电话号码<span class="token punctuation">(</span><span class="token number">0511</span><span class="token operator">-</span><span class="token number">4405222</span>、<span class="token number">021</span><span class="token operator">-</span><span class="token number">87888822</span><span class="token punctuation">)</span>：\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">|</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token number">7</span> 身份证号：<span class="token number">15</span>或<span class="token number">18</span>位身份证：<span class="token operator">^</span>\d<span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token operator">|</span>\d<span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span>$<span class="token number">15</span>位身份证：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span>\d<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">]</span>\d<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>$<span class="token number">18</span>位身份证：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span>\d<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">]</span>\d<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span>$<span class="token number">8</span> 短身份证号码<span class="token punctuation">(</span>数字、字母x结尾<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">(</span>x<span class="token operator">|</span><span class="token class-name">X</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span>\d<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>x<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>X<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token operator">?</span>$<span class="token number">9</span> 帐号是否合法<span class="token punctuation">(</span>字母开头，允许<span class="token number">5</span><span class="token operator">-</span><span class="token number">16</span>字节，允许字母数字下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9_</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span>$<span class="token number">10</span> 密码<span class="token punctuation">(</span>以字母开头，长度在<span class="token number">6</span><span class="token operator">~</span><span class="token number">18</span>之间，只能包含字母、数字和下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span>\w<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">}</span>$<span class="token number">11</span> 强密码<span class="token punctuation">(</span>必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="token number">8</span><span class="token operator">-</span><span class="token number">10</span>之间<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span>*\d<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span>*<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span>*<span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>$ <span class="token number">12</span> 日期格式：<span class="token operator">^</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token number">13</span> 一年的<span class="token number">12</span>个月<span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">12</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token number">14</span> 一个月的<span class="token number">31</span>天<span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">31</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">30</span><span class="token operator">|</span><span class="token number">31</span><span class="token punctuation">)</span>$ <span class="token number">15</span> 钱的输入格式：<span class="token number">16</span> <span class="token number">1.</span>有四种钱的表示形式我们可以接受<span class="token operator">:</span><span class="token string">"10000.00"</span> 和 <span class="token string">"10,000.00"</span><span class="token punctuation">,</span> 和没有 <span class="token string">"分"</span> 的 <span class="token string">"10000"</span> 和 <span class="token string">"10,000"</span>：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">17</span> <span class="token number">2.</span>这表示任意一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">,</span>但是<span class="token punctuation">,</span>这也意味着一个字符<span class="token string">"0"</span>不通过<span class="token punctuation">,</span>所以我们采用下面的形式：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">18</span> <span class="token number">3.</span>一个<span class="token number">0</span>或者一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">.</span>我们还可以允许开头有一个负号：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">19</span> <span class="token number">4.</span>这表示一个<span class="token number">0</span>或者一个可能为负的开头不为<span class="token number">0</span>的数字<span class="token punctuation">.</span>让用户以<span class="token number">0</span>开头好了<span class="token punctuation">.</span>把负号的也去掉<span class="token punctuation">,</span>因为钱总不能是负的吧<span class="token punctuation">.</span>下面我们要加的是说明可能的小数部分：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">20</span> <span class="token number">5.</span>必须说明的是<span class="token punctuation">,</span>小数点后面至少应该有<span class="token number">1</span>位数<span class="token punctuation">,</span>所以<span class="token string">"10."</span>是不通过的<span class="token punctuation">,</span>但是 <span class="token string">"10"</span> 和 <span class="token string">"10.2"</span> 是通过的：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">21</span> <span class="token number">6.</span>这样我们规定小数点后面必须有两位<span class="token punctuation">,</span>如果你认为太苛刻了<span class="token punctuation">,</span>可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">22</span> <span class="token number">7.</span>这样就允许用户只写一位小数<span class="token punctuation">.</span>下面我们该考虑数字中的逗号了<span class="token punctuation">,</span>我们可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">23</span> <span class="token number">8.1</span>到<span class="token number">3</span>个数字<span class="token punctuation">,</span>后面跟着任意个 逗号<span class="token operator">+</span><span class="token number">3</span>个数字<span class="token punctuation">,</span>逗号成为可选<span class="token punctuation">,</span>而不是必须：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">24</span> 备注：这就是最终结果了<span class="token punctuation">,</span>别忘了<span class="token string">"+"</span>可以用<span class="token string">"*"</span>替代如果你觉得空字符串也可以接受的话<span class="token punctuation">(</span>奇怪<span class="token punctuation">,</span>为什么<span class="token operator">?</span><span class="token punctuation">)</span>最后<span class="token punctuation">,</span>别忘了在用函数时去掉去掉那个反斜杠<span class="token punctuation">,</span>一般的错误都在这里<span class="token number">25</span> xml文件：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>x<span class="token operator">|</span><span class="token class-name">X</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">|</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">|</span><span class="token class-name">L</span><span class="token punctuation">]</span>$<span class="token number">26</span> 中文字符的正则表达式：<span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span><span class="token number">27</span> 双字节字符：<span class="token punctuation">[</span><span class="token operator">^</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span> <span class="token punctuation">(</span>包括汉字在内，可以用来计算字符串的长度<span class="token punctuation">(</span>一个双字节字符长度计<span class="token number">2</span>，ASCII字符计<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">28</span> 空白行的正则表达式：\n\s<span class="token operator">*</span>\r <span class="token punctuation">(</span>可以用来删除空白行<span class="token punctuation">)</span><span class="token number">29</span> HTML标记的正则表达式：<span class="token operator">&lt;</span><span class="token punctuation">(</span>\<span class="token class-name">S</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>*<span class="token operator">?</span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token punctuation">.</span>*<span class="token operator">?</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力<span class="token punctuation">)</span><span class="token number">30</span> 首尾空白字符的正则表达式：<span class="token operator">^</span>\s<span class="token operator">*</span><span class="token operator">|</span>\s<span class="token operator">*</span>$或<span class="token punctuation">(</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>\s<span class="token operator">*</span>$<span class="token punctuation">)</span> <span class="token punctuation">(</span>可以用来删除行首行尾的空白字符<span class="token punctuation">(</span>包括空格、制表符、换页符等等<span class="token punctuation">)</span>，非常有用的表达式<span class="token punctuation">)</span><span class="token number">31</span> 腾讯QQ号：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>腾讯QQ号从<span class="token number">10000</span>开始<span class="token punctuation">)</span><span class="token number">32</span> 中国邮政编码：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>\d<span class="token punctuation">)</span> <span class="token punctuation">(</span>中国邮政编码为<span class="token number">6</span>位数字<span class="token punctuation">)</span><span class="token number">33</span> IP地址：\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span> <span class="token punctuation">(</span>提取IP地址时有用<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java基础 </tag>
            
            <tag> java学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安游记</title>
      <link href="/2022/07/07/qi-ta/xi-an-you-ji/"/>
      <url>/2022/07/07/qi-ta/xi-an-you-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><p><strong>路线：陕西省博物馆-钟楼-鼓楼-城墙-回民街</strong></p><p>作为一个有点恐高的人而言，第一次坐飞机有点紧张，其实飞机很平稳，上升过程中就像是坐车一样。而且从飞机上俯瞰地面的感觉很奇妙，是一种很特殊的感觉，后面到一定高度之后就被云层遮挡了。偶尔遇到气流有点颠簸的时候还是有点紧张的。然后一下飞机就把身份证弄丢了（囧），当时还是很紧张的，毕竟到了一个陌生的地方把身份证弄不见了，怕影响后面的旅游，也由于这个小插曲导致凌晨两点才到的酒店。不过西安还是很不错的，可以通过报身份证号+面部识别来解决，不用太担心。不过回到家我就马上去补办身份证了，身份证还是很重要的，大家要注意存放。</p><p>然后8点起来，然后去吃了个胡辣汤，感觉还行，只是不太喜欢里面的木薯粉。后来被告知这个是河南口味的胡辣汤，西安的胡辣汤和河南的胡辣汤最大的区别就在于河南的是肉片，而西安的是肉丸，其实风味和原料也挺大差别。河南口味的可以吃逍遥镇的，西安的话推荐邢老三，个人觉得河南口味可以更容易接受，虽然我更喜欢西安口味的。早晨吃完就准备去逛省博，省博里面还是非常有意思的，逛前面三个馆把全部历史进程看一遍就好，剩下的馆要不是要钱的，要不在维护。要钱的馆如果有兴趣的话，也可以逛一下，我们逛了一个，其实和前3个免费的馆差不多，感觉不是很值的逛。而且逛完一个馆基本就半天时间了，其实也挺累的，所以个人推荐逛前三个馆即可。然后我们是在馆内的餐厅吃了一顿，还行。</p><p>然后回去酒店休息，休息完了就去逛钟鼓楼，就普通的历史建筑，个人推荐晚上观赏，灯亮起来会好看很多。然后就去城墙，多亏了缺德导航，本来一个地铁站的距离，硬是带着我们逛了一个小时，真的服啦。城墙真的很壮观，我们在上面逛了很久才走了一小部分，感觉这才是真正的城墙，可以租个单车骑，这样会轻松一点。接着去回民街找吃的，本来想吃羊肉泡馍的，阴差阳错整了个小炒泡馍，真的吃不惯，这个辣的很奇怪，是一种浑浊的辣，辣味混合了馍的淀粉感，总之就是吃不惯。然后还尝了马军的爆辣牛筋丸，老板问爆辣还是微辣，同伴直接说爆辣，一颗直接给我辣哭了，感觉我的舌头在燃烧，头皮发麻，一瓶怡宝顿顿顿地灌。本来还想再逛逛回民街的，想了想还是直接会酒店休息了。半夜还流鼻血了，难顶，酒店的被子都滴上鼻血了。本来酒店还要我们赔钱的，后来清理干净了，又不用了，省了一笔钱。</p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><p><strong>路线：兵马俑-华清宫-骊山-长恨歌</strong></p><p>早早起床搭车去兵马俑，这个一定要去找解说，不然会很无聊的，毕竟兵马俑你不了解的话，他就是一个土块。而且解说也不贵，通常是一个团的形式，所以一定要找解说。兵马俑一定要去看一次，感受一下历史的厚重感和感受古人的智慧，不过一次就够了。逛完还会带了去一个买蓝田玉的地方，真假我就不知道，本来想买一个给我妈，但我妈担心我被骗就没买了。然后就去吃饭，去了魏家凉皮，就跟KFC和麦当劳一样的连锁店，买西安小吃的，味道不错，结果也不是很贵。这天比较难绷的是逛完兵马俑就一直流鼻血，可能是天气太干燥了，一直停不下来，搞得我吃了一个凉皮花了一个小时。然后去逛华清宫，个人不推荐逛，挺无聊的，就是普通的地方，没什么特色。然后搭车逛骊山，刚好日落时分，从骊山拍照还真的很不错，挺好看的，骊山号称西安秋名山，山上还有个藤原豆腐店和汽车模型，蛮要意思的。然后下山去看长恨歌，就是和长恨歌内容对应的歌舞表演和灯光秀，个人感觉还行，票有点贵，对这个不感兴趣的可能会觉得有点亏。然后同伴亲戚带我们去吃海鲜烧烤，真不错，很特别，吃得很开心。</p><h1 id="day3-amp-day4"><a href="#day3-amp-day4" class="headerlink" title="day3&amp;day4"></a>day3&amp;day4</h1><p><strong>路线：华山-大雁塔-大唐不夜城-串串</strong></p><p>睡到自然醒就起来，由于前两天逛得太厉害了，而且昨晚又是两点才睡，本来以为能够顶得住的，还是太高估自己和低估华山的难度了。可以先坐地铁到北客站，然后搭高铁到华山北，可以搭黑车到华山，不用绕路，我们搭公交绕的有点远。终于到达华山后，就是漫长的爬山过程，太累了，可是爬上去之后往后看自己走过的路的感觉还是很奇妙的。如果想看日出的话，推荐下午4点开始爬，这个时候温度比较低，爬起来比较舒服，如果可以接受夜爬的话，可以7点开始爬，刚好上到东峰就可以看到日出了。当时爬了一段时间后就开始很累了，这时就觉得有点不对劲了，到晚上11点都还是没有爬到东峰，而且听说东峰风很大，所以我们就近租了个帐篷先休息一下，准备凌晨3点起床继续爬。从帐篷往外望还是很好看的，可以看到繁星点点。睡完一觉后舒服了不少，洗个脸就进行爬，然后流鼻血了，麻了。只好继续待在帐篷内等日出了，不敢继续往上爬了，担心身体受不了。幸好在这个地方观赏日出也不错，看着太阳缓慢的从云层中穿出是一种很不错的体验。然后就去西峰坐索道下山，从索道看华山又是不一样的体验，完全值回票价。比较遗憾的是没能登上东峰，没有去看看长空栈道，还是挺可惜的。建议爬华山前一天好好休息，养好精神，而且平时运动较少的不推荐爬华山，因为对体能要求还挺高的。下山后第一个念头就是赶紧会酒店休息，真的太TM累了，回到酒店直接从中午2点睡到下午6点，然后去看大雁塔和音乐喷泉，还不错，然后逛了逛大唐不夜城，值得一逛。然后同伴亲戚带我们去吃串串，我觉得跟火锅差不多，就是把菜提前串号，然后算签数来算钱。比较特别的是油碗没有酱油可选，还挺惊讶的。吃完就回酒店了。</p><h1 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h1><p>最后一天是闲逛的一天，去吃西安口味的胡辣汤，然后会酒店休息和收拾东西，准备回家。中午去赛格逛了一下，吃了毛笔酥，还行。感觉逛赛格挺无聊，就看一下瀑布，里面买的东西都没啥兴趣，不过我平时也不太喜欢逛商场。然后去逛了一些小雁塔和西安博物馆，跟陕西博物馆还是有很多不一样的地方，如果比较闲的话可以逛一下。然后去书院门买手信，没有挑到喜欢的，决定还是买点吃的算了。然后继续逛街，吃搅团和鱼鱼，完全吃不习惯，太怪了。还去尝了一些羊肉泡馍，羊肉很好吃，但是还是吃不惯泡馍。买了黄桂柿子饼、biangbiang面、油泼辣子和凉皮作为特产就回去了。</p><p>感觉西安是个好地方，以后有机会的话还会再去一遍，希望能爬上东峰，体验一下长空栈道。感觉西安的传统小吃可能不太符合我们南方人的口味，不过对与旅游，我一向是秉持着”宁愿吃难吃但正宗的，不吃好吃但不正宗的“，毕竟旅游就是体验不同的地方嘛。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信云开发</title>
      <link href="/2022/06/19/bian-cheng/wei-xin-yun-kai-fa/"/>
      <url>/2022/06/19/bian-cheng/wei-xin-yun-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h2><p>今天学会了在微信开发中如何对数据库进行增删改查，和进行页面之间的跳转，还有数据之间的传递。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'goods'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span>goodname<span class="token punctuation">,</span>                    <span class="token literal-property property">price</span><span class="token operator">:</span>price                <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ID传递"><a href="#ID传递" class="headerlink" title="ID传递"></a>ID传递</h2><p>data-id与后面获取的变量名id相对应</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>goDetail<span class="token punctuation">'</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{item._id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>商品名：{{item.name}},价格：{{item.price}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">&gt;</span></span>console.log("点击了跳转商品详情",event.currentTarget.dataset.id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>在app.json中的pages新增页面，页面的次序是有影响的</strong></p><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'goods'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><br><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><p>通过封装方法，使用this进行调用，在使用<strong>this时要注意所在的作用域</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用全局变量来传递值，可以使用let，也可以使用var变量</p><p>可以在updated中的status中看出是否有更新成功，在对数据库进行操作时要注意权限问题</p><p>使用return截断错误，方便调试</p><p><strong>接受数字小心是字符串，可以通过是否变蓝看出，可以使用parseInt(price)来进行强制转换</strong></p><p>可以使用变量接收数据库对象，来方便操作</p><p>限制返回的数据条数<code>.limit(3)</code></p><p>跳过若干条数据，用于分页<code>.skip(1)</code></p><p><strong>要注意套餐所给的量，小心写，不然用完就要开新的套餐。数据库的读写次数是有限制的</strong></p><h2 id="快捷键使用"><a href="#快捷键使用" class="headerlink" title="快捷键使用"></a>快捷键使用</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+B</td><td>编译</td></tr><tr><td>Ctrl+z</td><td>撤销操作</td></tr><tr><td>Ctrl+s</td><td>保存</td></tr><tr><td>shift+Alt+方向键</td><td>向对应方向复制当前行</td></tr><tr><td>Ctrl+ALT+l</td><td>格式化代码</td></tr><tr><td>shift+Alt+f</td><td>全局搜索</td></tr><tr><td>Ctrl+f</td><td>当前页面搜索</td></tr><tr><td>Ctrl+h</td><td>查找并替换</td></tr></tbody></table><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><p>前端界面绑定方法，bindtap点击事件，bindinput输入事件，然后在后端函数中获取值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 前端页面</span><span class="token operator">&lt;</span>input bindinput<span class="token operator">=</span><span class="token string">"getPrice"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">&gt;</span><span class="token comment">// 后端页面</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弹窗提示确认是否删除"><a href="#弹窗提示确认是否删除" class="headerlink" title="弹窗提示确认是否删除"></a>弹窗提示确认是否删除</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">cancelColor</span><span class="token operator">:</span> <span class="token string">'cancelColor'</span><span class="token punctuation">,</span>          <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"是否确定删除"</span><span class="token punctuation">,</span>          <span class="token literal-property property">content</span><span class="token operator">:</span><span class="token string">"您再仔细想一想，是否真的要删除，删除后不可恢复"</span><span class="token punctuation">,</span>          <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>confirm<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//用户点击了确认</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击确定'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>cancel<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//用户点击了取消</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击取消'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/pages/demo1/demo1'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="升序排列"><a href="#升序排列" class="headerlink" title="升序排列"></a>升序排列</h2><p>asc表示升序，desc为降序，前面是关键字</p><pre class="line-numbers language-none"><code class="language-none">.orderBy("price",'asc')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="command命令筛选"><a href="#command命令筛选" class="headerlink" title="command命令筛选"></a>command命令筛选</h2><p>可以在微信开放文档<a href="https://">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/Command.html</a>中查看具体，常见的有gt大于，lt小于,gte大于等于</p><p>还可以使用and关键字设置多个查找条件，要注意格式and([]),[]中用{}包裹筛选条件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">price</span><span class="token operator">:</span>db<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 组合查找</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token literal-property property">price</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//大于10</span>        <span class="token punctuation">{</span>            <span class="token literal-property property">price</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//小于20</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h2><h3 id="初始化云函数"><a href="#初始化云函数" class="headerlink" title="初始化云函数"></a>初始化云函数</h3><p>新增的文件夹一定要与pages平级，可以先点击与pages平级的文件，再点击新增文件夹，命名为cloud，或者在云函数列表中右键新增node.js云函数</p><p>在project.config.json文件顶部配置云函数所在目录为cloud，可以根据喜欢换名字，只要能对应起来就可以</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"cloudfunctionRoot"</span><span class="token operator">:</span><span class="token string">"/cloud"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存成功，此时cloud文件夹会出现云朵标志，代表初始化成功</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>要注意云函数的环境要和小程序的环境对应</p><p>文件夹右键选择新建node.js文件</p><h3 id="云函数的调用"><a href="#云函数的调用" class="headerlink" title="云函数的调用"></a>云函数的调用</h3><p>使用callFunction,在name处填写需要调用的云函数名称</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//云函数的调用</span><span class="token comment">//传统写法</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'getData'</span><span class="token punctuation">,</span>    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求云函数成功'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求云函数失败'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 建议写法</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'getData'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 传递值</span>        <span class="token literal-property property">openid</span><span class="token operator">:</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>openid    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="云函数获取数据"><a href="#云函数获取数据" class="headerlink" title="云函数获取数据"></a>云函数获取数据</h3><p>云函数只要有变动,就要重新部署,否则云函数不生效</p><p>部署选择上传并部署:云端安装依赖(不上传node_modules)</p><p>如果只改变了js文件，可点击对应的js文件，右键选择云函数增量上传：更新文件</p><p>而且在云函数中操作数据库时，不再需要写wx，wx只在本地编写的时候才需要写</p><p><strong>有多个云开发环境的时候，需要指定环境，或者使用DYNAMIC_CURRENT_ENV指定为当前环境（提倡写法）</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> cloud<span class="token punctuation">.</span><span class="token constant">DYNAMIC_CURRENT_ENV</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h1><p>文件可以导出为json格式，可以使用记事本进行打开</p><p>导入的时候可以选择insert和upsert模式，使用insert时注意不要有多个id相同的情况出现，否则会报错。建议使用upsert模式。</p><p>云函数一次最多可返回100条数据，本地一次最多可返回20条数据。</p><p><strong>云函数中console在云端打印，我们在调试器中只能看到本地的console。</strong></p><h2 id="向云函数传递值"><a href="#向云函数传递值" class="headerlink" title="向云函数传递值"></a>向云函数传递值</h2><p>在data中传递值，在云函数中使用event接收对应的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">'update0129'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>        <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 云函数</span>event<span class="token punctuation">.</span>id和event<span class="token punctuation">.</span>price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><p>在编写云函数时，要注意先保存再上传到云端。</p><p>创建云函数不难，相当于把本地的代码移到云函数，去掉wx</p><p>可以导入源码，但是如果使用别人的源码需要改开发者ID</p><h2 id="选择文件接口"><a href="#选择文件接口" class="headerlink" title="选择文件接口"></a>选择文件接口</h2><p><strong>用户选择文件接口（api)</strong></p><p><a href="https://">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMedia.html</a></p><p>也可以选择chooseImage接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">chooseImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//上传图片的第一步</span>    wx<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//可以选择多少张图片</span>        <span class="token literal-property property">sizeType</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'original'</span><span class="token punctuation">,</span> <span class="token string">'compressed'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">,</span> <span class="token string">'camera'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置图片来源</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token parameter">res</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">uploadImg</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>然后就可以对获取到的文件进行上传</p><p><a href="https://">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">uploadImg</span><span class="token punctuation">(</span><span class="token parameter">temfile</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'要上传图片的临时路径'</span><span class="token punctuation">,</span>temfile<span class="token punctuation">)</span>    wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">cloudPath</span><span class="token operator">:</span> <span class="token string">'西芹1.png'</span><span class="token punctuation">,</span>        <span class="token literal-property property">filePath</span><span class="token operator">:</span> temfile<span class="token punctuation">,</span> <span class="token comment">// 文件路径</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上传失败'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击预览即可在手机上体验使用小程序上传图片</p><h1 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h1><p>存储图片路径，使用存储中的下载地址，复制的时候注意不要复制问号后面的东西，因为是时间戳，可能导致图片失效。</p><h2 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h2><p><a href="https://">https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">chooseVideo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'album'</span><span class="token punctuation">,</span><span class="token string">'camera'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">maxDuration</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>  <span class="token literal-property property">camera</span><span class="token operator">:</span> <span class="token string">'back'</span><span class="token punctuation">,</span>  <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传视频有时候比较慢，需要耐心等待。</p><p>通过type值判断是上传视频还是图片</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>image wx<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{showImg}}"</span> src<span class="token operator">=</span><span class="token string">"{{imgUrl}}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">&gt;</span><span class="token operator">&lt;</span>video wx<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{showVideo}}"</span> src<span class="token operator">=</span><span class="token string">"{{videoUrl}}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="上传Word和PDF文件"><a href="#上传Word和PDF文件" class="headerlink" title="上传Word和PDF文件"></a>上传Word和PDF文件</h2><p><a href="https://">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html</a></p><p>从客户端会话选择文件。</p><pre class="line-numbers language-none"><code class="language-none">wx.chooseMessageFile({  count: 10,  type: 'image',  success (res) {    // tempFilePath可以作为img标签的src属性显示图片    const tempFilePaths = res.tempFiles  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><a href="https://">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/downloadFile/client.downloadFile.html</a></p><p>从云存储空间下载文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">fileID</span><span class="token operator">:</span> <span class="token string">'a7xzcb'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'下载成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'下载失败'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h1><p>vue文件中，data初始化需要使用的数据，生命周期函数写在methods外面，而自定义的函数写在methods内。</p><p><strong>传递值不需要setdata，只需要this.变量名=值即可。</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><table><thead><tr><th>目录名</th><th>作用</th></tr></thead><tbody><tr><td>pages</td><td>页面存放目录</td></tr><tr><td>static</td><td>静态文件目录</td></tr><tr><td>APP.vue</td><td>应用入口文件，和小程序app.js类似</td></tr><tr><td>main.js</td><td>应用入口文件，注册vue等</td></tr><tr><td>manifest.json</td><td>项目配置</td></tr><tr><td>pages.json</td><td>页面配置</td></tr><tr><td>common</td><td>存放共用的文件</td></tr><tr><td>components</td><td>自定义组件目录</td></tr><tr><td>store</td><td>vuex目录</td></tr><tr><td>unpackage</td><td>编译后的文件目录</td></tr></tbody></table><h2 id="前端控制语句"><a href="#前端控制语句" class="headerlink" title="前端控制语句"></a>前端控制语句</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>v-bind</td><td>可以简写为：，组件属性要使用data中定义的数据变量，或者组件属性使用表达式，要使用v-bind指定</td></tr><tr><td>v-on</td><td>可以简写为@绑定事件</td></tr><tr><td>v-model</td><td>数据双向绑定，例如根据输入值动态改变data中的值</td></tr><tr><td>v-if</td><td>条件判断，决定某个内容或者区块是否挂载</td></tr><tr><td>v-show</td><td>条件判断，是否显示</td></tr><tr><td>v-for</td><td>列表渲染，遍历循环，可以使用index获取序号，可以使用value和key获取对象中的对应关系</td></tr></tbody></table><p>onclick事件也能够通过写表达式改变值，.stop可以阻止事件穿透</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用的生命周期（APP-vue"><a href="#应用的生命周期（APP-vue" class="headerlink" title="应用的生命周期（APP.vue)"></a>应用的生命周期（APP.vue)</h3><table><thead><tr><th>周期名</th><th>意义</th></tr></thead><tbody><tr><td>onLaunch</td><td>应用初始化完成执行，全局只执行一次,通常做登录的处理</td></tr><tr><td>onShow</td><td>应用显示时执行，或者从后台进入前台</td></tr><tr><td>onHide</td><td>应用隐藏时执行，或者从前台进入后台</td></tr></tbody></table><h3 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h3><p>onReady在onShow之后触发，因为要等待数据</p><table><thead><tr><th>周期名</th><th>意义</th></tr></thead><tbody><tr><td>onLoad</td><td>页面加载时触发</td></tr><tr><td>onReady</td><td>页面初次完成渲染时触发</td></tr><tr><td>onShow</td><td>页面显示时触发</td></tr><tr><td>onUnload</td><td>页面卸载时触发</td></tr><tr><td>onHide</td><td>页面隐藏时触发</td></tr></tbody></table><p><strong>在写完云函数之后，一定要先停止在模拟器上运行，在编译一次才可以的，然后上传到云端，就可以进行使用了</strong></p><p><strong>v-model真的是神器，省去了很多获取值的麻烦操作</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大明王朝_95</title>
      <link href="/2022/06/19/ying-ping/da-ming-wang-zhao-95/"/>
      <url>/2022/06/19/ying-ping/da-ming-wang-zhao-95/</url>
      
        <content type="html"><![CDATA[<p>在前期，我一直会想：为什么皇上不管严党，明明他们这么贪污腐败，是因为严党的势力太大吗？看到后面我明白了，其实皇室才是最贪污腐败的一群人，严党只是皇室用于敛财的棋子。皇上需要那么一个人，当他的看门狗，压制群臣，搜刮民财。比如在严党倒台之后，皇上马上撤换了吕芳，换上了陈洪，因为他就需要一个这样的人物，去顶住群臣的压力。给群臣一个靶子打，转移群臣的目标，推卸自己的责任。“有时候贤与不贤也由不得他们。”说的就是这样，当你担任这个职务的时候，你就需要去做皇上想让你做的事情。我也慢慢开始明白了为什么身为清流领袖的徐阶不仅没有和严嵩水火不容，反而会有不少的交谈。严嵩作为首辅，权势滔天的缘故。但我想徐阶可能也看到倒了严党之后，自己也将担任如同严嵩一般的角色，他也不想斗，但是群臣要你斗，你不得不斗。虽然这样内斗不利于国家发展，但这样皇上的权力才得以巩固，当大臣们不内斗，团结在一起的话，国家是会变好，但是皇上的行为就会被限制，劝谏皇上的奏折将会数不胜数，这显然不是皇上想要看到的局面，只有两派不断的斗，皇上才可以坐收渔利。即使没有矛盾，皇上也会制造矛盾让大家斗起来。严党一倒，吕芳很快被皇上调走，选了一个恶狗一样的陈洪来掌管司礼监，让司礼监和内阁斗，总之一定要有斗争。所以为什么当吕芳试图整合严党、清流和司礼监三股势力的时候，受到皇上的严厉惩罚，因为皇上最不喜欢的就是看到群臣团结起来。后来严党倒台之后果然如此，徐阶的家人也开始兼并土地，皇上需要最接近自己的人有把柄捉在自己手上。最后严党倒台也不是因为贪污，而是因为严世蕃没有用对人，派去干活的人都是些“废物”，根本没有推进改稻为桑的国策；也没有给皇上足够的钱，皇上为什么给这个位置你坐，就是让你帮他干活，帮他搜刮民财。严世蕃你们自己心里没有一点数的吗？居然自己拿大头，皇上拿剩下的，你不死谁死。</p><p>皇上是怎么压制群臣对自己的批评的呢？不是直接惩罚你，这样没什么效果，因为总会有人不怕死。他是利用举荐、师生关系、同乡关系将大臣们捆绑在一起，让他们形成派系。利用连坐，让你考虑以大局为重，不要牵连到旁人。而且由于派系的存在，你说的每句话，人们都会立场先行，先考虑你是想要斗倒谁，目标是为了什么，而这句话正确与否反而没显得这么重要。所以为什么皇上对海瑞这么生气又无可奈何，因为通过他对群臣的试探，发现大家都是站在海瑞这一边，证明海瑞的话，群臣是看进去了。群臣没有先考虑海瑞的立场，而是看他先说的对不对。群臣愿意团结在一起维护海瑞，这使得皇上生气万分。当然皇上对海瑞可以一杀了之，但他不会这样做，因为他的尊严不允许他这样做，他一直认为自己将群臣玩弄于鼓掌之中，这样做只会显示出他已经没有办法了，只能通过杀人来解决问题。而且这样还会客观上促进群臣们的团结。这也证明了有理走边天下都不怕，海瑞基本就是靠着自己的名声和《大明律》扛下了所有的压力。他很清楚自己最大的优势是自己没有黑历史，而他的对手们浑身都是黑历史。“有些事不上秤没有四两重，上了秤一千斤都打不住。”说的就是这个，黑历史相当于是一个隐形炸弹，没有事的时候还好，出了事没有人能救得了。</p><p>剧中的演员都很不错，我比较喜欢的是严嵩、吕芳、皇上、徐阶、海瑞、胡宗宪、王用汲、杨金水。其他的都不错，只是没有这几个这么出彩。还有布景、金属器皿、纸张等都很考究，给故事增添了不少代入感。</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电视剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光荣的愤怒_87</title>
      <link href="/2022/06/19/ying-ping/guang-rong-de-fen-nu-87/"/>
      <url>/2022/06/19/ying-ping/guang-rong-de-fen-nu-87/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>优秀的开头。短短的开头就将故事的背景，主要人物的性格，以及产生矛盾的原因都讲述给了观众，使得故事的逻辑得以自洽。而且开头狗卵的那一段很精彩，完全捉住了观众的情绪，想要知道到底发生了什么。还有中间插入的文字也很不错，方便了观众了解故事背景。</li><li>方言特色，在一个讲述农村故事的电影里，方言的运用增添了真实感，而且就个人而言，我很喜欢方言，因为我觉得方言的喜剧效果特别好，而且很有味道。而且剧中充满农村特色的绰号也很不错，例如：狗卵，大旺，麻面，水根。</li><li>讽刺手法与黑色幽默。剧中的水根言必称“党员的操守”，但是却是唯一一个叛徒，到最后还是投奔了反派。这也让我明白了容易倒向你的人也容易倒向别人，因为他们往往没有经过独立思考。</li><li>反映了农民的劣根性，人人都恨熊家，但又畏惧熊家，但是一旦有了“上面”的指示，大家便愿意投入到革命里面了。狗卵是里面表现的最突出的，胜利时只管享乐，敌人反扑时只能投降。</li><li>你妈的，你狗日的太会演戏了。剧中王砚辉和吴刚的演绎十分出色，王砚辉将村霸的感觉完全表现出来了，那种粗中有细，狠毒的感觉以及结尾的那一句“你没有机会了”贼有感觉。要是电影在这里结尾就完美了。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>中国特色社会主义结尾。可以说这个结尾完全是为了过审而加的，而这段结尾可以说是毁了这部片，太牵强了，完全是为了战胜反派而战胜反派，铺垫不足，给的理由也是扯得不行。</li><li>中后段节奏有点混乱，没有了主次之分，信息不断的传递个观众，给人一种很慌乱的感觉，观众不太清楚故事到底在说什么，尤其是兵分四路的那一段，给人的观感不太好。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了不起的盖茨比_87</title>
      <link href="/2022/06/19/ying-ping/liao-bu-qi-de-gai-ci-bi-87/"/>
      <url>/2022/06/19/ying-ping/liao-bu-qi-de-gai-ci-bi-87/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>环境还原的很好，盖茨比宫殿般的房子，奢华的宴会，还有那一条泥泞的煤炭路都满足了我对于书中的想象。</li><li>对原书的还原，最重要的绿光，书中的名言，剧中呈现出的文字都令我感到满足。</li><li>弱化的女主的恶，剧中对女主的行为做了一些修正，将女主变得没那么坏，使得更加容易被观众接受。（虽然我还是很讨厌女主，但至少减轻了厌恶程度）</li><li>男主和女主重逢的那一段拍的很好，很好的表现了男主对于自己心中的那盏绿光的那种渴望而又害怕的心境，相处时的慌张和原先的冷酷也构成了一种反差萌。（不过这也使得本剧进一步变成感情剧）</li><li>男二演得很好，将那种花心，粗野但又有小聪明的感觉演绎出来了，完全就是我心目中男二应该有的样子。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>对于有钱人的生活描写的太夸张，感觉就是拼命的让你相信他们的奢华生活，而且还伴随着很多故弄玄虚，给人一种很刻意的感觉。</li><li>没有书中“垮掉的一代”的历史感，在一个大时代的背景下讲述一个烂俗的三角恋爱情故事就很诡异，缺失了回味，只剩下了无尽的吵闹。</li><li>节奏把握太糟糕了，太拖沓了，花了很多篇幅去讲述盖茨比的牛逼，但是效果不好，而且浪费了很多时间，这些时间本应讲述的其他更重要的事情。</li><li>选角问题。为什么剧中就没有一个好看一点，有气质一点的女性角色？女主卡看起来就是个婊子，女二看上去就像个神经病，这些都严重影响观看体验。</li><li>人物的逻辑成迷，尤其是女主，都愿意和男主私奔了，那为什么不愿意跟男二坦白后和男主在一起呢？为什么事故发生后，宁愿相信男二也不愿意相信男主呢？这些书中本身存在的问题不但没有被解决，反而被放大了。</li><li>角色塑造糟糕，剧中最重要的人物——盖茨比，本应塑造成优秀，深情而又有能力的人，总之是一个great的人物，但是我看完之后之觉得这是一个双手沾满血腥的装逼暴发户。剧中塑造男主光辉形象就靠男三不断的尬夸男主，强行优秀，这样的刻画不得不说是很失败的。这也导致本书的主旨——great的人物在时代毁灭的冲击感消失。本应是本书最高潮的盖茨比的葬礼也变得没有力量了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫斯科不相信眼泪_86</title>
      <link href="/2022/06/19/ying-ping/mo-si-ke-bu-xiang-xin-yan-lei-86/"/>
      <url>/2022/06/19/ying-ping/mo-si-ke-bu-xiang-xin-yan-lei-86/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>点题，女主的三次哭泣都是情节关键处，还有闹钟的隐喻。而女主最后一次落泪的时候，她终于收获了她真正的爱情。</li><li>展现了命运的无常。第一幕结束的时候，看着女主哭泣的样子，谁能想到女主会获得最幸福的结局。而最要强的女二却最落魄。一个开始时最抗拒喝酒的人最后却成了一个酒鬼，并毁掉自己原本幸福的生活。</li><li>直接或间接的表现出了俄罗斯存在的问题。男性酗酒，男多女少，离婚率高，出轨，男性大男子主义。</li><li>角色塑造的成功，三名女主各有特色：诚实知性的女主（我的理想型），大胆好强的女二，老实淳朴的女三。大男子主义严重的男主，这些鲜明的人物形象都留在了我脑海中。而且这些都是通过一些小细节反映出来的，女二叫宿管不要叫这里宿舍，女主不敢吃鱼，怕暴露自己的餐桌礼仪之类的小细节。</li><li>平淡的叙述，正如最后一个镜头，其实这就是我们的生活，这就是我们这片大地上的喜怒哀乐。</li><li>真香操作，女主经常会说一些狠话，但是很快就会被打脸，这也为这个故事增添了一些趣味。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>中苏之间的文化差异。我对人物中的行为有一些不能理解。最为明显的就是结局男主对女主瞒着自己收入比他高而直接离开了家，而女主也知道他会一走了之，仿佛这是理所当然的。而女主连男主家在哪里都不知道就和他生活在一起也让我觉得很迷惑。</li><li>剧中人物经常一起说话，给耳朵的感觉太不好，太嘈杂了，也很乱。可能是导演想营造热闹的氛围，但是观感实在不好。</li><li>情节发展有些突兀，比如女主成功的一段，还有男主最后回心转意也没有铺垫，突然就回来了，好像就是为了结尾而回来一样，起码给一下男二说服男主的片段也好。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方舟天使_87</title>
      <link href="/2022/06/19/ying-ping/fang-zhou-tian-shi-87/"/>
      <url>/2022/06/19/ying-ping/fang-zhou-tian-shi-87/</url>
      
        <content type="html"><![CDATA[<p>故事并不复杂，讲述的是一个溺爱女儿的妈妈给女儿安装了方舟天使，用于监控女儿的故事。从母亲的行为我认识到不加约束的爱和无微不至的关怀对孩子的成长未必有好处，爱一个人不是不批评，不是只赞美。女主只有十五岁，当她第一次发生性关系，第一次吸毒的时候，就应该光明正大地批评她，教育她，而不是躲在背后使用方舟天使监控她，这样只能让事情变得更糟。还有过度的保护反而是害了孩子，如果不是年幼的时候，被满屏的“马赛克”阻挡，女儿未必会对这些东西有过分的好奇。刻意的隐瞒他们在这个年龄应该要懂得的东西，只会让他们的好奇心达到一个病态的程度，而且这个事情并不会因为你隐瞒而不存在，总有一天，他们会接触到这个东西。而且没有一个从小到大慢慢接受，慢慢成长的过程，到他们一旦接触的时候，很可能控制不了自己。话说美国那边的孩子真的想影片那样早熟吗？我觉得这样反而过早了。再说说女主最后用方舟天使的控制器殴打母亲的情节，看起来导演似乎是认可女主的做法的。但是我不是很认同女主的做法，因为我觉得女主犯下的错要大于母亲，女主的做法以及处于犯罪的边缘了，母亲虽然违背诺言，重新监控女儿，但是我觉得罪不至此，不应该做到这个地步。但是这也是我站在第三方的角度去看待这个问题，若是自己也遇到这种情况，我也不知道自己能不能控制住自己，想想都觉得毛骨悚然。这也让我想到了一个问题：我们眼中的世界是不是真正的世界？网络上也有很多这种利用错觉的游戏，我们的大脑会不会为了保护我们而给与我们一些错误的信息？或者以后会不会出现像影片一样的可以修改视觉的科技，甚至不像是影片中的马赛克，而是替换成其他东西，那么到时我们还能判断得出真假吗？</p>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Premiere笔记</title>
      <link href="/2022/06/18/ban-gong/premiere-bi-ji/"/>
      <url>/2022/06/18/ban-gong/premiere-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><ol><li>新建字幕：新建-&gt;旧版标题。</li><li>工程文件也需要预览，绿色的是字，红色的是视频。</li><li>To EDIT是用于替换的地方，SHOT是视频，TEXT是文本。</li><li>效果-&gt;点击已有的效果可以更加详细的调整效果。</li><li>可以设置暂存盘，最好是C盘以外。</li><li>编辑-&gt;首选项-&gt;时间轴，可以调整导入的东西的持续时间。</li><li>窗口-&gt;基本图形-&gt;编辑，调整字体大小。</li><li>PS蒙版的使用</li><li>图像大小和移动，点击编辑-&gt;效果控件，用里面的位置和缩放即可。</li><li>AVI格式更清晰，Quicktime。</li><li>关键帧点击位置和旋转。</li><li>设置字体背景的不透明度为0就不会影响视频文件。</li><li>视频过渡-&gt;渐变擦除，可以用PS生成灰度图自定义转场。</li><li>可以在效果控件中消除，复制和粘贴视频效果。</li><li>新建一个图层可以增加一个共有的效果。</li><li>模板是mogrt文件。</li><li>窗口-&gt;基本图形-&gt;导入,当作时间轴拖入。</li><li>要先按回车进行渲染，再播放，不然会很卡。</li><li>蓝色的模板是不要渲染，而红色的需要。</li><li>字体问题直接忽略，或者可以去下载字体库。</li><li>工程文件模板在每个素材那里替换即可。</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>寻找剪辑点</td><td>寻找剪辑点时，我们可以按下空格键Space播放和暂停。大致找到后，细找帧</td></tr><tr><td>Left Right键</td><td>向前向后一帧 （比较细致，可以一直按，这样速度快一点）</td></tr><tr><td>shift+Left Right键</td><td>向前向后五帧（这个比较快）</td></tr><tr><td>J</td><td>左穿梭/倒放</td></tr><tr><td>K</td><td>停止穿梭</td></tr><tr><td>L</td><td>右穿梭/正放</td></tr><tr><td>Shift + L</td><td>慢速右穿梭</td></tr><tr><td>Shift + J</td><td>慢速左穿梭，穿梭键如果连按，可以加速，K和Space都可以停止播放</td></tr><tr><td>时间线窗口中时间帧的管理</td><td></td></tr><tr><td>End</td><td>跳转到序列-素材结束点</td></tr><tr><td>Home</td><td>跳转到序列-素材开始点</td></tr><tr><td>Shift + End</td><td>跳转到所选素材结束点</td></tr><tr><td>Up</td><td>跳转上一个编辑点</td></tr><tr><td>Down</td><td>跳转下一个编辑点</td></tr><tr><td>Ctrl+D</td><td>添加转场效果，效果直接拖到转场处即可</td></tr><tr><td>alt</td><td>复制视频</td></tr><tr><td>剪辑开始</td><td></td></tr><tr><td>i</td><td>设置入点</td></tr><tr><td>o</td><td>设置出点</td></tr><tr><td>Shift + I</td><td>跳转入店</td></tr><tr><td>Shift + O</td><td>跳转出点</td></tr><tr><td>‘</td><td>提取</td></tr><tr><td>，</td><td>插入</td></tr><tr><td>.</td><td>覆盖</td></tr><tr><td>M</td><td>标记点</td></tr><tr><td>shift+M</td><td>移动点</td></tr></tbody></table><h3 id="直接剪辑"><a href="#直接剪辑" class="headerlink" title="直接剪辑"></a>直接剪辑</h3><ol><li>剃刀D，不建议用，一个是慢一个是不准确</li><li>用“添加编辑”功能，因为常用，我把他重设了快捷键，大家可以在快捷键面板上搜索，一按此键，就可以在时间帧处切开</li><li>Q把时间帧前面的素材切掉，W把时间帧后面的素材切掉，补充说明切掉的素材指此段素材，不是说时间帧之前到开头的都没有了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 办公 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Premiere </tag>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库练习</title>
      <link href="/2022/06/18/bian-cheng/shu-ju-ku-lian-xi/"/>
      <url>/2022/06/18/bian-cheng/shu-ju-ku-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h2><p><strong>like表示模糊查找</strong></p><p>浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用round函数</p><p>多个条件进行分组：<code>group by university,gender;</code></p><p>where在group by前执行，所以需要用having，而order by在group by后，所以可以不用having。</p><p>每张表都需要有别名</p><p>多个条件判断：<code>case when then</code></p><p>日期函数day()取日，month()取月份，datediff求两个日期之间的差</p><h3 id="常见例题"><a href="#常见例题" class="headerlink" title="常见例题"></a>常见例题</h3><p>年龄在20到23之间：<code>SELECT device_id,gender,age from user_profile where age between 20 and 23</code></p><p>用where过滤空值练习：<code>select device_id,gender,age,university from user_profile where age is not null;</code></p><p>查看学校名称中含北京的用户：<code>select device_id,age,university from user_profile where university like '%北京%';</code></p><p>统计每个学校的答过题的用户的平均答题数：首先构造出一张以device_id为分组的表，然后以该表为主表，进行链接，然后根据学校进行分组，使用sum和count（1）即可，或者 <code>(count(question_id)/count(distinct(qpd.device_id)))</code> 直接使用count<br>SELECT DISTINCT Company FROM Orders： distinct关键字表示只取一次，去重<br>结果不去重只需union all将两张表连接在一起。</p><p>选取文本中的最右的元素：<code>substring_index(profile,',',-1)</code></p><p>查找倒数第二个元素需要两层：<code>SUBSTRING_INDEX(SUBSTRING_INDEX(profile,',',-2),',',1)AS age;</code></p><h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>verchar和char的区别：verchar存储时变长，最多容纳65535个字节；char固定长度，最多容纳255个字符。</p><p>在配置文件（my.cnf）中加入如下配置：<code>sql-mode="NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</code>保存并重启即可进入非严格模式</p><p>长的文本：text</p><p>创建表：<code>create table L3(id int not null primary key auto_increment,name varchar(5),depart char(3))default charset=utf8;</code></p><p>插入元素：<code>insert into L3(name,depart) values("alex","sb");</code></p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>新增数据：<code>insert into L2(salary) values(5.289);</code></p><p>删除数据：<code>delete from L3 where name="alex" and id=1;</code> 。删除name=alex的数据,and链接多个条件</p><p>更新数据：<code>update L2 set salary=1.99 where id=1;</code>。<code>update L3 set name=concat(name,"3") where id=2；</code> 。PS：concat函数用于拼接字符串</p><p>查找数据：<code>select id,name from L3 where id=2;</code></p><p>显示一列标题为age的111：<code>select id,name,111 as age from L3;</code></p><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><p>decimal(8,2)表示数字位有8位（不包含负号），小数位保留2位。</p><p>小数位数过多会自动四舍五入，整数部分超过会报错</p><p>插入元素：<code>insert into L2(salary) values(5.289);</code></p><p>新建表：<code>create table L2(id int not null primary key auto_increment,salary decimal(8,2))default charset=utf8;</code></p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>timestamp和datetime相比：除了表示的范围更小外，所存储的方式也不同，是根据当前时区再进行转换，而datetime是直接存储。</p><p>此外还有date和time</p><p>创建表：<code>create table L5(id int not null primary key auto_increment,dt datetime,tt timestamp)default charset=utf8;</code></p><p>插入表：<code>insert into L5(dt,tt) values("2025-11-11 11:11:14","2025-11-11 11:11:14");</code></p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>修改表：<code>alter table L6 add amount decimal(10,2) default 0 not null;</code></p><p>删除表：<code>alter table L6 drop aaa;</code></p><p>插入记录：<code>insert into L6(name,password,gender,email,crime,amount) values("xiqin4","dsasa",0,"7444545@qq.com","2020-7-1 11:11:14",100);</code></p><p>更新记录：<code>update L6 set gender=1 where id&gt;3;</code></p><p>查看：<code>select * from L6 where amount&gt;1000;</code></p><p>更新：<code>update L6 set amount=amount+1000;</code></p><p>删除：<code>delete from L6 where gender=1;</code></p><p>创建表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table L6(    id int not null primary key auto_increment,    name varchar(32) not null,    password varchar(64) not null,    gender char(2) check(gender in (0,1)),    email varchar(64),    crime datetime)default charset=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><h3 id="左右连表"><a href="#左右连表" class="headerlink" title="左右连表"></a>左右连表</h3><p>以info作为主表，将depart进行左链接，根据depart.id进行：<code>select * from info left outer join depart on info.depart_id = depart.id;</code></p><p>指定选中的数据进行展示：<code>select info.id,info.name,info.email,depart.title from info left outer join depart on info.depart_id = depart.id;</code></p><p>将left 改成right就是右链接：<code>select info.id,info.name,info.email,depart.title from info right outer join depart on info.depart_id = depart.id;</code></p><p>从表 right outer join 主表 on 主表.x=从表.id</p><p>当主表中存在从表中没有的信息，则会产生区别；</p><p>简写outer可以省略</p><p>内链接：两张表进行链接，没有分主从，根据条件进行匹配：select * from info inner join depart on info.depart_id = depart.id;</p><h3 id="指定列（映射）"><a href="#指定列（映射）" class="headerlink" title="指定列（映射）"></a>指定列（映射）</h3><p>帮name写别名NM，并新增一列123：<code>select id,name as NM,123 from info ;</code></p><p>条件语句：<code>select id,name,case when age&lt;18 then "少年" when age&lt;30 then "青年" else "老年" end v6 from info;</code></p><h3 id="用户授权管理"><a href="#用户授权管理" class="headerlink" title="用户授权管理"></a>用户授权管理</h3><p><strong>用户</strong></p><ul><li>查看用户信息：<code>select user,authentication_string,host from mysql.user;</code></li><li>查看用户和权限信息：<code>desc mysql.user;</code></li><li>新建用户：<code>create user '用户名'@'连接者的IP地址' identified by '密码'</code> 。PS：’’号可加可不加</li><li><code>create user xiqin@127.0.0.1 identified by '159123zxc'</code> 。解析：127.0.0.%：%意味可以匹配任何值；地址为%意味所有地址都可以</li><li>删除用户：<code>drop user xiqin@127.0.0.1;</code></li><li>修改用户：<code>rename user 'xiqin'@'127.0.0.1' to 'huangyuqin'@'localhost';</code></li><li>修改密码：<code>set password for 'huangyuqin'@'localhost'=Password('123123');</code></li></ul><p><strong>授权</strong></p><ul><li>grant 权限 on 数据库.表 to ‘用户‘@’IP地址’;</li><li>给用户huangyuqin用有数据库day26db中info表的查找和插入权限：<code>grant select,insert on day26db.info to 'huangyuqin'@'localhost';</code></li><li>给用户huangyuqin拥有数据库的所有权限：<code>grant all privileges on *.* to 'huangyuqin'@'localhost';</code></li><li>此时还没有真正生效，输入：<code>flush privileges;</code> 。将数据读入内存，从而立即生效。</li><li>选择不同的用户进行登录：<code>"C:\Program Files\mysql-5.7.31-winx64\bin\mysql.exe" -h 127.0.0.1 -P 3306 -u huangyuqin -p</code></li><li>查看授权：<code>show grants for 'huangyuqin'@'localhost';</code></li><li>取消授权：<code>revoke INSERT on day26db.info from 'huangyuqin'@'localhost';</code></li><li>需要在管理员权限下使用</li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符主要用于模糊查找：</p><p>%号表示n个字符，可以为0个：<code>select * from info where name like "%明%";</code>_号表示一个字符：<code>select * from info where name like "_明%";</code></p><p>注意：数据少时可以使用，数据量大时不要使用，因为效率很低。</p><h3 id="上下连表和取部分"><a href="#上下连表和取部分" class="headerlink" title="上下连表和取部分"></a>上下连表和取部分</h3><p><code>select id,title from depart union select id,name from info;</code></p><p>列数需相同，会自动去重。union all则不去重</p><p>获取前五条数据：select * from info limit 5;</p><p>从位置2开始，向后获取前5条数据：<code>select * from info limit 3 offset 2;</code></p><p>可以用于分页显示</p><h3 id="排序和分组"><a href="#排序和分组" class="headerlink" title="排序和分组"></a>排序和分组</h3><p>desc倒序排列，顺序排列，通常是得到结果再进行排序</p><p>优先按照age从小到大，age相等则id从大到小：<code>select * from info order by age asc,id desc;</code></p><p>将age相同的进行分组，遇到需要取舍的时候，选择ID更大的，同理还可以替换成max(id),min(id),count(id),sum(id),avg(id)：select age,count(1) from info group by age;</p><p>对已经分组的数组，取其中2个以上的分组：<code>select depart_id,count(id) from info group by depart_id having count(id)&gt;2;</code></p><h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><p>约束depart_id和depart中的id，用于初始化的时候：<code>constraint fk_info_depart foreign key (depart_id) reference depart(id);</code></p><p>表结构已创建，额外增加外键：<code>alter table info add constraint fk_info_depart foreign key info(depart_id) references depart(id);</code></p><p>删除外键：<code>alter table info drop foreign key fk_info_depart;</code></p><h3 id="SQL语句优先级"><a href="#SQL语句优先级" class="headerlink" title="SQL语句优先级"></a>SQL语句优先级</h3><p>优先级从高到低：join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</p><p>例子：<code>select age,count(id) from info where id&gt;2 group by age having count(id)&gt;1 order by age desc limit 1;</code></p><h2 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h2><h3 id="表的数据的导入和导出"><a href="#表的数据的导入和导出" class="headerlink" title="表的数据的导入和导出"></a>表的数据的导入和导出</h3><p>先判断是否存在，再进行删除：<code>drop database if exist day27db;</code></p><p>导入文件：注意斜杠：<code>source /Users/86136/Desktop/数据库/第三天/day27db.sql;</code></p><p>只能导入数据表，不能插入数据，不知道是什么问题，可能是主键导致的问题，暂时先不处理</p><p>查询姓李的老师个数：<code>select * from teacher where tname like '李%';</code></p><p>查询男生和女生的人数：<code>select gender,count(1) from student group by gender;</code></p><p>查询“三年二班”的所有学生：<code>select * from student left join class on student.class_id = class.cid where class.caption='三年二班';</code></p><p>查询每个班级的班级名称、班级人数：<code>select class.caption,count(1) from student left join class on student.class_id=class.cid group by class.caption;</code></p><p>查询平均成绩大于60的所有学生的学号、平均成绩、姓名：<code>select student_id,avg(num) from score group by student_id having avg(num)&gt;60;</code></p><p>查询成绩小于60分的同学学号、姓名、成绩、课程名称：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname,score.num,course.cname from score left join student on score.student_id=student.sid left join course on score.course_id=course.cid where num&lt;60;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询各科成绩的总分、最高分、最低分、平均分，显示课程ID、课程名称、总分、最高分、最低分：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select course_id,course.cname,sum(num),max(num),min(num),avg(num) from score left join course on score.course_id=course.cid group by course_id order by avg(num) desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询各科成绩的平均分和及格率，显示：课程ID、课程名称、平均分、及格率：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select course_id,course.cname,avg(num),count(1) as total,sum(case when score.num &gt; 60 then 1 else 0 end) as jige from score left join course on score.course_id =course.cid group by course_id;select course_id,course.cname,avg(num),sum(case when score.num &gt; 60 then 1 else 0 end)/count(1)*100 as prescent from score left join course on score.course_id =course.cid group by course_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三个表依次连在一起：查询“三年二班”每个学生的学号、姓名、总成绩、平均成绩：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student_id,sname,sum(num),avg(num) from score left join student on score.student_id=student.sid left join class on class.cid=student.class_id where class.caption='三年二班' group by student_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询学过“波多”老师课的同学的学号，姓名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname from score left join student on score.student_id=student.sid left join course on score.course_id=course.cid left join teacher on course.teacher_id=teacher.tid where teacher.tname='波多';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询没学过’波多’老师课的同学的学号，姓名（应该是选择先查询选过的同学的ID，再进行排除，而不是直接使用！=）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from student where sid not in(select student.sid from score left join student on score.student_id=student.sid left join course on score.course_id=course.cid left join teacher on course.teacher_id=teacher.tid where teacher.tname='波多');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询选修‘苍空’老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列）不考虑并列只需使用到order by和limit：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname from score left join student on score.student_id =student.sid left join course on score.course_id=course.cid left join teacher on course.teacher_id=teacher.tid where teacher.tname='苍空' and score.num=(select max(num) from score left join course on score.course_id=course.cid left join teacher on course.teacher_id=teacher.tid where teacher.tname='苍空');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询选修了所有课程的学生的学号，姓名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname from score left join student on score.student_id=student.sid group by student_id having count(1)=(select count(1) from course);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询选修了“生物”和“物理”课程的所有学生学号，姓名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname from score left join course on score.course_id=course.cid left join student on score.student_id=student.sid where course.cname in ('生物','物理') group by student_id having count(1)=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询至少有一门课与学号为1的学生所选的课程相同的其他学生学号和姓名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student.sid,student.sname from score left join course on score.course_id=course.cid left join student on score.student_id=student.sid where score.course_id in (select course_id from score where student_id=1) and score.student_id!=1 group by student_id having count(1)&gt;1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询“生物”比“物理”成绩高的所有学生的学号：PS：这里好像有点问题，存在没有该课成绩的情况，应该先选出同时有生物和物理成绩的同学</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select student_id,max(case cname when "生物" then num else -1 end) as sw,max(case cname when "物理" then num else -1 end) as wl from score left join course on score.course_id=course.cid where cname in ("生物","物理") group by student_id having sw&gt;wl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将一张表中的数据插入到另一张表中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into sc select * from score;insert into sc (student_id,course_id,num) select sid,2,80 from student where sid not in (select student_id from score where course_id=2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><h3 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h3><p>MySQL中提供了执行计划，让你能够预判SQL的执行（只能给到一定的参考，不一定完全能预判准确）。</p><p>explain关键字</p><p>主要看输出结果中的type,all表示进行了全表扫描，而ref则是通过索引进行查找</p><p>性能从低到高排序：all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system/const</p><h3 id="无法命中索引的情况"><a href="#无法命中索引的情况" class="headerlink" title="无法命中索引的情况"></a>无法命中索引的情况</h3><p>类型不一致：例如数据库中是字符串类型，却传入数字进行查找；主键比较特殊，即使类型不一致也不影响</p><p>使用了不等于，特殊的主键or，当or条件要未建立的列时失效，但当后面有and有建立索引的列时比较生效</p><p>排序，当根据索引排序时候，选择的映射如果不是索引，则不走索引。特殊的主键like进行模糊匹配，只有在通配符在最后面才有效</p><p>联合索引要满足最左前缀</p><p>使用函数，例如reverse（）,放在后面才可以，例如</p><ul><li>未命中：<code>select * from big where reverse(name) = "wupeiqi";</code> </li><li>命中：<code>select * from big where name = reverse("wupeiqi");</code></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>使用索引是为了加速查找，为什么可以加速查找是因为索引是按照B+树的方式进行存储的</p><p>引擎的不同会对索引的产生区别：myisam是数据和索引结构分开存储；innodb是数据和主键索引结构存储在一起</p><p>建表时可以进行指定engine=myisam</p><p>查看数据表引擎类型：<code>show create table class;</code></p><p>innodb是默认索引，使用更为方便</p><p>常见索引</p><ol><li>主键索引：加速查找、不能为空不能重复。</li><li>唯一索引：加速查找，不能重复，可以为空，但只能一个为空，不然会视为重复。</li><li>普通索引：加速查找。都可以进行联合索引</li><li>联合索引的意思是多列连接起来作为一个键</li></ol><p>主键索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">primary key关键字create table 表名(    id int not null auto_increment,    name varchar(32) not null,    primary key(列1,列2)          -- 如果有多列，称为联合主键（不常用且myisam引擎支持）);新增主键索引：alter table 表名 add primary key(列名);删除主键索引：alter table 表名 drop primary key;自增列一定要是键，即索引，索引删除时可能会报错，此时改为使用alter table 表 change id id int not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>唯一索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">unique关键字create table 表名(    id int not null auto_increment,    name varchar(32) not null,    unique (列1,列2)               -- 如果有多列，称为联合唯一索引。);新建create unique index 索引名 on 表名(列名);删除drop unique index 索引名 on 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">indexcreate table 表名(    id int not null auto_increment primary key,    name varchar(32) not null,    email varchar(64) not null,    index ix_email (name,email)     -- 如果有多列，称为联合索引。);新增create index 索引名 on 表名(列名);删除drop index 索引名 on 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图其实是一个虚拟表（非真实存在），其本质是【根据SQL语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，并可以将其当作表来使用，类似使用一个temp变量方便使用。</p><p>创建视图：<code>create view v1 as select id,name from d1 where id&gt;1;</code> 。然后可以当作一张表进行使用</p><p>修改视图：<code>alter view v1 as SQL语句</code></p><p>基于视图只能查询，针对视图不能执行 增加、修改、删除。 如果源表发生变化，视图表也会发生变化。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>字符串拼接：<code>select concat('alex','sb');</code></p><p>休眠1秒：<code>select sleep(1);</code></p><p>自定义函数：先将‘;’转换为美元符号，放在遇到；就自动结束了</p><p>执行函数：<code>select f1(11,22);</code> 。<code>select f1(11,id),name from d1;</code></p><p>删除函数：<code>drop function f1;</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delimiter $$create function f1(    i1 int,    i2 int)returns intBEGIN    declare num int;    declare maxId int;    select max(id) from big into maxId;    set num = i1 + i2 + maxId;    return(num);END $$delimiter ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>事务，成功都成功，失败都失败。</p><p>存储过程，是一个存储在MySQL中的SQL语句集合，当主动去调用存储过程时，其中内部的SQL语句会按照逻辑执行。</p><p>rollback进行回滚</p><p>创建存储过程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delimiter $$create procedure p1()BEGIN    select * from d1;END $$delimiter ;执行存储过程：call p1();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>对某个表进行【增/删/改】操作的前后如果希望触发某个特定的行为时，可以使用触发器。</p><p>NEW表示新数据，可以在里面直接进行使用。同理，old表示原来的数据。</p><p>创建触发器</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger例句：CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROWBEGIN    ...END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>MySQL中自带了锁的功能，可以帮助我们实现开发过程中遇到的同时处理数据的情况。</p><p>MYISAM支持表锁，不支持行锁；InnoDB引擎支持行锁和表锁。</p><p>在innodb引擎中，update、insert、delete的行为内部都会先申请锁（排它锁），申请到之后才执行相关操作，最后再释放锁。</p><p>select默认不加锁，需要配合事务+特殊语法进行加锁</p><p>对于数据库中的锁，从锁的范围来讲有：</p><ul><li>表级锁，即A操作表时，其他人对整个表都不能操作，等待A操作完之后，才能继续。</li><li>行级锁，即A操作表时，其他人对指定的行数据不能操作，其他行可以操作，等待A操作完之后，才能继续。</li><li>for update排他锁：<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">begin;     select * from L1 where name="武沛齐" for update;    -- name列不是索引（表锁）commit;select * from L1 where id=1 for update;              -- id列是索引（行锁）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>lock in share mode共享锁，其他可读但不可写<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">begin;     select * from L1 where name="武沛齐" lock in share mode;    -- 假设name列不是索引（表锁）commit;使数据按字典格式cursor = conn.cursor(pymysql.cursors.DictCursor)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>四大特性：原子性、一致性、隔离性、持久性。</p><p>开启事务：begin;或者start transaction;</p><p>提交事务：commit;</p><p>回滚：rollback;</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯国赛题目</title>
      <link href="/2022/06/18/bian-cheng/lan-qiao-bei-guo-sai-ti-mu/"/>
      <url>/2022/06/18/bian-cheng/lan-qiao-bei-guo-sai-ti-mu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43919497/article/details/110011722?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162261625316780264075413%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162261625316780264075413&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-110011722.pc_search_result_before_js&amp;utm_term=%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AFpython%E7%BB%84%E5%9B%BD%E8%B5%9B%E7%AD%94%E6%A1%88&amp;spm=1018.2226.3001.4187">CSDN题解</a></p><ol><li>美丽的2<br>遍历即可，然后使用str和count函数就可以查找数字是否含有2</li><li>合数个数<br>使用埃氏算法，就可以找到所有合数，然后使用count计算个数即可<br>使用埃氏算法要小心一点，它是用于判断n以内的素数的，所以要注意是否需要加一。</li><li>阶乘约数<br>使用唯一分解定理：<br>一个大于1的正整数N，如果它的标准分解式为N=p1a1+p2a2+….+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>其中pi为素数（1不为素数）<br>我们首先将2到100中含有的素数找出来，然后存储在字典中，设置值为1，然后由于100的阶乘太大了，我们从2开始到100，分别用素数去尝试是否能够整除，可以的话就将字典对应的值加一，然后遍历字典的值，乘起来就是答案了。</li><li>本质上升序列<br>我们使用动态规划求解该题，后面开始遍历<br>我们先将字符串翻转，使用nums记录以该字母开头的所有组合，然后我们遍历数组，如果是‘z’的话，将nums[-1]=1，否则我们nums[idx]=sum(nums[idx+1:]+1,意思就是与该字母后面的所有有效的字母开头进行组合，加一是因为自己一个也可以作为一个序列。<br>最后我们sum（nums）即得答案</li><li>玩具蛇<br>使用深度优先遍历，设定dfs函数和VIS矩阵判断该点是否被访问过。如果被访问过就直接返回，没有则先判断长度是否已经足够，是的话直接计数器加一，返回，否则将该位置的访问位置置为1，然后再向四个位置进行深度优先访问，全部完成后再将VIS矩阵对应位置置为0（这一步很关键）。而且要注意在Python的子函数中加入global关键字修饰ans和VIS矩阵global ans,vis;然后遍历每个起点位置进行深度遍历即可。</li><li>天干地支<br>使用数组存储天干和地支，推出第0个元素是什么后，然后天干使用与10取余，地支与12取余即可，然后使用该索引即可</li><li>重复字符串<br>无法重复的情况只有一种：当字符串长度无法被K整除时。此时我们返回-1，其他情况我们直接根据K将其分组，然后在对应位置的统计元素个数，然后将其他不相同的元素改为出现次数最多的元素。使用这种贪心算法，我们就可以得到答案了。但是要注意k=1的时候直接将元素个数减去出现最多的元素出现个数即可。</li><li>答疑<br>看上去很麻烦，但其实，只要存储（离开-进入，发信息-进入）两个信息，然后使用贪心算法即可。</li><li>补给<br>不会</li><li>蓝跳跳<br>不会</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法常用技巧</title>
      <link href="/2022/06/18/bian-cheng/suan-fa-chang-yong-ji-qiao/"/>
      <url>/2022/06/18/bian-cheng/suan-fa-chang-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">等差数列求和：Sn=(a1+an)*n/2;Sn=n*a1+d*(n-1)*n/2等比数列求和：Sn=a1*(1-qn)/(1-q);Sn=(a1-an*q)/(1-q)组合数学：A(n,m)=(n!)/(n-m)!;C(n,m)=A(n,m)/m!=(n!)/((n-m)!*m!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>唯一分解定理</strong></p><p>一个大于1的正整数N，如果它的标准分解式为N=p1a1+p2a2+….+pnan，那么它的正因数为（a1+1)(a2+1)…(an+1),<br>其中pi为素数（1不为素数）</p><p><strong>斐波那契数公式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    sqrt5 <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">**</span><span class="token number">0.5</span>    fibN <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> n<span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span>fibN <span class="token operator">/</span> sqrt5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="做题小技巧"><a href="#做题小技巧" class="headerlink" title="做题小技巧"></a>做题小技巧</h1><p>综合利用哈希表和前缀和可以解决连续子数组的问题。</p><p>有时候通过将问题的值进行变换，可以将问题转化为一个我们已知的问题或较为简单的问题，例如将0替换成-1，这样就可以使用通过前缀和的知识点来解决子数组中有相同0和1的问题。</p><p>子函数内使用global全局函数关键字</p><p><strong>遍历的小技巧</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> w <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span>：i表示索引，w为实际从server中取出来的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>set1=set()</td><td>创建集合</td></tr><tr><td>set1.add(6)</td><td>增加元素</td></tr><tr><td>set1.remove(5)</td><td>删除元素</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>find(sub)</td><td>检测sub是否存在于字符串中，有则返回索引值，无则返回-1</td></tr><tr><td>count(sub)</td><td>判断sub在字符串中出现的次数</td></tr><tr><td>isalnum()</td><td>如果字符串至少有一个字符并且所有的字符都是字母或数字则返回True，否则返回False。</td></tr><tr><td>isalpha()</td><td>如果字符串至少有一个字符而且所有字符都是字母则返回True，否则返回false</td></tr><tr><td>isdigit()</td><td>如果字符串只包含数字则返回True，否则返回false</td></tr><tr><td>join()</td><td>以字符串为分隔符，插入到sub中所有的字符之间n=””.join(n)</td></tr><tr><td>replace(old,new[,count])</td><td>把字符串中的old子字符串替换成new子字符串，如果count指定，则替换不超过count次</td></tr><tr><td>split(sep=None,maxsplit=-1)</td><td>分隔字符串，默认按照空格作为分隔符切片字符串</td></tr><tr><td>splitlines()</td><td>按照“\n”分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>strip([chars])</td><td>删除字符串前边和后边的所有空格，chars参数可以定制删除的字符</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>copy.deepcopy()</td><td>深复制，真正的新建一个数组进行赋值，而不是传引用。使用前需要import copy。</td></tr><tr><td>clear()</td><td>清空列表中的元素，留下一个空列表。</td></tr><tr><td>append()</td><td>向列表添加元素</td></tr><tr><td>extend()</td><td>使用一个列表来拓展一个列表</td></tr><tr><td>remove（sub）</td><td>删除sub元素</td></tr><tr><td>insert（num,index）</td><td>在index处插入一个num</td></tr><tr><td>pop（index）</td><td>弹出index处元素</td></tr><tr><td>count（）</td><td>计算出现次数</td></tr><tr><td>index（）</td><td>返回元素位置</td></tr><tr><td>reverse（）</td><td>翻转列表</td></tr><tr><td>sort（）</td><td>排序</td></tr></tbody></table><h2 id="Math库"><a href="#Math库" class="headerlink" title="Math库"></a>Math库</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>math.pow(x, y)</td><td>返回x的y次方</td></tr><tr><td>math.ceil(x)</td><td>返回不小于x的整数</td></tr><tr><td>math.fabs(x)</td><td>返回x的绝对值</td></tr><tr><td>math.floor(x)</td><td>返回不大于x的整数</td></tr><tr><td>math.fsum([x, y, …])</td><td>返回无损精度的和</td></tr><tr><td>math.sqrt(x)</td><td>返回x的平方根</td></tr></tbody></table><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="datatime"><a href="#datatime" class="headerlink" title="datatime"></a>datatime</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#返回结果是三元组(年号，第几周，第几天)</span>date<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%j"</span><span class="token punctuation">)</span>        <span class="token comment">#计算输入的日期是一年中的第几天</span>end<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2020</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dela<span class="token operator">=</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> start<span class="token punctuation">.</span>day<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">or</span> start<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment">#月初或周一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先队列是按照递增进行排列的，弹出的数据是最小的元素，如果想让其递减的排列，可以在前面乘一个-1.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> heapq     <span class="token operator">%</span>导入库函数heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>     <span class="token operator">%</span>将数组转化为优先队列heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>     <span class="token operator">%</span>往优先队列中插入元素num<span class="token operator">=</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>     <span class="token operator">%</span>从优先队列中取出元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Potato</span><span class="token punctuation">:</span><span class="token comment">#声明类名</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#声明构造方法，self用于在类中传递各种属性</span>          self<span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">def</span> <span class="token function">kick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫%s。"</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>齐木楠雄的灾难_86</title>
      <link href="/2022/06/18/ying-ping/qi-mu-nan-xiong-de-zai-nan-86/"/>
      <url>/2022/06/18/ying-ping/qi-mu-nan-xiong-de-zai-nan-86/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>个性突出的配角。本剧最大的特点就是塑造多个个性突出的配角，从而合理化了故事的进行，也使得故事更加搞笑。每个人物都代表着一种属性：燃堂是运动天才加傻，海腾是中二，心美是美貌，梦原是花心，灰吕是热血，鸟束是好色……还有齐神父母一直发狗粮。</li><li>强悍的造梗能力。照桥心美的“哦呼”一开始没什么搞笑效果，但是多次不同情境下的使用使得“哦呼”深入人心。还有心美一直想让齐神“哦呼”，最后齐神真的“哦呼”了也给大家发了一手好糖。还会经常与其他作品进行联动。</li><li>使得情节进行的小细节。本来齐神作为一个想要低调的超能力者，没什么事情能打动他。为了故事的进行，作者给他加了两个动力——咖啡果冻和妈妈的敦促。</li><li>慢慢成长的各位角色。看完全剧就会发现剧中的角色相对于开始和结束时发生了很大的变化。齐神慢慢的开始接受自己的超能力，开始接受新的朋友；海藤开始慢慢的走出中二，也越来越温柔；心美从一开始的想让齐神屈服变成喜欢上齐神……但这些变化不是短暂的，甚至可能你都没有注意到。我是看完了完结篇，再从新看第一季的时候发现的。由于记忆的问题，角色的缓慢成长使得我们慢慢接受了这样的人设。</li><li>合理的超能力体系和完整的逻辑结构。有超能力的设定之后，最容易的产生的问题是超能力体系的崩溃或者遗漏超能力的细节，幸好本剧没有产生这些问题，没有存在明显的逻辑硬伤。还有就是为什么齐神不想超能力暴露这个核心设定，虽然开头有进行说明，但是说服力不够，后面加上了校园欺凌的故事后就显得合理，而且也为故事增加了深度。还有每年都重读高二的故事，是因为火山爆发。</li><li>在搞笑之余也有一些思考。本剧总会在不经意间说出一些有意思的话语，这使得故事不单纯是为了搞笑而搞笑，他还蕴含了一些作者想要告诉我们的道理。</li><li>声优的吐槽。本剧一部分的笑点就在于齐神的吐槽，声优很好的完成了这个任务，语速足够快和清晰，而且冷漠的语调搭配搞笑的话语更有搞笑的效果。</li><li>小短片的形式。由于故事不是连贯的，出于转场的需要，需要分成不同的小部分。一个个小短片的形式就很适合，不用过渡，直接开始下一个故事。而且这个故事不好笑不会影响的下一个故事。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>制作贫穷应该是本剧最大的缺点了。长期使用定格画面，运动时候使用画面平移来表现，动作不够流畅等等都是客观存在的问题。但是制作组可以说比较好的解决了这个问题，起码没有把角色画崩，人物基本正常，而且把表现美丽的心美画的足够漂亮（还加了光芒）。</li><li>有一些故事中的梗领会不到，比如说超级平凡的井口工。</li><li>有个别角色的塑造比较讨人厌，比如目良同学，为了夸张效果使得这个人物比较讨人厌，而且不同于其他角色有的闪光点，目良同学仿佛只有缺点。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰海战记_94</title>
      <link href="/2022/06/18/ying-ping/bing-hai-zhan-ji-94/"/>
      <url>/2022/06/18/ying-ping/bing-hai-zhan-ji-94/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>塑造了拉谢拉特这个复杂的人物。让人又爱又恨，爱的是他坚持自己的最初的理想，忍着恶心去干坏事来达到自己的目的；恨的是他亲手破坏了无数个家庭的幸福，烧杀抢掠，无恶不作。24话时，面对国王给出的两个选择——牺牲威尔士还是王子，习惯于牺牲他人的拉谢拉特做出了第三个选择——牺牲自己。他砍下了国王的头颅，自己也毅然决然的去往死亡，这一刻他达到了他人生的顶点，让观众为他惋惜。</li><li>合理的人物行为。故事中的人物行为在当时的那个时代显得很合理，不会有一种很突然的感觉，每个主要人物的行为方式都有其内在的逻辑结构。而且人物的性格也不是一成不变的，随着事情的发生，人物的性格会有不同的变化，而且前面会留下伏笔。情节推进合理，没有什么逻辑上的硬伤。</li><li>考证严密和细致的背景刻画。制作组为故事的背景制作了很多符合当时背景的资料，使得这个架空历史的故事更具有真实感。而且精美而又细致的作画使得观众更容易接受，剧中我最喜欢的就是雪景和秋天的树林，非常精美。</li><li>不删改暴力场景，而是直观的呈现给观众。其实最美的故事就在于真实，故事给观众呈现了当时真实的暴力，真实的罪恶情景。搭配着动感十足的打斗场景，使故事增色不少。</li><li>透过细节去体现战争的残忍。本剧主人公托尔芬从一个爱笑的温暖男孩变成一个被仇恨蒙蔽双眼，杀人如麻的冷血杀手，好心收留托尔芬却导致全村被杀光的老太太，残暴成性的维京人……等等的这些都体现着战争的残忍。</li><li>充满哲理的话语。托尔兹的：“真正的英雄不需要剑。”，王子在关于爱所表述的话语。本剧的核心就在于对于爱的理解。托尔兹的理解是出世的，他希望可以远离杀戮，到达神应许之地——文兰。王子和拉谢拉特的理解是入世的，他们要靠自己的努力在人世间创造一个没有杀戮，宜居的地方，为此他们不惜进行残忍的杀戮。</li><li>会在恰当的地方加入一些小幽默。由于本剧的题材比较沉重，长期在这种阴暗环境下，观众容易产生退番的情绪，因为低潮太多了。而恰当的加入一些小幽默使得观众可以在沉重的氛围下轻松一下，从而更好的观看。</li><li>完美的OP和ED，还有良好的配合气氛的配乐。第一期的OP是我最喜欢的，OP的变化随故事的进行而进行变化，而且OP对故事起到了一个解释的效果。让人很快的进入故事的节奏。配乐更是好，和情节高度的契合，对情感抒发起到了重要的作用。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>普通军队和主要人物的打斗太单一，基本都是主要人物在割草式杀戮。</li><li>托尔芬的武力提升稍微有点快。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死亡笔记_90</title>
      <link href="/2022/06/18/ying-ping/si-wang-bi-ji-90/"/>
      <url>/2022/06/18/ying-ping/si-wang-bi-ji-90/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol><li>精彩的智斗。作为一部智斗漫画，智斗当然是故事的主要卖点，本剧在这个方面做得非常好，其中最重要和最精彩的当然是L与夜神月的对决，L在巨大的劣势下还是差点将月逼入绝境，虽然L被杀，但是他的成果为月的失败埋下了伏笔。M和N与月的对决也同样精彩，但是还是差了那么一点。</li><li>一些小细节做得很好。比如说月用于藏死亡笔记的抽屉设计，还有月为了检查是否有人进入自己房间的所放的小字条和有所偏移的门把手，等等的这些都为这个智斗游戏增加了代入感。</li><li>塑造了个性十足的配角。在剧中我最喜欢的角色不是L ，也不是月，而是月的父亲——夜神总一郎。依我看，他才是剧中的正义的代表，他充满了正义感，但不同于他的儿子极端的正义。虽然他一直被儿子欺骗，但是他还是愿意去相信他，最终含着微笑离开人世，这也许是对他最大的宽慰吧。还有就是最后出现的魅上照，我其实挺喜欢这个充满正义感的角色，但是也许是校园暴力的压迫吧，他还是走向了极端的正义，最终导致了悲剧。</li><li>别出心裁的设计和神学意味。在剧的开头会有吃苹果的音效，在结尾会有‘奇乐’的声音，这些都很有心思。吃苹果是一方面是对应硫克喜欢吃苹果，另一方面也是对应亚当和夏娃偷吃禁果，也许夜神月利用死亡笔记就如同偷吃禁果一样，带着人类走向一个悲剧。在剧中这样的神学隐喻还有不少，比如OP中就借用了多部名画，像圣母怜子图，米开朗琪罗的壁画，夜神月对应基督等等，给作品增加了更深一层的意味。</li><li>常用两个人物对比一起表示。这样做，使得对决的氛围更加的浓厚，而且两者说的话特意写的一样，这样表达形式使得紧张感瞬间营造了起来。</li><li>精彩的第一OP和完美的配乐。与第二OP相比，我更加喜欢第一OP，节奏强烈但不会让人感到不适，反而将紧张的基调定了下来。而且歌词与故事高度契合。值得一提的是配乐，真正做到与故事配合，很好的调动了观众的情绪。</li><li>环境。剧中经常会利用环境来表现人物的情绪，还有不少给观众留下想象空间的环境描绘。比如说月死后，死神硫克看着下面灰沉沉的尘世，镜头慢慢上移，随后看到一轮弯月发出淡淡的光芒照射着大地。还有L死前，在大雨中，轻轻地对月说：“我听到了钟声。”瓢泼的大雨和像是在燃烧的闪电映衬着L的死亡。</li><li>富有魅力的月和他的配音。作为少有的反派主角（也许说是反派不太合适，但是一直找不到很恰当的形容，但是我觉得真的可以算是反派），很容易引发观众对于故事的反感，但是显然制作组对这个问题的解决是比较好的。淡化了对正邪的讨论，而是将故事的重心放在的智斗方面，而且月身上的个人魅力和目的也很好的抵挡了一部分的反感，甚至现在还是不少的人是认同月的做法的。而且月的声优充满磁性的声音和随意变化声调也为月平添了不少魅力。</li><li>后面登场的角色通常前面会进行铺垫。比如说夜神总一郎死后就有一个人加入了搜查奇乐的队伍，细心看的观众可能会发现，其实这个人在第五话就已经出现，是愿意继续追查奇乐的人，只是因为不接受L的要求而没有参加。还有就是高田清美在大学期间就和月是情侣关系，所以和月产生感情也顺理成章。这样就使得故事更为合理，而且看的时候也像是发现了彩蛋一样。</li><li>心理斗争。作为L和月斗争中的重点部分，L和月的心理战也是剧中的一大看点，也让我觉得原来一句话原来有这么多的含义。幸好这些心理战会有月进行解释，好让我们都可以看懂。</li><li>写实，偏黑暗的画风。作为一个题材较黑暗的番剧，写实和偏黑暗的画风显然让人更容易入戏，而且画风真的很合的我的口味，灰黑的城市，阴暗的天空，磅礴的大雨，飞翔的乌鸦…为故事定下了一个黑暗的基调。</li><li>淡化杀人情景。通常只会用一段音乐明快加上罪犯的死亡，使用死亡笔记的人奋笔疾书来表现杀人的情形。最大程度上淡化杀人的情形。</li></ol><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol><li>弥海砂的人物绘画。按照人设，弥海砂在剧中应该是长得很可爱，很受人喜爱的偶像，理应画的比较好看，但是不知道为什么弥海砂的样子经常会画崩。在有名字的角色里面，除了夜月神的妈妈之外，都画得比弥海砂要好看。我也不明白是为什么，按照剧中其他女角色的样子来看，制作组应该是很有实力的，比如南空直美，画得就很好看。</li><li>过于重金属的第二OP。作为情节过渡，表达夜月神进入了疯狂状态而改变的第二OP，但是真的太过于重金属了，每次我都是跳过的，OP本来是用于帮助观众进入氛围的，显然这个OP没有起到这个作用。但是这个只是我的个人观点，有些人还是很喜欢这个OP。</li><li>有些搞笑的情节处理的不太好。有时候出于轻松氛围的目的，会有一些小幽默的情节，但是有些处理的不太好，会有一些出戏的感觉。比如松田在夜神总一郎死后的反应，作为松田的恩师，松田的反应显然不太自然。</li><li>有点小漏洞。我觉得剧中最不合理的地方就是月和高田清美在酒店里用酒店的便签相互交流，这不是明摆着来怀疑你吗?我觉得以月的智慧应该不会犯这么低级的错误。</li></ol><h1 id="一些常见问题"><a href="#一些常见问题" class="headerlink" title="一些常见问题"></a>一些常见问题</h1><ol><li>月在L死之后是不是被强行降智？<br>这个我认为不是的。很多人认为月之前可以和L打个平手，但是到了和N和M对决的时候经常会出差错，所以认为月被强行降智。但是我觉得不是的，从一开始L和月就不是同一水平的，之所以月能够取得均势，是因为有死亡笔记这个外挂的帮助的，所以L的推理的时候就容易被限制着。但是L还是可以将月逼入绝境，还查出来死亡笔记，这就足以证明L是在月之上的。而月也不是那么厉害，在L的对决中也经常考虑不周而引发危机，比如被L激怒而杀死替身L从而暴露位置，在杀FBI的时候也没有掩饰好自己，幸亏运气好，不然早以暴露，最后用于脱身的假规则也被L看穿。若不是利用雷姆对弥海砂的关爱，杀掉了L，月也难以脱身。而与L调查的难度相比，N和M的环境就好的多了，首先最难的死亡笔记的问题已经被L解决了，然后奇乐基本已经确定为月。这样月在本方的调查人员已经不信任自己，又同时面对N和M的威胁，若不是魅上照的犯错，月已经胜利，这样我觉得很难说是强行降智。而且虽然对决不如L时精彩，但是同样很不错，因为死亡笔记已经暴露了，所以智斗有所减弱也是正常情况。</li><li>智力排名和综合能力排名？<br>智力排名：L&gt;夜神月&gt;N&gt;M<br>综合能力排名：L&gt;夜神月&gt;M&gt;N</li><li>关于夜神月的行为是否正义？<br>首先我不认为这是正义的行为。我认为的正义的行为，是包括两点的：程序正义和结果正义。只有同时满足两点这才是正义的行为。月的行为明显违反了程序正义，他杀的嫌犯，未经法律审判，或者罪不至死。月只是靠着自己的正邪观来杀人，这和独裁者有何区别。让我试想一下这样一个情景：一个人拿着刀肆意地杀害他认为有罪的人，你会认为这是正义的行为吗？哪怕他真的杀的人是你认为的坏人。那你能保证他每次都能杀掉你认为的坏人，不会因为和你价值观不同而杀掉你所认为的好人。一个人真的有权力去制裁另一个人吗？这是我们值得思考的问题。所以我们才需要法律，去制裁对整个社会不利的人，而不是根据个人喜好而采取定夺。像那些FBI警官，像L，他们是坏人吗？可月还是把他们杀掉了。你可以说是因为他们想捉住月，所以月才杀他们的。所以这样还是正义吗？不就是根据自身喜欢来定夺一个人的生死了吗？在剧中淡化了杀人的残酷，这是艺术手法，但是在真正的生活中，杀死一个人是需要严肃考虑的问题。而且最后月已经变了，他也不是那个一心为了正义的男孩了，他是一个利用爱自己的人的感情，在父亲死前还想利用父亲的混蛋。他只是一个被权力侵蚀，一心想成神的普通人罢了。也许，从他捡到死亡笔记的时候，他的悲剧已经写好。</li><li>死亡笔记是不是需要被禁？<br>我认为在低龄人士可以观看的大型网站确实不应该存在死亡笔记，但是可以通过一些小网站和种子这些不应该禁。在没有分级制度的情况下，这是折中的办法。在没有形成自己的三观和没有看过较多观点的情况下，很容易被月的行为洗脑。因为月的个人魅力确实大，而且通过诡辩和目的是为了正义的借口，很容易让孩子们像月学习，时至今日还是有不少的人是认同月的行为的。但是作为一部优秀的作品，其重点是在于智斗，很应该给那些可以正确看待月的行为的人看。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心理测量者</title>
      <link href="/2022/06/18/ying-ping/xin-li-ce-liang-zhe-93/"/>
      <url>/2022/06/18/ying-ping/xin-li-ce-liang-zhe-93/</url>
      
        <content type="html"><![CDATA[<ol><li>精美的画风，充满着未来感的画面，不仅酷，而且给故事增添了真实感。</li><li>充满魅力的人设，剧中的主要人物都有着自己独特的个性，猎犬一般的男主，心中永远积极乐观的女主，让人又爱又恨的反派男二，内心矛盾的男三，成熟大叔的男四，外表慵懒，内心刚强的男五，睿智的教授，冰美人女二，活泼的女三。每个主要角色都有着其丰满的角色塑造。你会感觉到他们行事有着其自身内在的逻辑，有一种人物推动故事行进的感觉，而不是编剧推着人物前行的感受。虽然一开始的时候觉得男三宜野座伸元有点烦人，但是后面揭示早年因父亲是潜在犯而饱受歧视，自己并肩作战的朋友变成潜在犯，人物的逻辑逻辑就理顺了。到最后父亲征陆舍命救他的时候，虽然这个故事情节有点老套，但是制作组的用心和前期的铺垫，还是感动到我了。后面宜野座摘下眼镜的时候跟是帅到我了，这时候，宜野座伸元的角色就完全丰满起来了。</li><li>一点感悟，其实比较有意思的一点是主角们的行动与自己许下的愿望相违背了。女主希望男二不要成为“猎犬”，成为一个真正的“警察”，男主也希望自己能够做到。但是最终男主还是没能做到。男三执念不能成为潜在犯，但是最终还是成为了潜在犯。但是我正是因为这里喜欢上这部剧的，说实话，我真的担心制作组弄出一个捉住慎岛圣护后不杀死，而是交给西比拉“制裁”的剧情。当狡啮慎也在慎岛圣护的头上开枪的那一刻，“爽”，这就是我唯一的感受。如同慎岛圣护所说“被你以外的人杀死的情景，我无论如何都无法想象”。男二用他的死亡为这个故事画上了一个完美的句号。</li><li>复杂的“反派”——慎岛圣护，这是一个很有意思的“反派”，从感性的角度上说，我恨不得冲进去给他一拳，但是从理性的角度上说，我其实挺认可他的思想——“人的行为应由自己做出，并为此承担责任。”同时，我也不认可西比拉这种假借公正，实际上是由一群特权者掌握话语权的系统。只要他们认为你是潜在犯，即使你没有犯罪，而有些人却可以依靠免罪体质，犯罪而不用接受制裁，反而可以进入权力中心。说实话，我对西比拉系统的厌恶更甚于慎岛圣护。慎岛圣护并不是一个单薄的角色，而是一个充满着魅力，独特的角色。声优的卖力表演更是为该角色平添了不少魅力。特别是拒绝西比拉系统，坠机逃脱的情节，即使是我这个讨厌他的人也被他的魅力吸引到了，那种优雅，从容不迫，充满自信塑造了这个富有生命力，让人又爱又恨的角色。</li><li>恰到好处的名言引用，心理测量者应该是我见过最喜欢引用名言的动画。而且他优秀就在于引用的恰到好处，他并不是那种生搬硬套，让人觉得强行装逼的，而是把名言融入到情节与对话之中，十分自然，为故事平添了不少韵味。而且引用名言并不如我们想象中简单的事情，事实上，这是一件非常困难的事情。因为引用的名言需要通俗易懂，不能影响到观众的观看，其次就是自然，要避免生搬硬套。在我比较中二的时期，就喜欢说话的时候引用名言，就别提有多尴尬了。所以想体验一下难度的话，不妨可以自己尝试一下。</li><li>故事的核心才是最优秀的地方——“要正义，还是要秩序”。从正义的角度上来说，西比拉无疑是最邪恶的犯罪者，由最穷凶极恶的犯罪者的头脑构成。然而却是由这些犯罪者来判断着人们的善恶。而且假借系统之名，实际上是极少数人压迫绝大多数人的极权社会。但是从社会稳定的角度上看，西比拉系统确实很好的维护了治安，极大的降低了犯罪，人们生活在一个无比安全的环境下，享受着社会上极度丰富的生活，把自己的生活大部分都交给了机器人。这究竟如何抉择——“是危险的自由，还是稳定的封闭”。这是一个永恒的问题，有人会认为“不自由毋宁死”；自然也有人会认为“稳定胜于一切”，安稳的生活是普通人最大的幸福。本剧也讨论了这个问题，是将全部抉择都交给西比拉系统判定，自己不用做出艰难的决定。连警察是否能开枪都是由西比拉系统判断，警官不需要承担任何责任，只要扣下扳机即可。还是自己做出自己的判断，并承担对应的责任。对于上面的问题，老实说，我并没有找到自己满意的答案，可能一直都找到答案，但是思考本身就是有意义的。</li><li>本剧最令我印象深刻的是慎岛圣护在女主面前杀死她朋友的剧情，本以为危机已经被解决了，结果还是被这样残忍的杀害。而且最令我难受的是那种无力感，面对这样的情况，我能拿起那杆枪，扣下扳机吗？尤其是在故事的那种背景下。</li><li>脑域这个设定还挺有意思的，可惜我之前看过类似的设定。</li><li>本剧从各方面看都是一部优秀的动画。可能有些人不喜欢比较致郁，血腥的情节，但其实还好。我觉得比较大的问题反而是西比拉系统的令人反感，与充满魅力的“反派”相比，西比拉对观众实在没有什么吸引力。让人觉得为什么主角团要维护这个腐朽的制度，对主角团行为的正当性产生一定的削弱。如果你试着代入慎岛圣护的视角，可能这就是个不一样的故事了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel操作技巧</title>
      <link href="/2022/06/09/ban-gong/excel/"/>
      <url>/2022/06/09/ban-gong/excel/</url>
      
        <content type="html"><![CDATA[<h2 id="01-Excel入门"><a href="#01-Excel入门" class="headerlink" title="01 Excel入门"></a>01 Excel入门</h2><p>跨列居中：对齐方式-水平对齐-选定“跨列居中”（Office365 版本）</p><h3 id="自动调整栏宽"><a href="#自动调整栏宽" class="headerlink" title="自动调整栏宽"></a>自动调整栏宽</h3><ul><li>单栏调整：双击间隔线。</li><li>多栏同宽调整：选定栏数，拖动任一栏宽度调整。（调整列亦同）。</li></ul><h3 id="日期输入"><a href="#日期输入" class="headerlink" title="日期输入"></a>日期输入</h3><ul><li>输入使用斜线格式，方便excel函数等功能计算使用</li><li>使用“右键单元格格式-数字-日期”更换日期格式显示</li><li>更换后日期栏显示“#######”，表示日期文字过长，调整栏宽即可</li><li>“Ctrl+；”输入今日日期，向下拖动自动填充往后日期，拖动后方框右下角图标可设置填充格式，向下输入选项，有重复内容，右键-从下拉列表中选择，可从已输入选项中选择输入</li></ul><h3 id="计算总金额"><a href="#计算总金额" class="headerlink" title="计算总金额"></a>计算总金额</h3><ol><li>在结果栏输入“=”，无需输入数值坐标，直接选定条件数值，输入运算符号，回车自动显示结果</li><li>复制计算结果，粘贴到需计算的第二栏，直接得出第二栏计算结果</li><li>选择结果，向下拖动，自动计算</li><li>添加货币格式a 选定数值，在数字功能区选择货币格式，功能区内可选择增减小数点。b 添加后，可复制该区域，使用格式刷将货币格式粘贴到另一区域</li></ol><h2 id="02-表格设计"><a href="#02-表格设计" class="headerlink" title="02 表格设计"></a>02 表格设计</h2><h3 id="表格框线设计"><a href="#表格框线设计" class="headerlink" title="表格框线设计"></a>表格框线设计</h3><ol><li>打印前预览，默认网格线不被打印，需自行添加设计表格框线（预览符号：快速访问工具栏，没有可在工具栏小箭头内添加）</li><li>添加表格框线a 页面布局-&gt;工作表选项-&gt;网格线-&gt;打印（样式呆板）;b 手动设计：开始-&gt;字体-&gt;框线（选择颜色和样式）</li><li>画框方式a 画笔（两种，绘制外框，绘制内框，按Shift切换橡皮功能，按esc退出）;b 选取范围，套用类型</li></ol><h3 id="背景设计"><a href="#背景设计" class="headerlink" title="背景设计"></a>背景设计</h3><ul><li>excel背景（背景无法打印，仅设计表格时美观用）：页面布局-&gt;页面设置-&gt;背景</li><li>设计表格背景：开始-&gt;字体-&gt;油漆-&gt;选择颜色</li><li>隐藏网格线：页面布局-&gt;工作表选项-&gt;网格线-&gt;查看（取消勾选）</li></ul><h2 id="03-冻结窗格与分割视图"><a href="#03-冻结窗格与分割视图" class="headerlink" title="03 冻结窗格与分割视图"></a>03 冻结窗格与分割视图</h2><p>冻结窗格：选定需冻结窗格的下一栏/列-&gt;视图-&gt;窗口-&gt;冻结窗格-&gt;冻结窗格</p><p>拆分视窗：选定需拆分的大小-&gt;选定那一栏-&gt;视图-&gt;窗口-&gt;拆分</p><h2 id="04-资料排序"><a href="#04-资料排序" class="headerlink" title="04 资料排序"></a>04 资料排序</h2><p>单栏排序：选取排序栏中任一存储格（划重点）–排序与筛选–升序或降序（中文排序依照笔画多少）</p><p>多栏排序：选取表格内任一存储格-&gt;排序与筛选-&gt;自订排序-&gt;先指定第一层排序-&gt;新增层级-&gt;指定第二层排序</p><p>自订清单（依照用户自己设定的顺序来排列资料）：排序与筛选-&gt;自定排序-&gt;选择要排列的栏位-&gt;顺序选定为自订清单-&gt;清单项目-&gt;输入自己想要的顺序。PS：自订清单可以按照自己设定的顺序自动完成内容填充</p><p>删除清单：删除清单-&gt;选择建立的清单-&gt;删除</p><h2 id="05-资料筛选"><a href="#05-资料筛选" class="headerlink" title="05 资料筛选"></a>05 资料筛选</h2><p>筛选：点选表格内任一存储格–排序与筛选–筛选–类别栏–按条件筛选。PS：可同时在多个栏位中进行筛选，筛选时可按正序／倒序排序</p><p>模糊比对功能：类别栏–文字筛选–开始于–“李”。PS：以“李”姓业务员为例</p><p>色彩筛选+排序：上色（按住control不放并选取）-&gt;依色彩排序-&gt;自订排序-&gt;选择要排序的栏位-&gt;“值”为储存格色彩</p><h3 id="移除筛选"><a href="#移除筛选" class="headerlink" title="移除筛选"></a>移除筛选</h3><ol><li>类别栏–清除筛选</li><li>还原表格–排序与筛选–清除／直接点选筛选</li></ol><h2 id="06-格式化为表格-amp-交叉分析筛选器"><a href="#06-格式化为表格-amp-交叉分析筛选器" class="headerlink" title="06 格式化为表格&amp;交叉分析筛选器"></a>06 格式化为表格&amp;交叉分析筛选器</h2><p>表格生成方式（自动侦测表格大小）：页面布局-&gt;色彩-&gt;可更换多种配色</p><p>取消表格：表格样式-&gt;套用无-&gt;清除表格样式</p><h3 id="合计列（汇总行）"><a href="#合计列（汇总行）" class="headerlink" title="合计列（汇总行）"></a>合计列（汇总行）</h3><ul><li>最后一栏会自动进行加总，也可以切换其他计算公式（存储格右侧三角形）</li><li>可以将此栏位公式向左套用（拖动存储格右下角黑十字）</li></ul><h3 id="添加行或列"><a href="#添加行或列" class="headerlink" title="添加行或列"></a>添加行或列</h3><ul><li>添加行：选取汇总行上一行最后一列，按 tab 键</li><li>添加列：输入新一列列名，在此格内按下 enter 键</li><li>套用第一行公式直接拉右下角十字即可</li></ul><h3 id="交叉分析筛选器（切片器）"><a href="#交叉分析筛选器（切片器）" class="headerlink" title="交叉分析筛选器（切片器）"></a>交叉分析筛选器（切片器）</h3><ul><li>表格-&gt;插入交叉分析筛选器（切片器）-&gt;勾选想筛选的栏位-&gt;生成面板</li><li>面板可调整大小、栏位，按 delete 可删除，右上角可清除筛选条件</li><li>同时显示多个项目：按住 control 不放选择</li><li>多重筛选：选取其他面板内的选项</li></ul><h2 id="07-设置格式化的条件"><a href="#07-设置格式化的条件" class="headerlink" title="07 设置格式化的条件"></a>07 设置格式化的条件</h2><p>更改／删除条件：选取要更改的列-&gt;条件格式-&gt;管理规则-&gt;编辑规则-&gt;可重新指定条件</p><p>数据条／色阶／图标集 –显示更有趣</p><p>清除规则：条件格式-&gt;清除规则-&gt;清除整个工作表的规则</p><h3 id="设定格式化"><a href="#设定格式化" class="headerlink" title="设定格式化"></a>设定格式化</h3><ul><li>选取想筛选的栏位所在列–功能区右上角“条件格式”–自行设定条件和突出显示样式</li><li>栏位下方单元格新增突出显示的内容会自动填充显示样式</li></ul><h2 id="08-工作表设定-amp-合并汇算"><a href="#08-工作表设定-amp-合并汇算" class="headerlink" title="08 工作表设定&amp;合并汇算"></a>08 工作表设定&amp;合并汇算</h2><p>工作表复制（不同excel文件之间）：打开两个excel文件-&gt;点选工作表右键-&gt;移动／复制-&gt;选取移动路径<br>-&gt;表格位置-&gt;建立副本</p><p>工作组：按住 control 不放生成工作组</p><h3 id="合并计算"><a href="#合并计算" class="headerlink" title="合并计算"></a>合并计算</h3><ul><li>在需要计算的表格之外建立新的空白工作表-&gt;功能区-&gt;数据-&gt;合并计算</li><li>选取表格范围-&gt;如顶端列、最左栏无数字-&gt;勾选则不计算-&gt;“+”增加范围</li><li>挨个添加工作表需要计算的范围-&gt;勾选“创建指向原数据的链接”-&gt;可查看数据来源</li></ul><h2 id="09-图表制作"><a href="#09-图表制作" class="headerlink" title="09 图表制作"></a>09 图表制作</h2><p>表格制作步骤：框选整个表格（必须包含行、列标题）-&gt;插入-&gt;选择表格样式</p><p>图表移动：图表设计栏右上角-&gt;移动图表-&gt;可选择移动到另一工作表／将图表生成全新工作表</p><p>图表內添加文字或项目：图表设计-&gt;添加图表元素-&gt;选取要添加的内容</p><p>表格变化与图表变化同步：新增表格内容后-&gt;点选图表-&gt;出现框选部分-&gt;将新增内容框选进范围内-&gt;表格变化</p><p>直方图点击直方就可以进行选择填充的图像，比如说可以添加我们增加想要的图像。</p><p>点击图像可以调整选择的数据范围。</p><p>圆形图可以双击图形，并将想要突出的部分分离出来。</p><p>点击图形后可以通过设计按钮对图形进行自定义操作。比如切换行列。</p><p>框选空白位置，点击插入按钮选择迷你图，在选择数据范围即可画出走势图。</p><p>散点图可以点击+按钮选择趋势线对图形进行简单分析。</p><p>组合图可以用于实现不同数量级的数据的展示。</p><h2 id="10-枢纽分析表"><a href="#10-枢纽分析表" class="headerlink" title="10 枢纽分析表"></a>10 枢纽分析表</h2><p>建立：点选表格内任一存储格-&gt;插入-&gt;数据透视表-&gt;可选范围和位置。PS：勾选想要显示的栏位标题-&gt;拖拽标题至不同位置会在数据透视表发生相应变化。</p><p>排序：点选数据透视表內任意一格-&gt;右键-&gt;排序</p><p>查看数据来源：点选数据透视表内某格-&gt;左键×2</p><p>设置值的显示方式：选择要设定的选项-&gt;数据透视表字段-&gt;汇总方式、数据显示方式</p><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><ul><li>现有列筛选：右侧三角（清除-&gt;选单内下拉）</li><li>筛选器筛选：勾选筛选项拖拽至筛选器内</li></ul><h3 id="资料分组"><a href="#资料分组" class="headerlink" title="资料分组"></a>资料分组</h3><ul><li>按住cotrol不放点选对象-&gt;右键-&gt;组成群组</li><li>取消-&gt;选择群组-&gt;右键-&gt;取消</li></ul><h2 id="11-列印分页设定"><a href="#11-列印分页设定" class="headerlink" title="11 列印分页设定"></a>11 列印分页设定</h2><p>通过分页线调整打印页面范围</p><p>页面布局可在打印时出现网格线和标题</p><p>设定页面宽度和高度可以自动缩放</p><p>只需打印几行资料-&gt;框选内容-&gt;设定打印范围</p><h2 id="12-页首，页尾设计-amp-浮水印制作"><a href="#12-页首，页尾设计-amp-浮水印制作" class="headerlink" title="12 页首，页尾设计&amp;浮水印制作"></a>12 页首，页尾设计&amp;浮水印制作</h2><p>点击视图-&gt;页面布局，就可以看到出现了页眉和页脚等信息，点击所选位置即可进行操作。</p><p>点击页眉和页脚处还可以选择想要的格式。</p><p>浮水印的利用图片即可，在图片处按enter键可以将图片往下移动。</p><p>点击设置图片格式可以对图片进行更深一步的处理。</p><h2 id="13-逻辑函数IF"><a href="#13-逻辑函数IF" class="headerlink" title="13 逻辑函数IF"></a>13 逻辑函数IF</h2><p>普通IF函数结构(标点符号为英文)：缺点：只能判断两个条件=IF（条件，“条件成立”，“条件不成立”）</p><p>巢状IF函数(EXCEL2016版本后IFS函数)：缺点：如需叠加层级过多，则公式过于复杂=IF（条件，成立，IF（条件，成立，不成立））</p><h2 id="14-VLOOKUP函数-amp-F4绝对参照"><a href="#14-VLOOKUP函数-amp-F4绝对参照" class="headerlink" title="14 VLOOKUP函数&amp;F4绝对参照"></a>14 VLOOKUP函数&amp;F4绝对参照</h2><h3 id="VLOOKUP函数"><a href="#VLOOKUP函数" class="headerlink" title="VLOOKUP函数"></a>VLOOKUP函数</h3><ul><li>公式=VLOOKUP(关键字，资料范围，列数，查询模式)</li><li>列数是指需要传回的是左起第几列的资料</li><li>参照表格需采用“递增方式”排列（最后一排数字最大）</li><li>查询模式：模糊比对：TRUE；精确比对：FALSE</li></ul><h3 id="绝对引用"><a href="#绝对引用" class="headerlink" title="绝对引用"></a>绝对引用</h3><ul><li>通常情况下，VLOOKUP函数无法自动填充，需将“资料范围”设定为固定区域；<br>否则“资料范围”会因为“相对引用”规则，随“关键字”一行下移；</li><li>方法：选定公式中的资料范围-&gt;笔记本（FN+F4）/电脑 F4-&gt;出现货币符号</li></ul><h2 id="15-IFERROR函数-amp-资料验证"><a href="#15-IFERROR函数-amp-资料验证" class="headerlink" title="15 IFERROR函数&amp;资料验证"></a>15 IFERROR函数&amp;资料验证</h2><p>公式=IFERROR（要检查的公式,公式错误的讯息）</p><p>验证：选择存储格-&gt;数据-&gt;验证-&gt;设置待验证内容和报错信息</p><h2 id="16-COUNTIFS-amp-SUMIFS函数应用"><a href="#16-COUNTIFS-amp-SUMIFS函数应用" class="headerlink" title="16 COUNTIFS&amp;SUMIFS函数应用"></a>16 COUNTIFS&amp;SUMIFS函数应用</h2><p>SUMIFS函数公式=SUMIFS（加总范围，范围1，条件1，范围2，条件2，……）</p><h3 id="COUNTIF函数"><a href="#COUNTIF函数" class="headerlink" title="COUNTIF函数"></a>COUNTIF函数</h3><ul><li>公式=COUNTIF（资料范围，条件）</li><li>注意：文本资料一定要加双引号</li><li>小技巧： 条件可以指定为某空白存储格，便于随时修改</li></ul><h3 id="COUNTIFS函数"><a href="#COUNTIFS函数" class="headerlink" title="COUNTIFS函数"></a>COUNTIFS函数</h3><ul><li>公式=COUNTIFS(范围1，条件1，范围2，条件2，……)</li><li>涉及金额的筛选=COUNTIFS(范围1，条件1，范围2，“&gt;”&amp;存储格)</li><li>存储格内金额可随时修改，符号根据需求选择</li><li>涉及日期的筛选：如需筛选特定两个日期间的资料=COUNTIFS(范围1，条件1，范围2，“&gt;2018/5/15”，范围2，“&lt;2018/6/3”)</li><li>如需筛选特定月份资料：<ol><li>利用MONTH函数建立辅助列，归纳出每笔资料所处的月份；</li><li>建立COUNTIF函数，筛选范围设定为新建的月份列</li></ol></li></ul><h2 id="17-定义名称-amp-INDIRECT函数-amp-下拉选单设定"><a href="#17-定义名称-amp-INDIRECT函数-amp-下拉选单设定" class="headerlink" title="17 定义名称&amp;INDIRECT函数&amp;下拉选单设定"></a>17 定义名称&amp;INDIRECT函数&amp;下拉选单设定</h2><p>定义名称：框选资料范围（不含标题）-&gt;公式-&gt;定义名称</p><p>INDIRECT 函数：以线索中的文字为媒介，取得目标存储格的内容。线索可以来自于两个不同的存储格，以“&amp;”连接</p><h2 id="18-让你事半功倍的12个小技巧"><a href="#18-让你事半功倍的12个小技巧" class="headerlink" title="18 让你事半功倍的12个小技巧"></a>18 让你事半功倍的12个小技巧</h2><p>资料剖析：框选需要剖析的单元格-&gt;数据-&gt;分列-&gt;分隔符号-&gt;勾选分隔符号<br>或分列-&gt;固定宽度-&gt;在数据预览处手动拖动分栏线。</p><p>插入多个空白列：选取想要插入的列数-&gt;鼠标右键-&gt;插入。F4：重复前面的操作</p><p>移除重复资料：框选单元格-&gt;数据-&gt;删除重复值-&gt;勾选</p><p>表格转置：框选单元-&gt;复制-&gt;选择性粘贴-&gt;勾选转置</p><p>贴上运算值：输入操作值-&gt;框选单元格-&gt;选择性粘贴-&gt;运算处点选操作</p><p>显示公式：公式-&gt;显示公式</p><p>目标搜寻：数据-&gt;模拟分析-&gt;单变量求解-&gt;填入对应值。PS：目标单元格内一定要有公式</p><p>表格对角线：开始-&gt;边框-&gt;绘制边框-&gt;手动绘制所需边框或右键-&gt;设置单元格格式-&gt;边框-&gt;选择所需边框</p><p>储存格内换行：ALT+enter</p><p>插入图片注解：选取单元格-&gt;右键-&gt;插入批注-&gt;删除注释框中的名字-&gt;在边框处点击右键-&gt;设置批注格式-&gt;颜色与线条-&gt;颜色-&gt;填充效果-&gt;图片-&gt;选择图片。PS：只有在边框处点击右键才会有颜色与线条选项</p><h3 id="快速选取资料"><a href="#快速选取资料" class="headerlink" title="快速选取资料"></a>快速选取资料</h3><ul><li>Ctrl+键盘方向键：选取框移动到表格的四个角落</li><li>Ctrl+shift+键盘方向键：选取对应的范围</li><li>标题列左上角：选取整张表格</li></ul><h3 id="储存格选取框"><a href="#储存格选取框" class="headerlink" title="储存格选取框"></a>储存格选取框</h3><ul><li>选取需要移动的单元格-&gt;鼠标移至单元格边框-&gt;拖动单元格</li><li>移动时按住Ctrl，复制内容</li><li>移动时按住shift，插入移动处，而不发生覆盖</li></ul><h2 id="19-表格数值格式"><a href="#19-表格数值格式" class="headerlink" title="19 表格数值格式"></a>19 表格数值格式</h2><p>开始-&gt;数字右边的按钮-&gt;数字-&gt;自定义-&gt;类型下面的输入框或快捷键Ctrl+！</p><p>可以添加符号，或者在开头或末尾添加文字。PS：添加文字资讯时记得加上””</p><p>示例：0.00;(0.00);(0.00);@代表正值；负值；零值；文字</p><p>添加颜色：[所选颜色]，添加到所选区域前即可。只有8种颜色或[颜色+色彩编号]，例如[颜色33]</p><p>若语法结构内某类型没有格式，那么将会隐藏该类型<br>可以在格式中加入判断语句，例如[&gt;90]，一个语法最多有两个判断语句若想有多个判断语句：开始-&gt;设定格式化条件</p><p>点选格式后再点选自定义格式即可看到它的语法结构</p><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>#</td><td>遇到无意义的0将不会显示</td></tr><tr><td>?</td><td>遇到无意义的0将会空一格作为显示</td></tr><tr><td>0</td><td>强制显示每一个指定的位数</td></tr><tr><td>@</td><td>预留文字位置</td></tr><tr><td>*</td><td>重复*后面的符号</td></tr><tr><td>,</td><td>千</td></tr><tr><td>,,</td><td>百万</td></tr><tr><td>_</td><td>预留一个_后面符号的宽度</td></tr></tbody></table><h2 id="20-时间格式-amp-工龄与工时计算"><a href="#20-时间格式-amp-工龄与工时计算" class="headerlink" title="20 时间格式&amp;工龄与工时计算"></a>20 时间格式&amp;工龄与工时计算</h2><p>Datadif(开始日期，结束日期，计算单位）计算单位用”y”,”m”。PS：找不到这个函数，但是可以直接输入使用</p><p>Networkdays（开始日期，结束日期，假日）</p><p>Networkdays.intl(开始日期，结束日期，自定周末，假日)。自定周末输入对应的数字即可</p><h3 id="符号表-1"><a href="#符号表-1" class="headerlink" title="符号表"></a>符号表</h3><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>[DBNUM1]</td><td>将阿拉伯数字转换为中文数字</td></tr><tr><td>aaaa</td><td>以星期的方式显示</td></tr><tr><td>Ctrl+；</td><td>插入现在的日期</td></tr><tr><td>Ctrl+shift+；</td><td>插入现在的时间</td></tr><tr><td>Today（）</td><td>实时日期</td></tr><tr><td>Now（）</td><td>实时时间，按F9或点击单元格时更新</td></tr><tr><td>[h]</td><td>计算已经过的小时数</td></tr><tr><td>[m]</td><td>计算已经过的分钟数</td></tr></tbody></table><h2 id="21-如何计算成绩排名"><a href="#21-如何计算成绩排名" class="headerlink" title="21 如何计算成绩排名"></a>21 如何计算成绩排名</h2><p>rank.eq(主体，比较范围，排序方式)</p><p>比较范围注意要使用F4来作为绝对参照</p><p>排序方式默认以降序排序，需要升序排序时在排序方式内填入1即可</p><p>rank.avg()与rank.eq类似，只是当成绩相同时，rank.avg采用排名的平均值</p><h2 id="22-提取表格内信息"><a href="#22-提取表格内信息" class="headerlink" title="22 提取表格内信息"></a>22 提取表格内信息</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>Left（资料位置，捉取字数）</td><td>捉取数据左侧的数据</td></tr><tr><td>Right（资料位置，捉取字数）</td><td>捉取数据右侧的数据</td></tr><tr><td>mid（资料位置，开始位置，捉取字数）</td><td>捉取数据中间的数据</td></tr><tr><td>Find（要搜寻的文字，资料来源，搜寻起点）</td><td>查找文字所在位置</td></tr><tr><td>Len（资料）</td><td>计算储存格中的字数和空格</td></tr></tbody></table><h2 id="23-index-match"><a href="#23-index-match" class="headerlink" title="23 index+match"></a>23 index+match</h2><p>hlookup与vlookup类似</p><p>Index（栏/列范围，顺位）或index（资料范围，列数，栏数）</p><p>Match（查找对象，查找范围，比对方式）</p><p>综合运用例子INDEX(C3:F10,MATCH(I2,D3:D10,0),MATCH(H3,C2:F2,0))</p><h2 id="24-保护表格"><a href="#24-保护表格" class="headerlink" title="24 保护表格"></a>24 保护表格</h2><p>可供修改的单元格：框选单元格-&gt;右键-&gt;设置单元格格式-&gt;保护-&gt;取消勾选锁定。</p><p>隐藏单元格公式：框选单元格-&gt;右键-&gt;设置单元格格式-&gt;保护-&gt;勾选隐藏</p><p>隐藏：选定行或列-&gt;右键-&gt;隐藏</p><p>允许编辑范围：审阅-&gt;允许编辑范围-&gt;新建-&gt;设定标题、范围、密码-&gt;确认密码-&gt;确认</p><p>PS：以上操作需取消保护工作表，开启保护工作表后效果才会出现</p><p>保护工作表：审阅-&gt;保护工作表-&gt;输入密码-&gt;确定密码</p><p>保护工作簿与保护工作表类似</p><h3 id="Excel表设置密码"><a href="#Excel表设置密码" class="headerlink" title="Excel表设置密码"></a>Excel表设置密码</h3><ul><li>文件-&gt;信息-&gt;保护工作簿-&gt;用密码进行加密-&gt;设定密码-&gt;确认密码</li><li>另存为-&gt;工具-&gt;常规选项-&gt;设定密码</li></ul><h2 id="25-重复内容"><a href="#25-重复内容" class="headerlink" title="25 重复内容"></a>25 重复内容</h2><p>删除重复信息：框选单元格-&gt;数据-&gt;删除重复值-&gt;勾选选项-&gt;确定</p><p>防止重复内容：选定行或列-&gt;数据-&gt;数据验证-&gt;允许中选定自定义-&gt;填入公式-&gt;确定。公式例子：=countif(A:A,A1)=1</p><h3 id="标注重复信息"><a href="#标注重复信息" class="headerlink" title="标注重复信息"></a>标注重复信息</h3><ul><li>框选单元格-&gt;开始-&gt;条件格式-&gt;突出显示单元格规则-&gt;重复值-&gt;确定</li><li>框选单元格-&gt;开始-&gt;条件格式-&gt;新建规则-&gt;使用公式确定要设置格式的单元格-&gt;输入公式-&gt;修改后一参数值为相对参照-&gt;格式-&gt;填充-&gt;选择颜色-&gt;确定</li><li>公式例子：=countif($E$2:$E$14,$E2)&gt;1</li></ul><h2 id="26-随机函数的使用"><a href="#26-随机函数的使用" class="headerlink" title="26 随机函数的使用"></a>26 随机函数的使用</h2><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>Randbetween(最小值,最大值)</td><td>从最小值和最大值的范围内产生一个整数</td></tr><tr><td>Choose(序号,可供选择的选项)</td><td>根据序号选择对应选项</td></tr><tr><td>Rand()</td><td>产生0到1的随机数</td></tr><tr><td>Roundup(数值,位数)</td><td>无条件进位函数</td></tr></tbody></table><h3 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h3><ul><li>=INDEX(C3:C14,RANDBETWEEN(1,12))</li><li>=CHOOSE(RANDBETWEEN(1,2),”A卷”,”B卷”)</li><li>=CHOOSE(ROUNDUP(RANK(D3,$D$3:$D$14)/4,0),”A组”,”B组”,”C组”)</li><li>=INDEX($C$3:$C$14,RANK(D3,$D$3:$D$14))</li></ul><h2 id="27-进度追踪表"><a href="#27-进度追踪表" class="headerlink" title="27 进度追踪表"></a>27 进度追踪表</h2><p>勾选框块：功能区空白处点击右键-&gt;自定义功能区-&gt;勾选开发工具-&gt;确定-&gt;开发工具-&gt;插入-&gt;选择勾选框块</p><p>完成格与状态的信息传输：框块右键-&gt;设置控件格式-&gt;选择单元格</p><p>进度栏函数设置：=IF(I3=TRUE,1,IF($C$3&gt;=G3,0,”🕒”))。PS：时钟符号可以：1.win10：wins+；2.UNICHAR(128336)</p><p>添加刻度：点击饼图-&gt;设计-&gt;选择数据-&gt;添加-&gt;系列值输入对应数值的1（如={1,1,1,1,1,1,1,1,1,1,1}）-&gt;更换图表类型-&gt;勾选次坐标轴-&gt;选择未完成部分的饼图-&gt;填充选择无填充</p><h2 id="28-甘特图"><a href="#28-甘特图" class="headerlink" title="28 甘特图"></a>28 甘特图</h2><p>插入-&gt;堆积条形图-&gt;设计-&gt;选择数据-&gt;图例项选择“开始日期”和“天数”-&gt;水平轴标签框选“任务名称”-&gt;点击右侧条形-&gt;设置数据系列格式-&gt;填充-&gt;无填充-&gt;点击任务名称-&gt;坐标轴设定-&gt;勾选逆序刻度值-&gt;点击日期标识-&gt;坐标轴设定-&gt;最小值（设定为对应数值，可通过设定单元格格式的通用格式查看）-&gt;单位的大选项为间距设定-&gt;点击右侧条形-&gt;点击+号-&gt;勾选误差线-&gt;更多选项-&gt;选择正偏差、无线端-&gt;自定义选择对应数列-&gt;填充-&gt;实线-&gt;调整宽度</p><h2 id="29-sumproduct"><a href="#29-sumproduct" class="headerlink" title="29 sumproduct"></a>29 sumproduct</h2><p>Sumproduct（A，B）：将A，B分别相乘后相加</p><p>=SUMPRODUCT((C3:C9=C11)*(D3:D9=D11)*F3:F9)</p><p>=SUMPRODUCT(C3:C8,D3:D8)</p><p>规则管理设定规则时需要加上一个$来锁定<br>=OR(AND($E3&gt;1000,$D3&gt;5),$C3=”有”)</p>]]></content>
      
      
      <categories>
          
          <category> 办公 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> office </tag>
            
            <tag> 日常办公 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暨大计算机|数学跨考计算机技术经验贴</title>
      <link href="/2022/06/06/yan-jiu-sheng/shu-xue-kua-kao-ji-suan-ji-ji-zhu-jing-yan-tie/"/>
      <url>/2022/06/06/yan-jiu-sheng/shu-xue-kua-kao-ji-suan-ji-ji-zhu-jing-yan-tie/</url>
      
        <content type="html"><![CDATA[<h1 id="如何选择学校和专业"><a href="#如何选择学校和专业" class="headerlink" title="如何选择学校和专业"></a>如何选择学校和专业</h1><p>在备考过程中，选择学校和专业是一件非常让人头疼的事情，我当时在这个问题上也花费了不少的时间。我当时是考虑了下面的几个问题，最终找到了自己的选择。</p><blockquote><p>考研中，选择大于努力。</p></blockquote><ol><li>未来想从事的行业？我未来想要从事后端开发，所以我会选择计算机相关的专业，而且会优先选择专硕，比较偏向应用层面。然后可选的专业有软件工程、计算机技术、网络安全和人工智能等。</li><li>理想的工作地点？由于我家在广州，所以优先选择的工作地点是广州。第二选择是深圳，因为深圳大厂比较多，而且离广州也很近，非常方便。除非有特殊情况，<del>比如去杭州阿里</del>。否则应该会选择留在广东，例如佛山和东莞。</li><li>是否能接受考英一？因为我的英语水平是比较差的，属于英语四级考了3次，勉强过线的水平，入学英语分班也是属于最末尾的班。由于担心过不了英语单科线，所以我是不能接受考英一的，会选择考英二的学校。</li><li>是否能接受专业课为408？（计算机专属）408是计算机统考的专业课，包含计算机组成原理、数据结构、操作系统和计算机网络四门专业课，属于是计算机考研中难度最大的专业课，除了清华的912，那个应该算是加强版的408。由于我是数学跨考计算机，如果选择408，要自学的内容比较多，而且我还要恶补英语，所以我不能接受408，比较倾向于选考两门及以下的学校，最好是考数据结构，因为这个我比较擅长。</li><li>能不能接受二战？我是不打算二战的，如果没考上，也不会再考一次了。所以我是倾向于求稳的，因此我选择的院校范围是211和一些计算机领域比较优秀的双非，争取能够一次上岸。</li><li>学校的风评好不好？考研和高考不同，有复试环节，不是说分高就能够被录取，复试环节的操作空间很大。因此学校的风评很重要，谁都不想自己一年的努力被不公正的学校毁了。有些学校会歧视双非，优先选择211及以上的学校；有的学校还会恶意刷一志愿，来收调剂生，确实会有些学校比较恶心，我们不能回避这个现实，因此我们要关注学校的风评。</li><li>复试分数占比？我希望选择复试占比较少的学校，因为这样学校操作空间比较小，只需要专心考好初试即可。而且我属于跨考，也没有项目经验，也不是出身名校，我是感觉自己复试可能不会有太大的优势。我原本的目标是初试400分，然后复试守住排名，不要掉太多名次。<del>不过现实恰好相反了，初试考的不怎么好，反而复试逆袭了。</del></li><li>学校的专业实力如何？大家考研都是想提升自己的学历，提高自己的水平。所以学校的实力很重要，因为好的学校可以为你提供更好的学习资源，毕业之后也不会被卡简历关，可以为就业提供加成。对于想做研究的同学来说，在好学校获得更好的资源也有利于产出成果。我当时是以教育部的学科评估为主，然后网上收集相关的信息来判断的。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当时我的备选名单中有暨南大学、深圳大学、杭州电子科技大学和南方科技大学。在考虑完这8个问题后，我就选择报考暨南大学的计算机技术专硕。因为暨大地处广州，然后在华南地区的名声也很不错，也是211，然后我高中的时候就想考暨大，也算是弥补了一点高考时的遗憾。然后暨大是考英二数二，专业课是自命题，考操作系统和数据结构，符合我的要求。暨大的计算机科学与技术在最新一轮的评估中是B，还算可以。广东地区中大华工是B+，暨大深大是B，然后华农广工是C，其余高校没有上榜。然后暨大是不接受校外调剂的，比较保护一志愿，然后网上的风评还不错。最后我自身体验也很不错，确实做到了公平对待学生，这部分我留在复试部分再展开讲。</p><p>讲了不少暨大的优点，现在讲一下不符合我要求的部分。首先是专业问题，我最想去的其实是软件工程专业，但是暨大是没有开设这个专业的，所以我选择了比较热门的计算机技术。然后是复试占比问题，暨大复试原比例是5:5，有机试部分，由于疫情的原因，取消了机试，比例也降为了6:4。然后复试总分是200，暨大会先将初试成绩除以初试总分，复试成绩除以复试总分，再6:4计算，化简后的计算公式为总成绩=初试分数*0.6+复试分数，复试占比还是挺高的。然后上一年的复试比例是1:1.8，复试线是361，压力还是挺大的。最后我想说其实不太可能有完全满足自己需求的学校，需要我们根据自身需求进行取舍。</p><h1 id="备考过程"><a href="#备考过程" class="headerlink" title="备考过程"></a>备考过程</h1><h2 id="作息时间"><a href="#作息时间" class="headerlink" title="作息时间"></a>作息时间</h2><table><thead><tr><th>时间</th><th>内容</th></tr></thead><tbody><tr><td>8点</td><td>起床</td></tr><tr><td>8点半-11点半</td><td>阅览室学习</td></tr><tr><td>11点半-下午2点半</td><td>吃饭、休息和睡午觉</td></tr><tr><td>下午2点半到6点</td><td>阅览室学习</td></tr><tr><td>下午6点-8点</td><td>跑步和吃饭</td></tr><tr><td>晚上8点-10点</td><td>背诵知识点和总结</td></tr><tr><td>晚上11点</td><td>睡觉</td></tr></tbody></table><h2 id="各科目标"><a href="#各科目标" class="headerlink" title="各科目标"></a>各科目标</h2><p>在开始备考之前，我们需要根据所选的学校和专业，估算自己初试所需要的分数，然后分配到每个科目上。有了对每个科目的目标分数，有利于我们确定对该学科的学习计划。我当时反思了自己高考的问题，就是对自己优势学科数学和物理期待太高，然后发挥不理想。对于弱势学科英语，出于畏难情绪，直接摆烂不学。所以这次我的目标是均衡发展，英语和政治目标是75，然后数学和专业课目标是125，总分目标是400。决定好目标分数，我就开始制订学习计划。</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p><strong>书籍：徐涛《核心教案》+《背诵笔记》；肖秀荣《1000题》+《八套卷》+《四套卷》+《时政》</strong></p><p><strong>视频：徐涛强化班</strong></p><p><strong>公众号：考研政治徐涛、苏一说了</strong></p><p>我是在暑假才开始政治复习，主要就是晚上看徐涛的强化班，然后使用配套书籍《核心教案》，看完一个专题就做肖秀荣的《1000题》对应的章节。我认为政治可以较晚的开始复习，不过我建议大四开学应该要开始了，因为到后面时间比较紧张。我个人认为可以暑假开始，然后利用晚上或者零散的时间听一下。<strong>主要听马原部分，思修部分时间紧张可以跳过。</strong>网上建议《1000题》要刷3遍才可以，因为我目标不是很高，所以我只刷了一遍，第二遍只做了马原的错题。然后我每天都会在闲余时间都会看一下徐涛的公众号，积累一些素材和了解考研资讯,<del>顺便看看评论区吐槽考研</del>。我个人觉得徐涛的内容挺有意思的，我考上了之后也没有取关。</p><p>然后等《背诵笔记》和《时政》出版后就开始背内容，虽然也只背了马原部分。然后按部就班的做《八套卷》和《四套卷》，只背了《四套卷》的论述题。这里推荐一下苏一说了这个公众号，B站上也有带背视频，提供肖四和肖八的带背，会将论述题答案进行精简和画思维导图，选择题会有答案解析，还会进行拓展，我个人觉得还蛮不错的。</p><p>总而言之，我认为政治是不太容易拉开差距的科目，把我上述的书籍和视频都过一遍，应该70分左右是没有问题的。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p><strong>书籍：田静《句句真研》；《考研真相》；王江涛《考研英语高分写作》</strong></p><p><strong>视频：英语真题解析、田静句句真研、英语分级阅读</strong></p><p><strong>B站up主：英语兔、罗肖尼Shawney、YouTube口语精选</strong></p><p><strong>我建议英语较差的同学可以去看一下B站罗肖尼Shawney的视频</strong>，我看完之后收获很大。除了少数人外，大家的智力水平其实相差无几，那为什么大家的英语水平可以相差那么多。我以前认为是自己没有语言天赋，现在我觉得只是我的学习方法和老师讲授的方法不适合我。长久以来，我都在用一种错误的方式学习英语，用学数学的方法学习英语，试图搞清楚每个选项的原因，做到知其然，也知其所以然。然后死磕语法，死记硬背语法规则，很讨厌别人跟我说“这题我是靠语感选的”。然后在一次次的失败中丧失对英语的兴趣。其实不应该是这样的，回想我们是如何学中文的，我们是经历了孩童时期的耳濡目染，听了很多中文，阅读了很多中文才学会的，我们讲话也不是先想一想有没有语法错误，而是自然而然的表达。所以为什么我们学英语就不能这样呢？</p><p>所以我建议英语较差的同学从背单词开始做起，单词是基础中的基础，我当时用的是不背单词这个APP，还挺好用的。在积累了一定量之后，可以开始看田静的《句句真研》，学习基本的语法。B站的<strong>英语兔</strong>也非常推荐，讲的非常基础，真正做到了深入浅出，解答了很多我之前积累的问题。等打好基础后，可以开始背王江涛的《考研英语高分写作》，背作文不是为了到时在考场上默写的，毕竟遇到相同题材的几率不大。<strong>背作文是为了有好的英文输入</strong>，所以不能死记硬背，而是在背诵中了解到优秀的文章是怎么组织的。我当时是先背中文，分析文章的框架，然后背诵英文，先在纸上默写一遍，再给同学背一遍，然后从中选择好用的例句进行重点记忆。背作文是一个提高语感的方法，背作文之前我做真题阅读错误率很高，随着背作文，我对文章的理解能力提高的很快，后期我做阅读能够保持错3个以内，这对我来说真的很不容易了。有时真的是靠语感选出来的，感觉文章就想表达这个意思，<del>终于我也成为了自己最“讨厌”的人</del>。然后时间充裕的同学，可以去B站YouTube口语精选内找英语分级阅读，一共有5个等级，可以挑选自己能力范围的内容。在阅读的时候，不需要查语法和单词，就开开心心的听就完事了，里面选的内容都挺有趣的，现在我也一直在听。也可以找自己喜欢的英语内容，兴趣是最好的老师。然后做考研真题我选的是《考研真相》，答案解析做的很不错，非常推荐。</p><p>英语是需要我们细水长流的积累的，贵在坚持，尤其是英语较差的同学，应该尽早开始。以我这样基础差的也能够拿到70分，我相信大家也能做到，之前做不到可能只是方法不适合而言。<strong>关键在于英语输入，可以阅读也可以听，选择自己喜欢的方式学英语。</strong>然后不要恐惧学英语，其实也没那么难，我觉得这期间最难的是决定去学好英语。</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><strong>书籍：汤家凤《高等数学辅导讲义》；李永乐《线性代数辅导讲义》+《历年真题》+《660》+《复习全书基础篇》；李林《四套卷》；《定理速查笔记》</strong></p><p><strong>视频：汤家凤高数基础班+强化班；李永乐线代基础班+强化班</strong></p><p>由于前期的精力都在学英语和专业课上，期间又考虑是读研，还是找工作的问题上纠结，浪费了很多时间。<del>加上当时比较自信，觉得自己数学比较好，而且又是数学系的，数学应该问题不大。</del>所以我是暑期才开始系统的学考研数学，也算是一大失误，大家不要学我，导致后面时间很紧张，影响了其他科目的复习。当时看汤家凤的高数基础班和对应的书，看完就做李永乐的《复习全书基础篇》，我感觉我们学的数学和考研数学还是有一定差距的，我们学的比较偏向证明，而考研数学更侧重于计算，运算技巧很重要。然后听李永乐的课和做辅导讲义，做完后就开始做《660》。顺便说一句，李永乐的书经常有基础篇和提高篇之分，不要买错了。《660》还是很不错的，推荐使用，题量适中，不过感觉线代部分过于简单。建议再做《330》，我当时因为时间不够，直接跳过了，选择做真题。《660》完成后就继续听强化课，尤其是<strong>李永乐的线代强化课</strong>，真的质量超级高，当时听完有种醍醐灌顶的感觉。</p><p>强化课听得差不多了，我就开始做历年真题，我把数二历年真题全部做了一遍，可以用作模拟，在规定时间内做完一套真题。<strong>做真题价值很高</strong>，可以感受到出题人的思路和练习高质量的题目，时间紧迫的话，可以像我一样，放弃一些模拟题，去做真题。做完真题后去做李林的《六套卷》和《四套卷》，质量很不错，我当时是只做了《四套卷》。还有就是要注重基础，建议买一本速查笔记，多看看，记牢基础概念。我就是时间紧张，基础没打好，导致做错了一些基础题，没拿到应拿的分数。同时注重计算，计算的正确率很重要，会做但是经常算错也是没有用的。我觉得计算正确率与做草稿的方式关系很大，要养成<strong>好的草稿习惯</strong>，可以将草稿纸折成多个小格，然后分区域书写，标好题号方便检验。</p><p>学数学需要理解，做题不要太死板，要知道每一步是怎么做的，也要知道每一步为什么要这样做。和英语学习不同，学数学要做到知其然，也要知其所以然，这样在题目变化的时候也能够适应。<strong>数学=基础+理解</strong>。</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p><strong>书籍：王道《操作系统》+《数据结构》；汤小丹《操作系统》</strong></p><p><strong>视频：王道操作系统+数据结构</strong></p><p><strong>公众号：灰灰考研、计算机考研助手</strong></p><p>由于我有学数据结构这门课，之前自己在LeetCode上面做题的时候也积累了很多对数据结构的知识。所以我简单过了王道的视频，就开始刷王道的练习题。因为基础比较好，所以难度不大。操作系统是我完全没有了解过的领域，幸好暨大提供了参考书目，然后我先把汤小丹的《操作系统》看了一遍，然后看王道视频，最后刷练习题。由于对操作系统没有把握，因此我刷了两遍，第一遍全部做，用红笔圈住错误的题目，蓝笔圈住对选项不确定的题目。第二遍就做之前圈住的题目，如果再错一遍就用黑笔圈住，方便之后复习。</p><p>刷完题就开始做暨大往年的真题，这个暨大还是蛮好的，会公布每年的题目。暨大自命题还是和408命题方向有些区别，王道是面向408的，所以复习的也不算很到位，数据结构是靠基础能搞定，操作系统有点吃力。毕竟是跨考，没学过这门课，感觉暨大操作系统命题怪怪的，不是很明白他想考察什么知识，知识点都挺偏的。然后想考计算机的可以关注上面两个公众号，都是专门做计算机考研资讯的，可以查各个学校的复试线，复试比例等信息。</p><p>我认为计算机专业课与数学类似，要理清基础概念和原理，然后技术的革新是为了解决之前的问题的，所以我们可以以这个算法解决了之前的哪个问题作为线索来串联知识点。</p><h1 id="考试期间"><a href="#考试期间" class="headerlink" title="考试期间"></a>考试期间</h1><ol><li>要在考试前调整好作息，提前适应情况。比如我有睡午觉的习惯，我当时想着考完回酒店睡，但是时间太短了，而且上午刚考完，整个人属于比较亢奋的状态，根本睡不好。这也导致了我下午的英语和专业课不太理想，尤其是专业课，起码少拿了10分。</li><li>做好突发情况的预案，多设想一下可能出现的意外情况，想想应对方案。比如多准备几张准考证，放多几个地方。带好耳塞和眼罩，利于适应各种情况。</li><li>最好带个手表看时间，方便规划时间。吃清淡点的食物，准备好自己要吃的东西。调整好心态，不要给太大的压力给自己。</li></ol><h1 id="初试结束"><a href="#初试结束" class="headerlink" title="初试结束"></a>初试结束</h1><p>考完初试，可以先放松几天，然后预估自己的分数区间来做下一步的打算。如果比较理想的话，可以开始准备复试的内容和把自己毕业论文做一下，不然到时会比较被动。我当时就是考完感觉很差，可能要压线进复试了，因为今年计算机技术的名额少了16个，上一年是55个，今年只剩39个了。当时心情不是很好，就看了一下复试可能会考到的内容，也没有心情做毕业论文。导致我毕业论文进度太慢了，前几天才刚写完，当时设想的要实现的功能就实现了40%左右，所以还是要早点开始做毕业设计。然后考的不理想，觉得自己进不了复试的同学，赶紧去写毕业论文，不要浪费剩余的时间了，不然到时毕业论文和找工作一起来，压力就太大了。其实考完觉得考差是常态，因为压力之下出错是很正常的事情，而且考研的题目质量高，一紧张就很容易卡住了，所以抗压能力也很重要，我们能做到的就是多模拟，提高自己的水平，如果能在初试中发挥90%的水平就算是可以接受的范围了。</p><p>当时出成绩的时候还挺开心的，比我预想中的要高，但是只给了大类的排名，我排电子信息的八十多名，然后电子信息有3个方向，招生人数差不多，然后我估计自己在计算机技术应该能在名额以内。然后就开始准备复试和写毕业论文，打算到时讲一下自己的毕业论文。</p><p>没想到出复试名单的时候，看到自己排47名，而且是和其他3个同学并列。我们当时复录比为1:2，复试分数线为370。而且没有扩招，只有39个名额。但是我和前面的同学差距并不大，第39名同学是384分，只相差3分，而且有很多同分数的，我想还是有机会的。不过后面的同学和我相差也不大，这意味着需要逆袭前面的同学，而且还要保证不被后面的同学超过，因为我们之间的分差其实很小。当时还有一个让我比较在意的点是我英语分数居然是复试名单里面的倒数第二，倒数第一是69分。<del>我还想着我英语有进步了，70分至少能排中下吧，没想到还是熟悉的倒数位置。</del></p><h1 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h1><h2 id="复试准备"><a href="#复试准备" class="headerlink" title="复试准备"></a>复试准备</h2><p>我当时是买了复试视频和书本，也很简单的，会将计算机本科所学的课程基础过一遍。我当时是先把视频看一遍，然后再把书看一遍，算是打好计算机基础。因为我的毕业设计跟计算机相关，所以我还抽时间做了我的毕业设计，实现了一部分的功能。做完这些基础部分后，我就开始写中英文的自我介绍和问答，过了一遍自己的项目和竞赛经历，想一想老师可能会问的一些问题。然后多背诵自己的自我介绍和问答，可以找同学陪你进行模拟。</p><h2 id="复试期间"><a href="#复试期间" class="headerlink" title="复试期间"></a>复试期间</h2><p>出于学校复试要求，复试内容是不能说的，我就分享一些经验，而且每个学校复试内容都不同，其实讲的话也没啥意义。</p><ol><li>遇到不会的问题，如果没想好的，不用急着开始回答，可以请求老师给你时间思考。不要没想好就匆匆忙忙的回答，支支吾吾的很影响观感。如果想了之后还是不会，可以延伸到其他问题，或者诚恳一点道歉，不要找那么多理由。</li><li>可以试着换位思考，想一想如果你是老师的话，你会想要一个怎么样的学生，然后尽力将自己往这个方向靠拢。把自己当作一件商品，将自己推销给面试老师这位顾客。</li><li>沉着冷静是最重要的，知道的人很多，能做到的人很少。面对着陌生的老师，自己一年多的努力将被这短短二十分钟决定，说实话，挺难控制住自己的情绪波动。尤其是在面临陌生的问题，所以要多模拟，而且人选你越陌生越好，面对同学你可能表现的很好，但是遇到陌生人的问题可能效果就要打折扣了。我建议可以报个模拟面试班，很多机构都会提供这个服务。</li><li>可以适当的包装一下自己，但要保证老师问不倒你，不要吹一些你圆不了的牛。所以建议还是老实一点，不然被老师戳破谎言还是挺尴尬的。</li><li>引导老师问你擅长的领域，把自己的优势展示出来。比如竞赛经历，论文经历都可以写上去，然后重点展示。你要找到你自己的优势所在，然后尽力去展现你的优点，就要表现出“老师，你快来问我这个的感觉”。</li></ol><h2 id="复试结果"><a href="#复试结果" class="headerlink" title="复试结果"></a>复试结果</h2><p>看到复试结果的时候，我还挺惊讶的，本来以为自己能压线录取就很幸运，没想到是复试第七。我想说结果不会辜负你的努力的，复试期间我非常认真的准备，积极地去问别人经验。我觉得无论做什么事情，都应该全力以赴的去做，不要为自己留下遗憾。然后这次复试有10个人逆袭成功，刷掉了2个400分的，3个390多的，还有5个384（第39名）以上的，其中一个400分是深大科班出身，本来群里觉得他都稳了，还挺遗憾的。还有一个逆袭哥，压线进入复试，来自珠海科技学院，一个三本院校，无竞赛，无论文，但是在考研群里聊天感觉计算机基础很好，自己做了不少项目。然后他复试表现好，还是被录取了。还有我们的初试第一，复试完就变31名，复试还是很重要的。而且我个人感觉暨大复试还挺公平的，并不是走个过场。暨大的复试录取均分为392.2，在计算机领域算是挺高的，尤其是专业课分数不高的情况下。</p><p>我事后想了一下自己复试表现有哪些的优势，我觉得首先我有竞赛经历，有一个数学建模国赛二等奖和蓝桥杯国三，然后绩点也不错，华农在考暨大的生源中也还是不错的。然后虽然我当时心里挺慌的，但是我还是尽量表现的很冷静，我觉得这个是我的加分项。但是复试感觉是个黑箱模型，只有输入和输出，中间过程——老师是怎么想的，我也没有办法能够得知。我建议大家可以看看复试被逆袭的人的经验贴，复试成功的人可能有各种不同的优势，但是失败的通常都会犯类似的错误。</p><h1 id="考研原因和计算机考研介绍"><a href="#考研原因和计算机考研介绍" class="headerlink" title="考研原因和计算机考研介绍"></a>考研原因和计算机考研介绍</h1><p>其实刚上大学的时候是没有考研这个打算的，本来是想毕业之后去当个数学老师的。在知乎一致看好计算机领域的影响下，高考完我就自学了Python，然后大学期间开始更深入计算机，开始学编程，学数据结构，越了解就越感觉到计算机真的很有意思，感觉动手实现一个东西还挺有趣的。当时其实就有转专业的想法，但是我又蛮喜欢数学的，然后犹豫了很久也没有转，让我坚定转行的应该是实变函数和泛函分析这门课，<del>本来刚适应数学分析，觉得自己又行了的时候，实变和泛函给我整不会了，</del>感觉自己没有什么数学天赋，适合做应用相关的领域。因此我这次读研也是选择了专硕，研究方向想选开发，而不是搞算法方向的。出结果之后也有不少老师联系我，想我跟着他搞算法，我个人觉得数学转计算机搞算法其实很受老师欢迎的。但是我觉得自己能力不够，我还是务实一点，能把自己能力范围内的事情做好就已经很成功了。我个人考研的目的就是为了更好的学习计算机、有个更好的文凭和给自己一点时间缓冲，因为我现在的水平在跨专业的人中算是很不错的，但是跟计算机科班出身的还有很大的差距。离我的目标进入大厂还差的远，我看了网上别人分享的后端开发的学习路线，我感觉考上研只是我漫长计算机学习生涯中的一步，后面还有很长的路要走。<strong>考上研只是代表了你获得了成为研究生的资格，而不是掌握了研究生所具备的技能</strong>，我考研期间学到的知识，无论我是否考上，它都属于我了，没学到的也不会因为我考上了而属于我。而且考研不是万能药，甚至它并不是最好的选择，<strong>它并不能解决你现在面临的问题，如果你不在读研期间解决它的话</strong>，你现在找不到工作，读研期间不提高自己的竞争力，研究生毕业也还是找不到，我希望大家能够意识到这一点。</p><p>现在这个考研的大形势和计算机的热门，导致了计算机考研其实是个竞争很激烈的情况。考研和高考不同，高考的知识点基本相同，不同的学校基本就是不同的档次，所以我认为是学校优先的。然后考研由于不同的学科考的内容是不一样的，所以是专业优先的，所以我认为选择自己喜欢的专业很重要。而且少看那些什么三本三个月上岸985的帖子，基本都是考末流985的冷门中的冷门学科，就是忽悠人的，不要低估考研的难度，尤其是想转行到计算机的同学，我当时就低估了考暨大的难度，<del>5月份的时候我妈问我考暨大计算机有把握吗？我说华农考个暨大应该难度不大吧，很多二本的都能考上985，我觉得挺稳的。</del>然后我付出的代价也挺大，后期心态爆炸，进度完全赶不上别人，所以我觉得对于考研，不能看那些考研机构贩卖焦虑，给自己过多的压力，也不能低估考研的难度，指望自己能够最后时刻能够超常发挥，不是不可能，只是概率小，考研是一个需要漫长积累的过程。</p><p>考暨大计算机技术比较不好的是调剂比较麻烦，因为数二英二自命题基本是鄙视链的底端，有些学校会限制只要数一英一，或者限制要408。不过暨大只接受校内调剂，所以如果能调暨大校内的话，竞争会比较小，毕竟你只需要和一志愿是暨大的人竞争。今年被刷的两位400分同学一个去了广大的方班，一个去了广工。如果不介意去珠海的话，可以选择暨大的人工智能专业，珠海两人间，今年才第二年招生，性价比贼高，今年还扩招了一倍，复试线很低。最后我还想讲一下一个师兄的故事，当时我和你们一样，在下面听师兄分享经验，这位师兄有着极其明确的人生规划，他大一就开始关注大厂的招聘要求，然后根据要求来调整自己的学习计划，然后学一个阶段后就去应聘实习，根据反馈再调整，学完再去应聘，循环往复。他说就像打游戏刷级一样，需要哪个技能就点哪个技能。最后拿到了很多大厂的offer，然后去了微信。他说自己是个普通人，没有过人的天赋，只能靠努力弥补。我觉得他是我们应该学习的对象，我们可能不能像ACM选手一样靠天赋碾压，也不能论文发到手软，但<strong>我们可以明确自己的人生目标，并努力向其靠拢。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"祝你们都能上岸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"祝你们都能上岸\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  printf<span class="token punctuation">(</span><span class="token string">"祝你们都能上岸\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"祝你们都能上岸"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="APP推荐"><a href="#APP推荐" class="headerlink" title="APP推荐"></a>APP推荐</h1><p>水滴清单：一个做任务规划的软件，我觉得做时间规划可以极大地提高你的工作效率，同时我觉得时间规划不用做的太细，因为这样比较浪费时间而且也难以坚持下去，我个人是习惯按周和按月进行的。</p><p>番茄TODO：一个学习软件，可以定时锁屏，让你更高效的学习，还会记录你的学习情况，我是用了才发现原来我一天中真正用来学习的时间这么少。可以在学习的时候锁屏，然后设一个白名单，这样学习生活两不误。我是觉得学习的时候应该将手机放远一点，避免影响学习。</p><p>MOODA心情日记：写日记的软件，我之前一直都没有写日记的习惯，因为老是找不到日记本和不知道写啥，这个软件可以选择一天的心情，非常简便，然后每天记录自己的学习和生活是个很好的习惯，事后你再看也很有意思。</p><p>不背单词：一个背单词软件，个人使用体验还是很好的。</p><p>小睡眠：一个白噪音软件，如果压力比较大，睡不好的话可以听听白噪音助眠。</p><p>LeetCode：计算机专属，可以做一下算法题，建议准备复试使用，也可以在上面了解一下计算机领域相关的东西。</p><h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>暨大计算机考研群：943823112</p><p>暨南大学计算机考研信息汇总、报录比信息、参考书目、经验贴等信息可以参考以下链接：<a href="https://">https://github.com/Steve0x2a/JNU_CS</a>。如无法访问可以访问国内镜像:<a href="https://">https://gitee.com/Steve0x2a/JNU_CS</a></p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨考 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
